using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.SessionState;
using System.Data.SqlClient;
using System.Web.Script.Serialization;
using System.Data;
using System.Web.Services;
using System.Net.Mail;
using System.Net;
using System.Text;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Globalization;
using MySql.Data.MySqlClient;
using System.Data.Entity;
using Dairy_ERPModel;



/// <summary>
/// Summary description for FleetManagementHandler
/// </summary>
public class FleetManagementHandler : IHttpHandler, IRequiresSessionState
{
    SqlCommand cmd;
    SalesDBManager vdm = new SalesDBManager();
    MySqlCommand mycmd;
    VehicleDBMgr vdmnr = new VehicleDBMgr();
    PODbmanager pdm = new PODbmanager();
    FleetDBManager fdm = new FleetDBManager();
    public FleetManagementHandler()
    {
        //
        // TODO: Add constructor logic here
        //
    }
    public bool IsReusable
    {
        get { return true; }
    }
    private static string GetJson(object obj)
    {
        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();
        return jsonSerializer.Serialize(obj);
    }
    class GetJsonData
    {
        public string op { set; get; }
    }
    //  [WebMethod(Description="Delete Template",BufferResponse=false)]
    public void ProcessRequest(HttpContext context)
    {
        try
        {
            string operation = context.Request["op"];
            switch (operation)
            {
                case "save_edit_sampledetails":
                    save_edit_sampledetails(context);
                    break;
                case "get_sampleno_details":
                    get_sampleno_details(context);
                    break;
                case "flow_details_save":
                    flow_details_save(context);
                    break;
                case "get_flowmeter_details":
                    get_flowmeter_details(context);
                    break;
                case "get_product_Master_details":
                    get_product_Master_details(context);
                    break;
                case "save_creamsaparation_click":
                    save_creamsaparation_click(context);
                    break;
                case "get_creamsaparation_details":
                    get_creamsaparation_details(context);
                    break;
                case "btnsave_billingvariation_click":
                    btnsave_billingvariation_click(context);
                    break;
                case "get_tankeroutworddetails_click":
                    get_tankeroutworddetails_click(context);
                    break;
                case "get_milkagedashbord_details":
                    get_milkagedashbord_details(context);
                    break;
                case "getageofmilkdetails":
                    getageofmilkdetails(context);
                    break;
                case "get_receivebles_details":
                    get_receivebles_details(context);
                    break;
                case "get_siloclosing_details":
                    get_siloclosing_details(context);
                    break;
                case "save_ageofmilkdetails_click":
                    save_ageofmilkdetails_click(context);
                    break;
                case "get_filimrate_logs":
                    get_filimrate_logs(context);
                    break;
                case "approve_filmrate_click":
                    approve_filmrate_click(context);
                    break;
                case "btnsave_filim_rate_click":
                    btnsave_filim_rate_click(context);
                    break;
                case "get_gheecream_details":
                    get_gheecream_details(context);
                    break;
                case "get_buttercream_details":
                    get_buttercream_details(context);
                    break;
                case "get_gheeproduction_details":
                    get_gheeproduction_details(context);
                    break;
                case "get_gheecreambinding_details":
                    get_gheecreambinding_details(context);
                    break;
                case "save_buttercream_production_click":
                    save_buttercream_production_click(context);
                    break;
                case "save_cream_production_click":
                    save_cream_production_click(context);
                    break;
                case "save_processing_powercollection_click":
                    save_processing_powercollection_click(context);
                    break;
                case "get_cipcleaning_details":
                    get_cipcleaning_details(context);
                    break;
                case "save_cipcleaningdetails_click":
                    save_cipcleaningdetails_click(context);
                    break;
                case "get_coldroomstock_details":
                    get_coldroomstock_details(context);
                    break;
                case "for_save_edit_chemical_click":
                    for_save_edit_chemical_click(context);
                    break;
                case "get_productqty_details":
                    get_productqty_details(context);
                    break;
                case "get_siloqty_details":
                    get_siloqty_details(context);
                    break;
                case "save_curd_section_click":
                    save_curd_section_click(context);
                    break;
                case "get_chemicalconsumption_details":
                    get_chemicalconsumption_details(context);
                    break;
                case "get_curdproduction_details":
                    get_curdproduction_details(context);
                    break;
                case "lab_curdproduction_details":
                    lab_curdproduction_details(context);
                    break;
                case "get_chemical_details":
                    get_chemical_details(context);
                    break;
                case "individvalfilmwastage_details":
                    individvalfilmwastage_details(context);
                    break;
                case "get_returnmilk_details":
                    get_returnmilk_details(context);
                    break;
                case "approve_returnmilk_details":
                    approve_returnmilk_details(context);
                    break;
                case "save_returnmilkdetails_click":
                    save_returnmilkdetails_click(context);
                    break;
                case "get_processingdeptqty":
                    get_processingdeptqty(context);
                    break;
                case "get_department_wise_qty_details":
                    get_department_wise_qty_details(context);
                    break;
                case "save_department_wise_qty_details_click":
                    save_department_wise_qty_details_click(context);
                    break;
                case "save_outword_silo_transaction_click":
                    save_outword_silo_transaction_click(context);
                    break;
                case "save_inword_silotransaction_click":
                    save_inword_silotransaction_click(context);
                    break;
                case "save_smp_silotransaction_click":
                    save_smp_silotransaction_click(context);
                    break;
                case "get_smp_details":
                    get_smp_details(context);
                    break;
                case "get_tankerqualitytesting_details":
                    get_tankerqualitytesting_details(context);
                    break;
                case "get_auditqualitytesting_details":
                    get_auditqualitytesting_details(context);
                    break;
                case "get_batchqualitytesting_details":
                    get_batchqualitytesting_details(context);
                    break;
                case "get_siloqualitytesting_details":
                    get_siloqualitytesting_details(context);
                    break;
                case "get_myInward_silo_transaction":
                    get_myInward_silo_transaction(context);
                    break;
                case "get_inword_silo_transactions_details":
                    get_inword_silo_transactions_details(context);
                    break;
                case "get_outward_silo_transaction":
                    get_outward_silo_transaction(context);
                    break;
                case "silo_Quantitycheck_transaction":
                    silo_Quantitycheck_transaction(context);
                    break;
                case "for_save_Silointratransaction":
                    for_save_Silointratransaction(context);
                    break;
                case "get_intratransactions_details":
                    get_intratransactions_details(context);
                    break;
                case "for_save_Silomonitor":
                    for_save_Silomonitor(context);
                    break;
                case "get_Silomonitor_details":
                    get_Silomonitor_details(context);
                    break;
                case "for_save_edit_Silo_click":
                    for_save_edit_Silo_click(context);
                    break;
                case "for_save_edit_Shift_click":
                    for_save_edit_Shift_click(context);
                    break;
                case "for_save_edit_Dept_click":
                    for_save_edit_Dept_click(context);
                    break;
                case "save_silo_operations_click":
                    save_silo_operations_click(context);
                    break;
                case "for_save_edit_pdepartment_click":
                    for_save_edit_pdepartment_click(context);
                    break;
                case "get_Dept_details":
                    get_Dept_details(context);
                    break;
                case "get_InwordMilkTransaction_details":
                    get_InwordMilkTransaction_details(context);
                    break;
                case "get_outworddispatch_details":
                    get_outworddispatch_details(context);
                    break;
                case "get_inward_details":
                    get_inward_details(context);
                    break;
                case "get_outward_details":
                    get_outward_details(context);
                    break;
                case "get_biproductob_details":
                    get_biproductob_details(context);
                    break;
                case "get_Silo_details":
                    get_Silo_details(context);
                    break;
                case "Siloquantity_details":
                    Siloquantity_details(context);
                    break;
                case "get_SiloDepartments_details":
                    get_SiloDepartments_details(context);
                    break;
                case "get_processingdepartment_details":
                    get_processingdepartment_details(context);
                    break;
                case "for_save_edit_Employee_click":
                    for_save_edit_Employee_click(context);
                    break;
                case "get_Emp_details":
                    get_Emp_details(context);
                    break;
                case "get_Vendor_details":
                    get_Vendor_details(context);
                    break;
                case "get_Clients_details":
                    get_Clients_details(context);
                    break;
                case "get_vendor_shortcodedetails":
                    get_vendor_shortcodedetails(context);
                    break;
                case "get_vendor_distancedetails":
                    get_vendor_distancedetails(context);
                    break;
                case "get_vendor_latlongdetails":
                    get_vendor_latlongdetails(context);
                    break;
                case "get_vendor_autodetails":
                    get_vendor_autodetails(context);
                    break;
                case "GetDespatchDetails_click":
                    GetDespatchDetails_click(context);
                    break;
                case "Get_Varify_DespatchDetails_click":
                    Get_Varify_DespatchDetails_click(context);
                    break;
                case "save_branchdata_click":
                    save_branchdata_click(context);
                    break;
                case "get_Branch_details":
                    get_Branch_details(context);
                    break;
                case "get_Branch1_details":
                    get_Branch1_details(context);
                    break;
                case "Get_InTrasistMilk_Deatails":
                    Get_InTrasistMilk_Deatails(context);
                    break;
                case "save_vehicle_master_click":
                    save_vehicle_master_click(context);
                    break;
                case "get_Vehicle_Master_details":
                    get_Vehicle_Master_details(context);
                    break;
                case "get_Client_details":
                    get_Client_details(context);
                    break;
                case "Get_Cow_Deatails":
                    Get_Cow_Deatails(context);
                    break;
                case "Get_Buffalo_Deatails":
                    Get_Buffalo_Deatails(context);
                    break;
                case "get_ghee_Deatails":
                    get_ghee_Deatails(context);
                    break;
                case "save_weigh_bridge_click":
                    save_weigh_bridge_click(context);
                    break;
                case "Get_fat_snf_Deatails":
                    Get_fat_snf_Deatails(context);
                    break;
                case "Get_silo_wise_fat_snf_Deatails":
                    Get_silo_wise_fat_snf_Deatails(context);
                    break;
                case "Get_Vendor_TS_Rates":
                    Get_Vendor_TS_Rates(context);
                    break;
                case "Get_Approval_Vendor_TS_Rates_Logs":
                    Get_Approval_Vendor_TS_Rates_Logs(context);
                    break;
                case "get_Shift_details":
                    get_Shift_details(context);
                    break;
                case "get_batch_details":
                    get_batch_details(context);
                    break;
                case "for_save_edit_batch_click":
                    for_save_edit_batch_click(context);
                    break;
                case "get_batchentrydetails":
                    get_batchentrydetails(context);
                    break;
                case "save_batchentrydetails_click":
                    save_batchentrydetails_click(context);
                    break;
                case "save_vendor_collection_click":
                    save_vendor_collection_click(context);
                    break;
                case "Get_weighMilk_Deatails":
                    Get_weighMilk_Deatails(context);
                    break;
                case "Get_labdcMilk_Deatails":
                    Get_labdcMilk_Deatails(context);
                    break;
                case "Get_unload_Deatails":
                    Get_unload_Deatails(context);
                    break;
                //case "Get_inward_Deatails":
                //    Get_inward_Deatails(context);
                //    break;
                case "save_personal_details_click":
                    save_personal_details_click(context);
                    break;
                case "get_personal_details":
                    get_personal_details(context);
                    break;
                case "get_approval_sms_details":
                    get_approval_sms_details(context);
                    break;
                case "get_divdirectsale_details":
                    get_divdirectsale_details(context);
                    break;
                case "get_dcno_details":
                    get_dcno_details(context);
                    break;
                case "get_direct_sale_Vendor_details":
                    get_direct_sale_Vendor_details(context);
                    break;
                case "get_Vehicleno_details":
                    get_Vehicleno_details(context);
                    break;
                case "btnsave_vendor_ts_rate_logs_click":
                    btnsave_vendor_ts_rate_logs_click(context);
                    break;
                case "btnsave_approval_vendor_ts_rates_click":
                    btnsave_approval_vendor_ts_rates_click(context);
                    break;

                case "get_pakingentry_details":
                    get_pakingentry_details(context);
                    break;
                case "get_pakingfilm_details":
                    get_pakingfilm_details(context);
                    break;
                //case "save_Ghee_section_click":
                //    save_Ghee_section_click(context);
                //    break;
                case "save_product_master_click":
                    save_product_master_click(context);
                    break;
                case "get_product_details":
                    get_product_details(context);
                    break;
                case "get_productfilimratechange_details":
                    get_productfilimratechange_details(context);
                    break;
                case "get_gheeproduct_details":
                    get_gheeproduct_details(context);
                    break;
                case "save_productcreates_master_click":
                    save_productcreates_master_click(context);
                    break;
                case "get_productcreates_details":
                    get_productcreates_details(context);
                    break;
                case "get_Batch_Product_details":
                    get_Batch_Product_details(context);
                    break;
                case "get_batch_productstdrate":
                    get_batch_productstdrate(context);
                    break;
                case "get_dept_Product_details":
                    get_dept_Product_details(context);
                    break;
                case "save_cuttingfilm_click":
                    save_cuttingfilm_click(context);
                    break;
                case "get_cuttingfilm_details":
                    get_cuttingfilm_details(context);
                    break;
                case "getpendingtransaction_details":
                    getpendingtransaction_details(context);
                    break;
                case "transactionrecive_click":
                    transactionrecive_click(context);
                    break;
                case "get_Branchwiseinward_milkdetails":
                    get_Branchwiseinward_milkdetails(context);
                    break;
                case "get_sectionwiseproduction_details":
                    get_sectionwiseproduction_details(context);
                    break;
                case "generate_branchwiselinechart":
                    generate_branchwiselinechart(context);
                    break;
                case "modify_silo_closing_details":
                    modify_silo_closing_details(context);
                    break;
                case "generate_batchwiselinechart":
                    generate_batchwiselinechart(context);
                    break;
                case "piechartvalues":
                    piechartvalues(context);
                    break;
                case "filimchartdetails":
                    filimchartdetails(context);
                    break;
                case "generate_returnmilkchart":
                    generate_returnmilkchart(context);
                    break;
                case "get_productwiseproductiondetails":
                    get_productwiseproductiondetails(context);
                    break;
                case "get_curdcoldroom_details":
                    get_curdcoldroom_details(context);
                    break;
                case "save_packing_details":
                    save_packing_details(context);
                    break;
                case "get_filim_details":
                    get_filim_details(context);
                    break;
                case "get_gheeproductqualitytesting_details":
                    get_gheeproductqualitytesting_details(context);
                    break;
                case "get_curd_packetwise_qualitytesting_details":
                    get_curd_packetwise_qualitytesting_details(context);
                    break;
                case "Approve_curd_packetwise_qualitytesting_click":
                    Approve_curd_packetwise_qualitytesting_click(context);
                    break;
                case "Approve_ghee_packetwise_qualitytesting_click":
                    Approve_ghee_packetwise_qualitytesting_click(context);
                    break;
                case "save_curdbiproductdetails_click":
                    save_curdbiproductdetails_click(context);
                    break;
                case "get_curdbiproductdetails":
                    get_curdbiproductdetails(context);
                    break;
                case "get_curdstockdetails":
                    get_curdstockdetails(context);
                    break;
                case "get_productwisecurdstockdetails":
                    get_productwisecurdstockdetails(context);
                    break;
                case "get_gheestockdetails":
                    get_gheestockdetails(context);
                    break;
                case "get_butterstockdetails":
                    get_butterstockdetails(context);
                    break;
                case "get_creamstockdetails":
                    get_creamstockdetails(context);
                    break;
                case "get_smpstockdetails":
                    get_smpstockdetails(context);
                    break;
                case "get_biproductstockdetails":
                    get_biproductstockdetails(context);
                    break;
                case "save_overhead_click":
                    save_overhead_click(context);
                    break;
                case "get_overhead_click":
                    get_overhead_click(context);
                    break;
                case "get_branch_overhead_click":
                    get_branch_overhead_click(context);
                    break;
                case "get_subbranch_overhead_click":
                    get_subbranch_overhead_click(context);
                    break;
                case "get_vendorperltrrate_details":
                    get_vendorperltrrate_details(context);
                    break;
                case "get_overhead_details":
                    get_overhead_details(context);
                    break;
                case "save_ohmaster_details":
                    save_ohmaster_details(context);
                    break;
                case "save_nameoh_details":
                    save_nameoh_details(context);
                    break;
                case "get_ohmaster_details":
                    get_ohmaster_details(context);
                    break;
                case "get_ohmastername_details":
                    get_ohmastername_details(context);
                    break;
                case "get_vendor_milktransaction_details":
                    get_vendor_milktransaction_details(context);
                    break;
                case "get_cowdetailschart":
                    get_cowdetailschart(context);
                    break;


                case "get_buffalodetailschart":
                    get_buffalodetailschart(context);
                    break;
                case "generate_returnmilkbarchart":
                    generate_returnmilkbarchart(context);
                    break;
                case "get_vendorlinechart_details":
                    get_vendorlinechart_details(context);
                    break;
                case "get_butterproduction_details":
                    get_butterproduction_details(context);
                    break;
                case "get_Branch_details_click":
                    get_Branch_details_click(context);
                    break;
                case "save_coldroom_master_details":
                    save_coldroom_master_details(context);
                    break;
                case "get_coldroom_master_details":
                    get_coldroom_master_details(context);
                    break;
                case "get_cream_qualitytesting_details":
                    get_cream_qualitytesting_details(context);
                    break;
                case "get_microbiology_details":
                    get_microbiology_details(context);
                    break;
                case "get_swabanalysis_details":
                    get_swabanalysis_details(context);
                    break;
                case "get_coldroom_details":
                    get_coldroom_details(context);
                    break;
                case "get_biproduct_stock_details":
                    get_biproduct_stock_details(context);
                    break;
                case "get_otherproducts_details_click":
                    get_otherproducts_details_click(context);
                    break;
                case "get_allproduct_details":
                    get_allproduct_details(context);
                    break;
                case "get_Batch_Productstock_details":
                    get_Batch_Productstock_details(context);
                    break;
                case "modify_cold_room_click":
                    modify_cold_room_click(context);
                    break;
                case "get_gheesales_details":
                    get_gheesales_details(context);
                    break;
                case "get_buttercreambinding_details":
                    get_buttercreambinding_details(context);
                    break;
                case "get_butterproductionbinding_details":
                    get_butterproductionbinding_details(context);
                    break;
                case "get_biproductsdetails_click":
                    get_biproductsdetails_click(context);
                    break;
                case "modify_biproduicts_closingdetails_click":
                    modify_biproduicts_closingdetails_click(context);
                    break;
                case "get_branch_products":
                    get_branch_products(context);
                    break;
                case "save_branch_products":
                    save_branch_products(context);
                    break;
                case "get_cow_vendor_details_chart":
                    get_cow_vendor_details_chart(context);
                    break;
                case "get_buffalo_vendor_details_chart":
                    get_buffalo_vendor_details_chart(context);
                    break;
                case "get_buttersales_details":
                    get_buttersales_details(context);
                    break;
                case "for_save_edit_states":
                    for_save_edit_states(context);
                    break;
                case "get_state_details":
                    get_state_details(context);
                    break;
                case "get_packing_material_details":
                    get_packing_material_details(context);
                    break;
                case "btn_getdcdetails_Click":
                    btn_getdcdetails_Click(context);
                    break;
                case "btn_getrefnowisedcdetails_Click":
                    btn_getrefnowisedcdetails_Click(context);
                    break;
                case "btn_getdcdetails_out_Click":
                    btn_getdcdetails_out_Click(context);
                    break;
                case "btn_getrefnowisedcdetails_out_Click":
                    btn_getrefnowisedcdetails_out_Click(context);
                    break;
                case "get_employee_details":
                    get_employee_details(context);
                    break;
                case "btn_getlogininfoemployee_details":
                    btn_getlogininfoemployee_details(context);
                    break;
                case "get_logindetails_eachemployee":
                    get_logindetails_eachemployee(context);
                    break;
                case "get_entry_details":
                    get_entry_details(context);
                    break;
                case "production_planing_cost":
                    production_planing_cost(context);
                    break;
                case "production_planing_smp":
                    production_planing_smp(context);
                    break;
                case "get_batchpreparation_details":
                    get_batchpreparation_details(context);
                    break;
                case "get_sales_despatch_details":
                    get_sales_despatch_details(context);
                    break;
                case "save_otherbiproducts_details":
                    save_otherbiproducts_details(context);
                    break;
                case "get_otherbiproducts_details":
                    get_otherbiproducts_details(context);
                    break;
                case "fill_opening_balance":
                    fill_opening_balance(context);
                    break;
                case "get_other_biproducts_report_details":
                    get_other_biproducts_report_details(context);
                    break;
                case "get_intrasilo_transaction_details":
                    get_intrasilo_transaction_details(context);
                    break;
                case "get_other_biproducts_stock_details":
                    get_other_biproducts_stock_details(context);
                    break;
                case "get_Silo_capacity":
                    get_Silo_capacity(context);
                    break;
                case "get_Vehicle_fleet_details":
                    get_Vehicle_fleet_details(context);
                    break;
                case "get_biprodct_products_details":
                    get_biprodct_products_details(context);
                    break;
                case "get_intrasilo_perltrrate_details":
                    get_intrasilo_perltrrate_details(context);
                    break;
                case "get_Branch_details_wyra":
                    get_Branch_details_wyra(context);
                    break;
                case "get_gheecreambinding_details_wyra":
                    get_gheecreambinding_details_wyra(context);
                    break;
                case "get_cream_opening_details":
                    get_cream_opening_details(context);
                    break;
                case "get_personal_detailstest":
                    get_personal_detailstest(context);
                    break;
                case "save_personal_details_clicktest":
                    save_personal_details_clicktest(context);
                    break;
                case "get_cowmilkdetailschart":
                    get_cowmilkdetailschart(context);
                    break;
                case "get_buffalomilkdetailschart":
                    get_buffalomilkdetailschart(context);
                    break;
                case "batchwisefatsnfdetails":
                    batchwisefatsnfdetails(context);
                    break; 
                case "get_silopositions":
                    get_silopositions(context);
                    break;
                default:
                    var jsonString = String.Empty;
                    context.Request.InputStream.Position = 0;
                    using (var inputStream = new StreamReader(context.Request.InputStream))
                    {
                        jsonString = HttpUtility.UrlDecode(inputStream.ReadToEnd());
                    }
                    if (jsonString != "")
                    {
                        var js = new JavaScriptSerializer();
                        var title1 = context.Request.Params[1];
                        GetJsonData obj = js.Deserialize<GetJsonData>(jsonString);
                        switch (obj.op)
                        {

                        }
                    }
                    else
                    {
                        var js = new JavaScriptSerializer();
                        var title1 = context.Request.Params[1];
                        GetJsonData obj = js.Deserialize<GetJsonData>(title1);
                        switch (obj.op)
                        {
                            
                            case "save_edit_Vendor_click":
                                save_edit_Vendor_click(context);
                                break;
                            case "Send_milk_details_click":
                                Send_milk_details_click(context);
                                break;
                            case "save_curd_production_click":
                                save_curd_production_click(context);
                                break;
                            case "save_coldroomstock_click":
                                save_coldroomstock_click(context);
                                break;
                            case "save_packing_section_click":
                                save_packing_section_click(context);
                                break;
                            case "save_ghee_production_click":
                                save_ghee_production_click(context);
                                break;
                            case "save_butter_production_click":
                                save_butter_production_click(context);
                                break;
                            case "save_butter_sales_click":
                                save_butter_sales_click(context);
                                break;
                            case "save_ghee_sales_click":
                                save_ghee_sales_click(context);
                                break;
                            case "save_ghee_closing_click":
                                save_ghee_closing_click(context);
                                break;
                            case "save_biproducts_closing_click":
                                save_biproducts_closing_click(context);
                                break;
                            case "save_inward_milktransactions_click":
                                save_inward_milktransactions_click(context);
                                break;
                            case "save_audit_milktransactions_click":
                                save_audit_milktransactions_click(context);
                                break;
                            case "save_batch_wise_qualitytesting_click":
                                save_batch_wise_qualitytesting_click(context);
                                break;
                            case "save_silo_wise_qualitytesting_click":
                                save_silo_wise_qualitytesting_click(context);
                                break;
                            case "save_direct_purchase_click":
                                save_direct_purchase_click(context);
                                break;
                            case "save_direct_sales_click":
                                save_direct_sales_click(context);
                                break;
                            case "save_milk_direct_sale_click":
                                save_milk_direct_sale_click(context);
                                break;
                            case "save_tanker_inward_approval_milktransactions_click":
                                save_tanker_inward_approval_milktransactions_click(context);
                                break;
                            case "save_Outward_milktransactions_click":
                                save_Outward_milktransactions_click(context);
                                break;
                            case "save_despatch_entry_click":
                                save_despatch_entry_click(context);
                                break;
                            case "save_outward_despatch_entry_click":
                                save_outward_despatch_entry_click(context);
                                break;
                            case "btnsave_shiftclosing_click":
                                btnsave_shiftclosing_click(context);
                                break;
                            case "btnsave_batchclosing_click":
                                btnsave_batchclosing_click(context);
                                break;
                            case "btnsave_siloclosing_click":
                                btnsave_siloclosing_click(context);
                                break;
                            case "save_approvalsms_click":
                                save_approvalsms_click(context);
                                break;
                            case "btnsave_filimrate_click":
                                btnsave_filimrate_click(context);
                                break;
                            case "save_ghee_wise_qualitytesting_click":
                                save_ghee_wise_qualitytesting_click(context);
                                break;
                            case "save_curd_packetwise_qualitytesting_click":
                                save_curd_packetwise_qualitytesting_click(context);
                                break;
                            case "save_curd_coldroom":
                                save_curd_coldroom(context);
                                break;
                            case "save_branch_overhead_click":
                                save_branch_overhead_click(context);
                                break;
                            case "save_transportvalue_click":
                                save_transportvalue_click(context);
                                break;
                            case "save_finalize_section_click":
                                save_finalize_section_click(context);
                                break;
                            case "btnsave_butterclosing_click":
                                btnsave_butterclosing_click(context);
                                break;
                            case "save_cream_qualitytesting_click":
                                save_cream_qualitytesting_click(context);
                                break;
                            case "save_micro_details":
                                save_micro_details(context);
                                break;
                            case "save_swab_details":
                                save_swab_details(context);
                                break;
                            case "save_otherbiproducts_sales_click":
                                save_otherbiproducts_sales_click(context);
                                break;
                            case "save_realizationdetails_click":
                                save_realizationdetails_click(context);
                                break;
                            case "save_packing_material_click":
                                save_packing_material_click(context);
                                break;
                            case "save_sales_fatsnf_details":
                                save_sales_fatsnf_details(context);
                                break;
                            case "save_cream_closing_details":
                                save_cream_closing_details(context);
                                break;
                            case "save_ghee_sales_click_wyra":
                                save_ghee_sales_click_wyra(context);
                                break;
                        }
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    public class shiftdetails
    {
        public string shiftid { get; set; }
        public string shiftname { get; set; }
        public string timings { get; set; }

    }
    public class productcreats
    {
        public string productid { get; set; }
        public string branchid { get; set; }
        public string productname { get; set; }
        public string branchname { get; set; }
        public string qtyltrs { get; set; }
        public string creates { get; set; }
        public string sno { get; set; }
        public string doe { get; set; }

    }
    public class Personaldetails
    {
        public string sno { get; set; }
        public string id { get; set; }
        public string name { get; set; }
        public string mobno { get; set; }
        public string email { get; set; }
        public string msgtype { get; set; }

    }
    public class directsale
    {
        public string dcno { get; set; }
        public string doe { get; set; }
        public string fromcc { get; set; }
        public string tocc { get; set; }
        public string qty_kgs { get; set; }
        public string qty_ltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string cell { get; set; }
        public string milktype { get; set; }
    }
    public class productclass
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string batchid { get; set; }
        public string productname { get; set; }
        public string productcode { get; set; }
        public string batch { get; set; }
        public string departmentname { get; set; }
        public string departmentid { get; set; }
        public string filimrate { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string quantity { get; set; }
        public string pid { get; set; }
        public string biproductsshortname { get; set; }
        public string stdrate { get; set; }
        public string packingcharges { get; set; }

        public string packetsize { get; set; }
        public string biproductshortname { get; set; }
        public string price { get; set; }
        public string categorycode { get; set; }

        public string dispatch { get; set; }
        public string openingbalnce { get; set; }
        public string productionqty { get; set; }
        public string obfat { get; set; }
        public string obsnf { get; set; }

        public string hsnsaccode { get; set; }
        public string igstcode { get; set; }
        public string cgstcode { get; set; }
        public string sgstcode { get; set; }
        public string packets { get; set; }
    }
    public class cuttingmilk
    {
        public string sno { get; set; }
        public string productname { get; set; }
        public string productid { get; set; }
        public string batchid { get; set; }
        public string qty_ltrs { get; set; }
        public string filmtype { get; set; }
        public string createdby { get; set; }
        public string doe { get; set; }
        public string returnfilm { get; set; }
        public string consumptionfilm { get; set; }
        public string recivedfilm { get; set; }
        public string wastagefilm { get; set; }
        public string transtype { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string siloname { get; set; }
    }

    public class manufacturedetails
    {
        public string sno { get; set; }
        public string productname { get; set; }
        public string productid { get; set; }
        public string batchid { get; set; }
        public string qty_ltrs { get; set; }
        public string createdby { get; set; }
        public string doe { get; set; }

    }
    private void emp_profile_pic_files_upload(HttpContext context)
    {
        try
        {
            //if (context.Session["branch_id"] != null)
            //{
            if (context.Request.Files.Count > 0)
            {
                string empsno = context.Request["empsno"];
                string empcode = context.Request["empcode"];

                HttpFileCollection files = context.Request.Files;
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = empcode + "_profilepic_" + empsno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        SqlCommand cmd = new SqlCommand("update employedetails set photos=@photos where empid=@empid");
                        cmd.Parameters.Add("@empid", empsno);
                        cmd.Parameters.Add("@photos", upload_filename);
                        vdm.Update(cmd);
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
            //}

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private bool UploadToFTP(HttpPostedFile fileToUpload, string filename)
    {
        string uploadUrl = "ftp://182.18.138.228/HRMS/";
        try
        {
            FtpWebRequest del_request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
            del_request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
            del_request.Method = WebRequestMethods.Ftp.DeleteFile;
            FtpWebResponse delete_response = (FtpWebResponse)del_request.GetResponse();
            Console.WriteLine("Delete status: {0}", delete_response.StatusDescription);
            delete_response.Close();
        }
        catch
        {
        }

        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
        request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
        request.UsePassive = true;
        request.Timeout = 600000;
        request.Method = WebRequestMethods.Ftp.UploadFile;
        byte[] fileContents = null;
        using (var binaryReader = new BinaryReader(fileToUpload.InputStream))
        {
            fileContents = binaryReader.ReadBytes(fileToUpload.ContentLength);
        }
        request.ContentLength = fileContents.Length;
        Stream requestStream = request.GetRequestStream();
        requestStream.Write(fileContents, 0, fileContents.Length);
        requestStream.Close();
        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
        response.Close();
        return true;
    }

    private void get_Batch_Product_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string batch = context.Request["batch"];
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.departmentid, productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid INNER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE (productmaster.batchid = @batchid) AND (productmonitar.branchid = @BranchID)");
            cmd.Parameters.Add("@batchid", batch);
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    double fat = 0;
                    double clr = 0;
                    double snfvalue = 0;
                    productclass getproduct = new productclass();
                    getproduct.sno = i++.ToString();
                    getproduct.productid = dr["sno"].ToString();
                    getproduct.batchid = dr["batchid"].ToString();
                    getproduct.productname = dr["productname"].ToString();
                    getproduct.batch = dr["batch"].ToString();
                    getproduct.departmentid = dr["departmentid"].ToString();
                    double batchid = Convert.ToDouble(dr["batchid"].ToString());
                    getproduct.fat = fat.ToString();
                    getproduct.clr = clr.ToString();
                    getproduct.snf = snfvalue.ToString();
                    Departmentslst.Add(getproduct);
                }
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }
            else
            {
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void get_Batch_Productstock_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            vdmnr = new VehicleDBMgr();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string tdate = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(tdate);
            List<productclass> Departmentslst = new List<productclass>();

            // Product Names
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.departmentid, productmaster.productcode, productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid INNER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE (productmaster.productcode > 0) AND (productmonitar.branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtproducts = vdm.SelectQuery(cmd).Tables[0];

            //opening balance
            cmd = new SqlCommand("SELECT productmonitar.quantity, productmaster.productname, productmaster.categorycode, productmaster.productcode FROM  productmaster INNER JOIN  productmonitar ON productmaster.sno = productmonitar.productid");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtopening = vdm.SelectQuery(cmd).Tables[0];

            //packing
            cmd = new SqlCommand("SELECT batchmaster.batch, packing_entry.qty_ltr, packing_entry.fat, packing_entry.snf, packing_entry.clr, packing_entry.received_film,  packing_entry.doe, productmaster.ml, productmaster.productname, productmaster.productcode FROM packing_entry INNER JOIN batchmaster ON packing_entry.batchid = batchmaster.batchid  INNER JOIN productmaster ON packing_entry.productid = productmaster.sno WHERE packing_entry.doe between @dt1 and @dt2 ORDER BY packing_entry.doe DESC");
            cmd.Parameters.Add("@dt1", GetLowDate(dtdate));
            cmd.Parameters.Add("@dt2", GetHighDate(dtdate));
            DataTable dtpacking = vdm.SelectQuery(cmd).Tables[0];

            //despatch 
            if (branchid == "1")
            {
                //punabaka plant
                mycmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.Qty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.Itemcode FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode  FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, Sno, Qty, Itemcode FROM  (SELECT products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, productsdata.Itemcode FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno");
                mycmd.Parameters.Add("@branch", 172);
                mycmd.Parameters.Add("@d1", GetLowDate(dtdate));
                mycmd.Parameters.Add("@d2", GetHighDate(dtdate));
            }
            else
            {
                //hyderabad plant
                mycmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.Qty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.Itemcode FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode  FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, Sno, Qty, Itemcode FROM  (SELECT products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, productsdata.Itemcode FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno");
                mycmd.Parameters.Add("@branch", 158);
                mycmd.Parameters.Add("@d1", GetLowDate(dtdate));
                mycmd.Parameters.Add("@d2", GetHighDate(dtdate));
            }
            DataTable dispatchqty = vdmnr.SelectQuery(mycmd).Tables[0];
            DataTable temp = new DataTable();
            temp = dispatchqty.Copy();

            DataView view = new DataView(dispatchqty);
            DataTable distinctproducts = view.ToTable(true, "Itemcode", "ProductName");
            DataTable AllProducts = new DataTable();
            AllProducts.Columns.Add("Itemcode");
            AllProducts.Columns.Add("ProductName");
            foreach (DataRow dr in dtproducts.Rows)
            {
                DataRow newrow = AllProducts.NewRow();
                newrow["Itemcode"] = dr["productcode"].ToString();
                newrow["ProductName"] = dr["productname"].ToString();
                //newrow["Rank"] = dr["Rank"].ToString();
                AllProducts.Rows.Add(newrow);
            }
            foreach (DataRow dro in dtopening.Rows)
            {
                DataRow[] data_exist = AllProducts.Select("Itemcode='" + dro["productcode"].ToString() + "'");
                if (data_exist.Length > 0)
                {
                }
                else
                {
                    DataRow newrow = AllProducts.NewRow();
                    newrow["Itemcode"] = dro["productcode"].ToString();
                    newrow["ProductName"] = dro["productname"].ToString();
                    AllProducts.Rows.Add(newrow);
                }
            }
            foreach (DataRow drd in dispatchqty.Rows)
            {
                DataRow[] data_exist = AllProducts.Select("Itemcode='" + drd["Itemcode"].ToString() + "'");
                if (data_exist.Length > 0)
                {
                }
                else
                {
                    DataRow newrow = AllProducts.NewRow();
                    newrow["Itemcode"] = drd["Itemcode"].ToString();
                    newrow["ProductName"] = drd["ProductName"].ToString();
                    AllProducts.Rows.Add(newrow);
                }
            }
            foreach (DataRow drp in dtpacking.Rows)
            {
                DataRow[] data_exist = AllProducts.Select("Itemcode='" + drp["productcode"].ToString() + "'");
                if (data_exist.Length > 0)
                {
                }
                else
                {
                    DataRow newrow = AllProducts.NewRow();
                    newrow["Itemcode"] = drp["productcode"].ToString();
                    newrow["ProductName"] = drp["productname"].ToString();
                    AllProducts.Rows.Add(newrow);
                }
            }
            int i = 1;
            if (AllProducts.Rows.Count > 0)
            {
                foreach (DataRow dr in AllProducts.Rows)
                {
                    double totalsaleqty = 0;
                    double saleqty = 0; double dispqty = 0;
                    string productionqty = "";
                    double totaldispqtyqty = 0;
                    string opQty = "";
                    string productname = "";
                    string productid = "";
                    string departmentid = "";
                    string batchid = "";
                    double totalqty = 0;
                    double opQtys = 0;
                    double productionqtys = 0;
                    DataRow[] itemdr = temp.Select("Itemcode='" + dr["Itemcode"].ToString() + "'");
                    foreach (DataRow drproduct in dtproducts.Select("productcode='" + dr["Itemcode"].ToString() + "'"))
                    {
                        productname = drproduct["productname"].ToString();
                        productid = drproduct["sno"].ToString();
                        departmentid = drproduct["departmentid"].ToString();
                        batchid = drproduct["batchid"].ToString();
                    }
                    foreach (DataRow drdisp in itemdr)
                    {
                        double.TryParse(drdisp["Qty"].ToString(), out dispqty);
                        totaldispqtyqty += dispqty;
                    }
                    foreach (DataRow drPACKING in dtpacking.Select("productcode='" + dr["Itemcode"].ToString() + "'"))
                    {
                        productionqty = drPACKING["qty_ltr"].ToString();
                        productionqtys = Convert.ToDouble(productionqty);
                    }
                    foreach (DataRow dropening in dtopening.Select("productcode='" + dr["Itemcode"].ToString() + "'"))
                    {
                        opQty = dropening["quantity"].ToString();
                        opQtys = Convert.ToDouble(opQty);
                    }
                    productclass getproduct = new productclass();
                    getproduct.productid = productid.ToString();
                    getproduct.batchid = batchid.ToString();
                    getproduct.productname = productname.ToString();
                    //getproduct.batch = dr["batch"].ToString();
                    getproduct.departmentid = departmentid.ToString();
                    //totalqty = opQtys + productionqtys;
                    getproduct.openingbalnce = opQty.ToString();
                    getproduct.productionqty = productionqtys.ToString();
                    getproduct.dispatch = totaldispqtyqty.ToString();
                    Departmentslst.Add(getproduct);
                }
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }
            else
            {
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void get_batch_productstdrate(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string batch = context.Request["batch"];
            string month = context.Request["month"];
            string year = context.Request["year"];
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, batchstdrates.stdrate, packingcharges.rateperltr, productmaster.departmentid, productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid INNER JOIN batchstdrates ON batchmaster.batchid = batchstdrates.batchid  LEFT OUTER JOIN packingcharges ON productmaster.sno = packingcharges.productid WHERE (productmaster.branchid = @BranchID) and (productmaster.batchid=@batchid) and (batchstdrates.month=@mnth) And (batchstdrates.year=@year)");
            cmd.Parameters.Add("@batchid", batch);
            cmd.Parameters.Add("@BranchID", branchid);
            cmd.Parameters.Add("@mnth", month);
            cmd.Parameters.Add("@year", year);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    double fat = 0;
                    double clr = 0;
                    double snfvalue = 0;
                    productclass getproduct = new productclass();
                    getproduct.sno = i++.ToString();
                    getproduct.productid = dr["sno"].ToString();
                    getproduct.batchid = dr["batchid"].ToString();
                    getproduct.productname = dr["productname"].ToString();
                    getproduct.batch = dr["batch"].ToString();
                    getproduct.stdrate = dr["stdrate"].ToString();
                    getproduct.packingcharges = dr["rateperltr"].ToString();
                    getproduct.departmentid = dr["departmentid"].ToString();
                    double batchid = Convert.ToDouble(dr["batchid"].ToString());
                    getproduct.fat = fat.ToString();
                    getproduct.clr = clr.ToString();
                    getproduct.snf = snfvalue.ToString();
                    Departmentslst.Add(getproduct);
                }
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }
            else
            {
                string response = GetJson(Departmentslst);
                context.Response.Write(response);
            }

        }
        catch
        {
        }

    }

    private void get_dept_Product_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            //string departmentid = context.Request["dept"];
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.productname FROM productmaster WHERE (productmaster.branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.productname = dr["productname"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_product_Master_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, batchid, productcode, departmentid, filimrate, productname, categorycode, price, clr, snf, fat, ml FROM  productmaster ORDER BY sno DESC");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.productcode = dr["productcode"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                //getproduct.batch = dr["batch"].ToString();
                //getproduct.quantity = dr["quantity"].ToString();
                //getproduct.biproductsshortname = dr["biproductsshortname"].ToString();
                getproduct.packetsize = dr["ml"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.fat = dr["fat"].ToString();
                getproduct.snf = dr["snf"].ToString();
                getproduct.clr = dr["clr"].ToString();
                getproduct.price = dr["price"].ToString();
                getproduct.categorycode = dr["categorycode"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_product_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            if (branchid == "26" || branchid == "115")
            {
                cmd = new SqlCommand("SELECT  productmaster.sno, productmaster.batchid, productmaster.productcode, productmaster.departmentid, productmaster.filimrate, productmaster.productname,  productmaster.biproductsshortname, batchmaster.batch, productmonitar.quantity, productmaster.categorycode, productmaster.price, productmaster.clr,  productmaster.snf, productmaster.fat, productmaster.ml,productmaster.hsncode, productmaster.igst, productmaster.cgst, productmaster.sgst,productmonitar.fat AS obfat, productmonitar.snf AS obsnf FROM   productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid LEFT OUTER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE   (productmonitar.branchid = @BranchID) ORDER BY productmaster.batchid, productmaster.productranking ");
            }
            else
            {
                cmd = new SqlCommand("SELECT  productmaster.sno, productmaster.batchid, productmaster.productcode, productmaster.departmentid, productmaster.filimrate, productmaster.productname,  productmaster.biproductsshortname, batchmaster.batch, productmonitar.quantity, productmaster.categorycode, productmaster.price, productmaster.clr,  productmaster.snf, productmaster.fat, productmaster.ml,productmaster.hsncode, productmaster.igst, productmaster.cgst, productmaster.sgst,productmonitar.fat AS obfat, productmonitar.snf AS obsnf FROM   productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid LEFT OUTER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE   (productmonitar.branchid = @BranchID) ORDER BY productmaster.sno,productmaster.batchid DESC");
            }
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.productcode = dr["productcode"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.batch = dr["batch"].ToString();
                getproduct.quantity = dr["quantity"].ToString();
                getproduct.biproductsshortname = dr["biproductsshortname"].ToString();
                getproduct.packetsize = dr["ml"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.fat = dr["fat"].ToString();
                getproduct.snf = dr["snf"].ToString();
                getproduct.clr = dr["clr"].ToString();
                getproduct.price = dr["price"].ToString();
                getproduct.categorycode = dr["categorycode"].ToString();
                getproduct.obfat = dr["obfat"].ToString();
                getproduct.obsnf = dr["obsnf"].ToString();

                getproduct.hsnsaccode = dr["hsncode"].ToString();
                getproduct.igstcode = dr["igst"].ToString();
                getproduct.cgstcode = dr["cgst"].ToString();
                getproduct.sgstcode = dr["sgst"].ToString();

                string quantity = dr["quantity"].ToString();
                string packetsize = dr["ml"].ToString();
                double quantitys = 0;
                double packetsizes = 0;
                if (quantity != "")
                {
                    quantitys = Convert.ToDouble(quantity);
                }
                if (packetsize != "")
                {
                    packetsizes = Convert.ToDouble(packetsize);
                }
                getproduct.packets = (quantitys / packetsizes).ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_productfilimratechange_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.departmentid, productmaster.filimrate,  productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid  WHERE (productmaster.branchid = @BranchID) ORDER BY sno DESC");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.batch = dr["batch"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_gheeproduct_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.departmentid,  productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid  WHERE (productmaster.branchid = @BranchID) AND productmaster.departmentid = '3'");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                //getproduct.departmentname = dr["departmentname"].ToString(); 
                getproduct.batch = dr["batch"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_manufacturingdetails_click(HttpContext context)
    {
        try
        {
            string product = context.Request["product"];
            string qtyltrs = context.Request["qtyltrs"];
            string btnvalue = context.Request["btnval"];
            string sno = context.Request["sno"];
            DateTime doe = DateTime.Now;
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into  productmanufacturedetails (productid, qty_ltrs, branchid, doe, createdby) values (@prouct, @qty_ltrs, @branchid, @doe, @operatedby)");
                cmd.Parameters.Add("@prouct", product);
                cmd.Parameters.Add("@qty_ltrs", qtyltrs);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@operatedby", UserID);
                vdm.insert(cmd);
                string msg = "Details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("update productmanufacturedetails set productid = @product, qty_ltrs = @qtyltrs, doe = @doe where sno=@sno");
                cmd.Parameters.Add("@product", product);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_manufacturdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("select pmd.sno, pmd.productid, pm.productname, bi.branchname, pmd.doe, pmd.qty_ltrs from productmanufacturedetails pmd INNER JOIN productmaster pm on pm.sno = pmd.productid INNER JOIN branch_info bi on bi.sno = pmd.branchid where pmd.branchid=@BranchID");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<manufacturedetails> manufacturedetails = new List<manufacturedetails>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                manufacturedetails getcutting = new manufacturedetails();
                getcutting.sno = i++.ToString();
                getcutting.productname = dr["productname"].ToString();
                getcutting.batchid = dr["branchname"].ToString();
                getcutting.doe = dr["doe"].ToString();
                getcutting.qty_ltrs = dr["qty_ltrs"].ToString();
                getcutting.sno = dr["sno"].ToString();
                getcutting.productid = dr["productid"].ToString();
                manufacturedetails.Add(getcutting);
            }
            string response = GetJson(manufacturedetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_cuttingfilm_click(HttpContext context)
    {
        try
        {
            string product = context.Request["product"];
            string qtyltrs = context.Request["qtyltrs"];
            string recivedfilm = context.Request["recivedfilm"];
            string consumptionfilm = context.Request["consumptionfilm"];
            string returnfilm = context.Request["returnfilm"];
            string wastage = context.Request["wastage"];
            string btnvalue = context.Request["btnval"];
            string sno = context.Request["sno"];
            DateTime doe = DateTime.Now;
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into  cuttingfilm (productid, qty_ltrs, recivedfilm, consumptionfilm, returnfilm, wastagefilm, branchid, doe, createdby) values (@prouct, @qty_ltrs, @recivedfilm, @consumptionfilm, @returnfilm, @wastage, @branchid, @doe, @operatedby)");
                cmd.Parameters.Add("@prouct", product);
                cmd.Parameters.Add("@qty_ltrs", qtyltrs);
                cmd.Parameters.Add("@recivedfilm", recivedfilm);
                cmd.Parameters.Add("@consumptionfilm", consumptionfilm);
                cmd.Parameters.Add("@returnfilm", returnfilm);
                cmd.Parameters.Add("@wastage", wastage);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@operatedby", UserID);
                vdm.insert(cmd);
                string msg = "Details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("update cuttingfilm set productid = @product, qty_ltrs = @qtyltrs, recivedfilm=@recivedfilm, consumptionfilm=@consumptionfilm, returnfilm=@returnfilm, wastagefilm=@wastage, doe = @doe where sno=@sno");
                cmd.Parameters.Add("@product", product);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@recivedfilm", recivedfilm);
                cmd.Parameters.Add("@consumptionfilm", consumptionfilm);
                cmd.Parameters.Add("@returnfilm", returnfilm);
                cmd.Parameters.Add("@wastage", wastage);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_cuttingfilm_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("select cf.sno, cf.productid, pm.productname, bi.branchname, cf.doe, cf.returnfilm, cf.consumptionfilm, cf.recivedfilm, cf.wastagefilm, cf.qty_ltrs from cuttingfilm cf INNER JOIN productmaster pm on pm.sno = cf.productid INNER JOIN branch_info bi on bi.sno = cf.branchid where cf.branchid=@BranchID");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cuttingmilk> cuttingmilkdetails = new List<cuttingmilk>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                cuttingmilk getcutting = new cuttingmilk();
                getcutting.sno = i++.ToString();
                getcutting.productname = dr["productname"].ToString();
                getcutting.batchid = dr["branchname"].ToString();
                getcutting.returnfilm = dr["returnfilm"].ToString();
                getcutting.consumptionfilm = dr["consumptionfilm"].ToString();
                getcutting.recivedfilm = dr["recivedfilm"].ToString();
                getcutting.wastagefilm = dr["wastagefilm"].ToString();
                getcutting.doe = dr["doe"].ToString();
                getcutting.qty_ltrs = dr["qty_ltrs"].ToString();
                getcutting.sno = dr["sno"].ToString();
                getcutting.productid = dr["productid"].ToString();
                cuttingmilkdetails.Add(getcutting);
            }
            string response = GetJson(cuttingmilkdetails);
            context.Response.Write(response);
        }
        catch
        {
        }

    }

    private void getpendingtransaction_details(HttpContext context)
    {
        string transtype = context.Request["transtype"];
        if (transtype == "Cutting")
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("select cf.sno, cf.productid, pm.productname, bi.branchname, cf.doe, cf.returnfilm, cf.consumptionfilm, cf.recivedfilm, cf.wastagefilm, cf.qty_ltrs from cuttingfilm cf INNER JOIN productmaster pm on pm.sno = cf.productid INNER JOIN branch_info bi on bi.sno = cf.branchid where cf.branchid=@BranchID and cf.processingstatus='notrecived'");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cuttingmilk> cuttingmilkdetails = new List<cuttingmilk>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                cuttingmilk getcutting = new cuttingmilk();
                getcutting.sno = i++.ToString();
                getcutting.productname = dr["productname"].ToString();
                getcutting.batchid = dr["branchname"].ToString();
                getcutting.returnfilm = dr["returnfilm"].ToString();
                getcutting.consumptionfilm = dr["consumptionfilm"].ToString();
                getcutting.recivedfilm = dr["recivedfilm"].ToString();
                getcutting.wastagefilm = dr["wastagefilm"].ToString();
                getcutting.doe = dr["doe"].ToString();
                getcutting.qty_ltrs = dr["qty_ltrs"].ToString();
                getcutting.sno = dr["sno"].ToString();
                getcutting.transtype = "Cutting";
                getcutting.productid = dr["productid"].ToString();
                cuttingmilkdetails.Add(getcutting);
            }
            string response = GetJson(cuttingmilkdetails);
            context.Response.Write(response);
        }
        else
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("select pf.sno, pf.productid, s.SiloName, pm.productname, bi.branchname, pf.fat, pf.snf, pf.clr, pf.doe, pf.return_film, pf.consumption_film, pf.received_film, pf.wastage_film, pf.qty_ltr from packing_entry pf INNER JOIN productmaster pm on pm.sno = pf.productid INNER JOIN branch_info bi on bi.sno = pf.branchid INNER JOIN silomaster s on s.SiloId=pf.siloid where pf.branchid=@BranchID and pf.processingstatus='notrecived'");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cuttingmilk> cuttingmilkdetails = new List<cuttingmilk>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                cuttingmilk getcutting = new cuttingmilk();
                getcutting.sno = i++.ToString();
                getcutting.productname = dr["productname"].ToString();
                getcutting.batchid = dr["branchname"].ToString();
                getcutting.siloname = dr["SiloName"].ToString();
                getcutting.returnfilm = dr["return_film"].ToString();
                getcutting.consumptionfilm = dr["consumption_film"].ToString();
                getcutting.recivedfilm = dr["received_film"].ToString();
                getcutting.wastagefilm = dr["wastage_film"].ToString();
                getcutting.doe = dr["doe"].ToString();
                getcutting.qty_ltrs = dr["qty_ltr"].ToString();

                getcutting.fat = dr["fat"].ToString();
                getcutting.snf = dr["snf"].ToString();
                getcutting.clr = dr["clr"].ToString();

                getcutting.sno = dr["sno"].ToString();
                getcutting.transtype = "Packing";
                getcutting.productid = dr["productid"].ToString();
                cuttingmilkdetails.Add(getcutting);
            }
            string response = GetJson(cuttingmilkdetails);
            context.Response.Write(response);
            //  batchid,siloid,qty_ltr,fat,snf,clr,received_film,consumption_film,return_film,branchid,entry_by,doe,productid,wastage_film
        }
    }

    private void individvalfilmwastage_details(HttpContext context)
    {
        string transtype = context.Request["transtype"];
        if (transtype == "Cutting")
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT packing_entry.sno, batchmaster.batch, silomaster.SiloName, packing_entry.qty_ltr, packing_entry.fat, packing_entry.snf, packing_entry.clr, packing_entry.received_film, packing_entry.cuttingfilm, packing_entry.consumption_film, packing_entry.return_film, packing_entry.doe,packing_entry.wastage_film, productmaster.productname FROM packing_entry INNER JOIN batchmaster ON packing_entry.batchid = batchmaster.batchid INNER JOIN silomaster ON packing_entry.siloid = silomaster.SiloId INNER JOIN productmaster ON packing_entry.productid = productmaster.sno WHERE packing_entry.branchid = @BranchID");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cuttingmilk> cuttingmilkdetails = new List<cuttingmilk>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                string cutting = dr["cuttingfilm"].ToString();
                if (cutting != "")
                {
                    cuttingmilk getcutting = new cuttingmilk();
                    getcutting.sno = i++.ToString();
                    getcutting.productname = dr["productname"].ToString();
                    getcutting.batchid = dr["batch"].ToString();
                    getcutting.siloname = dr["SiloName"].ToString();
                    getcutting.fat = dr["fat"].ToString();
                    getcutting.snf = dr["snf"].ToString();
                    getcutting.qty_ltrs = dr["qty_ltr"].ToString();
                    getcutting.returnfilm = dr["return_film"].ToString();
                    getcutting.consumptionfilm = dr["consumption_film"].ToString();
                    getcutting.recivedfilm = dr["received_film"].ToString();
                    getcutting.wastagefilm = dr["cuttingfilm"].ToString();
                    getcutting.doe = dr["doe"].ToString();
                    getcutting.sno = dr["sno"].ToString();
                    getcutting.transtype = "Cutting";

                    cuttingmilkdetails.Add(getcutting);
                }
            }
            string response = GetJson(cuttingmilkdetails);
            context.Response.Write(response);
        }
        else
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT packing_entry.sno, batchmaster.batch, silomaster.SiloName, packing_entry.qty_ltr, packing_entry.fat, packing_entry.snf, packing_entry.clr, packing_entry.received_film, packing_entry.cuttingfilm, packing_entry.consumption_film, packing_entry.return_film, packing_entry.doe,packing_entry.wastage_film, productmaster.productname FROM packing_entry INNER JOIN batchmaster ON packing_entry.batchid = batchmaster.batchid INNER JOIN silomaster ON packing_entry.siloid = silomaster.SiloId INNER JOIN productmaster ON packing_entry.productid = productmaster.sno WHERE packing_entry.branchid = @BranchID");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cuttingmilk> cuttingmilkdetails = new List<cuttingmilk>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                string wastage = dr["wastage_film"].ToString();
                if (wastage != "")
                {
                    cuttingmilk getcutting = new cuttingmilk();
                    getcutting.sno = i++.ToString();
                    getcutting.productname = dr["productname"].ToString();
                    getcutting.batchid = dr["batch"].ToString();
                    getcutting.siloname = dr["SiloName"].ToString();
                    getcutting.fat = dr["fat"].ToString();
                    getcutting.snf = dr["snf"].ToString();
                    getcutting.qty_ltrs = dr["qty_ltr"].ToString();
                    getcutting.returnfilm = dr["return_film"].ToString();
                    getcutting.consumptionfilm = dr["consumption_film"].ToString();
                    getcutting.recivedfilm = dr["received_film"].ToString();
                    getcutting.wastagefilm = dr["wastage_film"].ToString();
                    getcutting.doe = dr["doe"].ToString();
                    getcutting.sno = dr["sno"].ToString();
                    getcutting.transtype = "Cutting";

                    cuttingmilkdetails.Add(getcutting);
                }
            }
            string response = GetJson(cuttingmilkdetails);
            context.Response.Write(response);
        }
    }

    private void transactionrecive_click(HttpContext context)
    {
        string sno = context.Request["sno"];
        string transtypes = context.Request["transtype"];
        string branchid = context.Session["Branch_ID"].ToString();
        DateTime dt = System.DateTime.Now;
        string processingstatus = "Recived";
        if (transtypes == "Cutting")
        {
            cmd = new SqlCommand("UPDATE cuttingfilm SET processingstatus=@processingstatus, reciveddate=@dt, recivedby=@branchid where sno=@sno and branchid=@branchid");
            cmd.Parameters.Add("@processingstatus", processingstatus);
            cmd.Parameters.Add("@dt", dt);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = "Transaction Recived successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        else
        {
            cmd = new SqlCommand("UPDATE packing_entry SET processingstatus=@processingstatus, reciveddate=@dt where sno=@sno and branchid=@branchid");
            cmd.Parameters.Add("@processingstatus", processingstatus);
            cmd.Parameters.Add("@dt", dt);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = "Transaction Recived successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_product_master_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string batch = context.Request["batch"];
            string product = context.Request["product"];
            string productcode = context.Request["productcode"];
            string dept = context.Request["dept"];
            string btnval = context.Request["btnval"];

            string packetsize = context.Request["packetsize"];
            string filmrate = context.Request["filmrate"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string biproductshortname = context.Request["biproductshortname"];
            string price = context.Request["price"];
            string categorycode = context.Request["categorycode"];

            string hsnsaccode = context.Request["hsnsaccode"];
            string igstcode = context.Request["igstcode"];
            string cgstcode = context.Request["cgstcode"];
            string sgstcode = context.Request["sgstcode"];

            string branchid = context.Session["Branch_ID"].ToString();
            string msg = "";
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into productmaster (batchid,productname,productcode,branchid,departmentid,ml, filimrate, fat, snf, clr,  price, categorycode,hsncode, igst, cgst, sgst) values(@batchid,@productname,@productcode,@branchid,@deptid,@ml, @filimrate, @fat, @snf, @clr, @price, @categorycode,@hsncode, @igst, @cgst, @sgst)");
                //hsncode, igst, cgst, sgst
                cmd.Parameters.Add("@batchid", batch);
                cmd.Parameters.Add("@productname", product);
                cmd.Parameters.Add("@productcode", productcode);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@deptid", dept);
                cmd.Parameters.Add("@ml", packetsize);
                cmd.Parameters.Add("@filimrate", filmrate);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@price", price);
                cmd.Parameters.Add("@categorycode", categorycode);
                cmd.Parameters.Add("@hsncode", hsnsaccode);
                cmd.Parameters.Add("@igst", igstcode);
                cmd.Parameters.Add("@cgst", cgstcode);
                cmd.Parameters.Add("@sgst", sgstcode);
                vdm.insert(cmd);

                cmd = new SqlCommand("Select  MAX(sno) as productid from productmaster");
                DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
                string productid = dt_Trans.Rows[0]["productid"].ToString();
                cmd = new SqlCommand("insert into productmonitar (productid, quantity, branchid, batchid) values(@productid, @quantity, @branchid, @batchid)");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@quantity", "0");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@batchid", batch);
                vdm.insert(cmd);

                msg = "Product saved successfully ";
            }
            else
            {
                string productid = context.Request["productid"];
                cmd = new SqlCommand("update productmaster set  departmentid=@dept, productname=@productname, productcode=@productcode , ml=@ml, filimrate=@filimrate, fat=@fat, snf=@snf, clr=@clr, price=@price, categorycode=@categorycode,hsncode=@hsncode, igst=@igst, cgst=@cgst, sgst=@sgst where batchid=@batchid and  branchid=@branchid and sno=@sno");
                cmd.Parameters.Add("@dept", dept);
                cmd.Parameters.Add("@batchid", batch);
                cmd.Parameters.Add("@productname", product);
                cmd.Parameters.Add("@productcode", productcode);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@sno", productid);

                cmd.Parameters.Add("@ml", packetsize);
                cmd.Parameters.Add("@filimrate", filmrate);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@price", price);
                cmd.Parameters.Add("@categorycode", categorycode);

                cmd.Parameters.Add("@hsncode", hsnsaccode);
                cmd.Parameters.Add("@igst", igstcode);
                cmd.Parameters.Add("@cgst", cgstcode);
                cmd.Parameters.Add("@sgst", sgstcode);

                vdm.Update(cmd);
                msg = "Product updated successfully";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_productcreates_master_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string product = context.Request["product"];
            string creates = context.Request["creates"];
            string qtyltrs = context.Request["qtyltrs"];
            string sno = context.Request["sno"];
            DateTime date = System.DateTime.Now;
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string msg = "";
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into productcreates_details (productid, branchid, creates, qty_ltrs, doe) values(@product, @branchid, @creates, @qtyltrs,@doe)");
                cmd.Parameters.Add("@product", product);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@creates", creates);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@doe", date);
                vdm.insert(cmd);
                msg = "transaction saved successfully";
            }
            else
            {
                cmd = new SqlCommand("update productcreates_details set creates=@creates, qty_ltrs=@qtyltrs where sno=@sno AND productid=@productid AND branchid=@branchid");
                cmd.Parameters.Add("@creates", creates);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@productid", product);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                msg = "transaction updated successfully";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_productcreates_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT pcd.sno, pcd.productid, pcd.doe, pcd.branchid, pcd.creates, pcd.qty_ltrs, bi.branchname, pm.productname FROM productcreates_details pcd INNER JOIN productmaster pm on pm.sno = pcd.productid INNER JOIN branch_info bi on bi.sno=pcd.branchid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productcreats> creatsdetails = new List<productcreats>();
            foreach (DataRow dr in routes.Rows)
            {
                productcreats getshiftdetails = new productcreats();
                getshiftdetails.sno = dr["sno"].ToString();
                getshiftdetails.productname = dr["productname"].ToString();
                getshiftdetails.creates = dr["creates"].ToString();
                getshiftdetails.branchname = dr["branchname"].ToString();
                getshiftdetails.qtyltrs = dr["qty_ltrs"].ToString();
                getshiftdetails.doe = dr["doe"].ToString();
                getshiftdetails.productid = dr["productid"].ToString();
                creatsdetails.Add(getshiftdetails);
            }
            string response = GetJson(creatsdetails);
            context.Response.Write(response);
        }
        catch
        {
        }

    }

    public class vendordistance
    {
        public string sno { get; set; }
        public string batch { get; set; }
        public string batchid { get; set; }
        public List<vendordistancedetails> distance_branch_wise_details { set; get; }

    }

    public class vendordistancedetails
    {
        public string vendorid { get; set; }
        public string distance { get; set; }
        public string vendorname { get; set; }
        public string fromvendor { get; set; }
    }

    private void save_packing_section_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            // string sno = context.Request["sno"];

            //string btnvalue = context.Request["btnvalue"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            packingdetails obj = js.Deserialize<packingdetails>(title1);
            double batch = Convert.ToDouble(obj.batch);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            string sno = obj.sno;
            DateTime dtdate = Convert.ToDateTime(date);
            double quantitydetails;
            double fat = 0;
            double clr = 0;
            double snfvalue = 0;
            //if (batch == 1)
            //{
            //    fat = 5.8;
            //    clr = 30.5;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 2)
            //{
            //    fat = 1.5;
            //    clr = 33.5;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 3)
            //{
            //    fat = 3;
            //    clr = 33;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 4)
            //{
            //    fat = 4.5;
            //    clr = 31;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 5)
            //{
            //    fat = 3;
            //    clr = 33;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 6)
            //{
            //    fat = 3;
            //    clr = 30;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 7)
            //{
            //    fat = 3.8;
            //    clr = 4;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 8)
            //{
            //    fat = 5.8;
            //    clr = 30.5;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 9)
            //{
            //    fat = 4.5;
            //    clr = 31;
            //    snfvalue = (fat * 0.21) + (clr / 4 + 0.36);
            //}
            //if (batch == 10)
            //{
            //    fat = 0;
            //    clr = 0;
            //    snfvalue = 0;
            //}
            //if (batch == 11)
            //{
            //    fat = 0;
            //    clr = 0;
            //    snfvalue = 0;
            //}
            if (btnvalue == "Save")
            {
                foreach (packingfatdetails o in obj.pkg_batch_wise_details)
                {
                    if (o.qty_kgs != "")
                    {
                        cmd = new SqlCommand("insert into packing_entry (batchid, qty_ltr,received_film,consumption_film,return_film,branchid,entry_by,doe,productid,wastage_film,cuttingfilm,section) values (@batchid,@qty_ltr,@received_film,@consumption_film,@return_film,@branchid,@entry_by,@doe,@productid,@wastage_film,@cuttingfilm,'packing')");
                        cmd.Parameters.Add("@batchid", batch);
                        cmd.Parameters.Add("@qty_ltr", o.qty_kgs);
                        cmd.Parameters.Add("@received_film", o.recivedfilm);
                        cmd.Parameters.Add("@consumption_film", o.Consumptionfilm);
                        cmd.Parameters.Add("@return_film", o.Returnfilm);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@entry_by", UserID);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@wastage_film", o.wastagefilm);
                        cmd.Parameters.Add("@cuttingfilm", o.cuttingfilm);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("update productmonitar set quantity=quantity+@qty where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@qty", o.qty_kgs);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert into productmonitar (batchid, productid, quantity, branchid) values ( @batchid, @productid, @qty_ltr, @branchid)");
                            cmd.Parameters.Add("@batchid", batch);
                            cmd.Parameters.Add("@productid", o.productid);
                            cmd.Parameters.Add("@qty_ltr", o.qty_kgs);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Packing entry details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (packingfatdetails o in obj.pkg_batch_wise_details)
                {
                    cmd = new SqlCommand("Select qty_ltr from packing_entry where sno = @sno");
                    cmd.Parameters.Add("@sno", sno);
                    DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                    double quantity = Convert.ToDouble(routes.Rows[0]["qty_ltr"].ToString());
                    if (quantity > Convert.ToDouble(o.qty_kgs))
                    {
                        quantitydetails = quantity - Convert.ToDouble(o.qty_kgs);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where batchid =@batch AND productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@batch", batch);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(o.qty_kgs) - quantity;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where batchid =@batch AND productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@batch", batch);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    cmd = new SqlCommand("update packing_entry SET batchid =@batchid , qty_ltr = @qty_ltr,received_film = @received_film,consumption_film =@consumption_film ,return_film =@return_film, entry_by = @entry_by,doe = @doe, productid = @productid,wastage_film = @wastage_film, cuttingfilm = @cuttingfilm where sno=@sno");
                    cmd.Parameters.Add("@batchid", batch);
                    cmd.Parameters.Add("@qty_ltr", o.qty_kgs);
                    cmd.Parameters.Add("@received_film", o.recivedfilm);
                    cmd.Parameters.Add("@consumption_film", o.Consumptionfilm);
                    cmd.Parameters.Add("@return_film", o.Returnfilm);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@entry_by", UserID);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@wastage_film", o.wastagefilm);
                    cmd.Parameters.Add("@cuttingfilm", o.cuttingfilm);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                string msg = "Packing entry modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class packingentry
    {
        public string sno { get; set; }
        public string batch { get; set; }
        public string batchid { get; set; }
        public string siloname { get; set; }
        public string siloid { get; set; }
        public string qtyltrs { get; set; }
        public string receivedfilm { get; set; }
        public string cuttingfilm { get; set; }
        public string wastagefilm { get; set; }
        public string returnfilm { get; set; }
        public string consumptionfilm { get; set; }
        public string date { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string productname { get; set; }
        public string productid { get; set; }
        public string datetime { get; set; }
    }

    private void get_pakingentry_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string date = context.Request["getdatadate"].ToString();
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  packing_entry.sno, packing_entry.batchid, packing_entry.qty_ltr, packing_entry.fat, packing_entry.snf, packing_entry.clr, packing_entry.received_film,  packing_entry.consumption_film, packing_entry.return_film, packing_entry.branchid, packing_entry.entry_by, packing_entry.doe,CONVERT(varchar, packing_entry.doe, 126) AS datetime, packing_entry.productid,  packing_entry.wastage_film, packing_entry.cuttingfilm, productmaster.productname, batchmaster.batch FROM  packing_entry INNER JOIN  productmaster ON packing_entry.productid = productmaster.sno INNER JOIN  batchmaster ON packing_entry.batchid = batchmaster.batchid WHERE  (packing_entry.doe BETWEEN @d1 AND @d2) AND (packing_entry.branchid = @branchid)  ORDER BY packing_entry.doe");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<packingentry> packingentrydetails = new List<packingentry>();
            foreach (DataRow dr in routes.Rows)
            {
                packingentry getpackingentrydetails = new packingentry();
                getpackingentrydetails.sno = dr["sno"].ToString();
                getpackingentrydetails.batch = dr["batch"].ToString();
                getpackingentrydetails.productname = dr["productname"].ToString();
                getpackingentrydetails.date = dr["doe"].ToString();
                getpackingentrydetails.qtyltrs = dr["qty_ltr"].ToString();
                getpackingentrydetails.receivedfilm = dr["received_film"].ToString();
                getpackingentrydetails.cuttingfilm = dr["cuttingfilm"].ToString();
                getpackingentrydetails.wastagefilm = dr["wastage_film"].ToString();
                getpackingentrydetails.returnfilm = dr["return_film"].ToString();
                getpackingentrydetails.consumptionfilm = dr["consumption_film"].ToString();
                getpackingentrydetails.productid = dr["productid"].ToString();
                getpackingentrydetails.batchid = dr["batchid"].ToString();
                getpackingentrydetails.fat = dr["fat"].ToString();
                getpackingentrydetails.snf = dr["snf"].ToString();
                getpackingentrydetails.clr = dr["clr"].ToString();
                getpackingentrydetails.datetime = dr["datetime"].ToString();
                packingentrydetails.Add(getpackingentrydetails);
            }
            string response = GetJson(packingentrydetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_pakingfilm_details(HttpContext context)
    {
        //
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT batchmaster.batch, SUM(packing_entry.qty_ltr) AS qtyltrs, SUM(packing_entry.received_film) AS recivefilm, SUM(packing_entry.consumption_film) AS consumptionfilm, SUM(packing_entry.return_film) AS returnfilm, SUM(packing_entry.wastage_film) AS wastagefilm, SUM(packing_entry.cuttingfilm) AS cuttingfilm FROM packing_entry INNER JOIN batchmaster ON packing_entry.batchid = batchmaster.batchid INNER JOIN productmaster ON packing_entry.productid = productmaster.sno WHERE (packing_entry.branchid = @BranchID) AND (packing_entry.doe BETWEEN @d1 and @d2) GROUP BY batchmaster.batch");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<packingentry> packingentrydetails = new List<packingentry>();
            foreach (DataRow dr in routes.Rows)
            {
                packingentry getpackingentrydetails = new packingentry();
                getpackingentrydetails.batch = dr["batch"].ToString();
                getpackingentrydetails.qtyltrs = dr["qtyltrs"].ToString();
                getpackingentrydetails.receivedfilm = dr["recivefilm"].ToString();
                getpackingentrydetails.cuttingfilm = dr["cuttingfilm"].ToString();
                getpackingentrydetails.wastagefilm = dr["wastagefilm"].ToString();
                getpackingentrydetails.returnfilm = dr["returnfilm"].ToString();
                getpackingentrydetails.consumptionfilm = dr["consumptionfilm"].ToString();
                packingentrydetails.Add(getpackingentrydetails);
            }
            string response = GetJson(packingentrydetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class get_dcnodetails
    {
        public string sno { get; set; }
        public string dc_no { get; set; }
        public string vehciecleno { get; set; }
        public string invoiceno { get; set; }
        public string cc_id { get; set; }
    }
    private void get_Vehicleno_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string dcno = context.Request["dcno"];
            cmd = new SqlCommand("SELECT sno, dc_no, cc_id, branchid, doe, entry_by, chemist, remarks, vehciecleno, qco, status, desp_time, trans_type, salestype,invoiceno FROM despatch_entry WHERE (sno = @refno)");
            cmd.Parameters.Add("@refno", dcno);
            DataTable dtvehicle = vdm.SelectQuery(cmd).Tables[0];
            List<get_dcnodetails> get_dcno_details = new List<get_dcnodetails>();
            foreach (DataRow dr in dtvehicle.Rows)
            {
                get_dcnodetails getroutes = new get_dcnodetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.cc_id = dr["cc_id"].ToString();
                getroutes.invoiceno = dr["invoiceno"].ToString();
                getroutes.vehciecleno = dr["vehciecleno"].ToString();
                getroutes.dc_no = dr["dc_no"].ToString();
                get_dcno_details.Add(getroutes);
            }
            string response = GetJson(get_dcno_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_dcno_details(HttpContext context)
    {
        vdm = new SalesDBManager();
        string dcno = context.Request["dcno"];
        string branchid = context.Session["Branch_ID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT de.sno, de.dc_no, de.cc_id, de.branchid, de.doe, de.entry_by, de.chemist, de.remarks, de.vehciecleno, de.qco, de.status, de.desp_time, de.trans_type, ds.desp_refno, ds.cellname, ds.milktype, ds.fat, ds.snf, ds.qty_ltr, ds.qty_kgs, ds.percentageon, ds.clr, ds.hs, ds.alcohol, ds.temp, ds.cob1, ds.phosps1, ds.mbrt, ds.ot, ds.sealno FROM despatch_entry AS de INNER JOIN despatch_sub AS ds ON de.sno = ds.desp_refno where (de.sno = @dcno)");
        // cmd.Parameters.Add("@branchid", branchid);
        cmd.Parameters.Add("@dcno", dcno);
        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
        DataView view = new DataView(routes);
        DataTable dtDispathentrydetails = view.ToTable(true, "sno", "dc_no", "cc_id", "doe", "entry_by", "chemist", "remarks", "vehciecleno", "qco", "desp_time", "trans_type");
        DataTable dtDispathsubdetails_subdetails = view.ToTable(true, "desp_refno", "cellname", "milktype", "fat", "snf", "qty_ltr", "qty_kgs", "percentageon", "clr", "hs", "alcohol", "temp", "cob1", "phosps1", "mbrt", "ot", "sealno");
        List<get_DispathDetails> getDispathDetails = new List<get_DispathDetails>();
        List<Dispathentrydetails> Dispathentrydetails = new List<Dispathentrydetails>();
        List<Dispathsubdetails> Dispathsubdetails = new List<Dispathsubdetails>();
        if (dtDispathentrydetails.Rows.Count > 0)
        {
            foreach (DataRow dr in dtDispathentrydetails.Rows)
            {
                Dispathentrydetails dispentry = new Dispathentrydetails();
                dispentry.sno = dr["sno"].ToString();
                dispentry.dcno = dr["dc_no"].ToString();
                dispentry.ccid = dr["cc_id"].ToString();
                dispentry.date = dr["doe"].ToString();
                dispentry.entryby = dr["entry_by"].ToString();
                dispentry.Chemist = dr["chemist"].ToString();
                dispentry.Remarks = dr["remarks"].ToString();
                dispentry.vehicalno = dr["vehciecleno"].ToString();
                dispentry.Qco = dr["qco"].ToString();
                dispentry.transtype = dr["trans_type"].ToString();
                Dispathentrydetails.Add(dispentry);
            }
            foreach (DataRow dr in dtDispathsubdetails_subdetails.Rows)
            {
                Dispathsubdetails objdispsubdetails = new Dispathsubdetails();
                objdispsubdetails.desprefno = dr["desp_refno"].ToString();
                objdispsubdetails.cellname = dr["cellname"].ToString();
                objdispsubdetails.milktype = dr["milktype"].ToString();
                objdispsubdetails.fat = dr["fat"].ToString();
                objdispsubdetails.snf = dr["snf"].ToString();
                objdispsubdetails.qtyltr = dr["qty_ltr"].ToString();
                objdispsubdetails.qtykgs = dr["qty_kgs"].ToString();
                objdispsubdetails.percentageon = dr["percentageon"].ToString();
                objdispsubdetails.clr = dr["clr"].ToString();
                objdispsubdetails.hs = dr["hs"].ToString();
                objdispsubdetails.alcohol = dr["alcohol"].ToString();
                objdispsubdetails.temp = dr["temp"].ToString();
                objdispsubdetails.cob1 = dr["cob1"].ToString();
                objdispsubdetails.phosps1 = dr["phosps1"].ToString();
                objdispsubdetails.mbrt = dr["mbrt"].ToString();
                objdispsubdetails.ot = dr["ot"].ToString();
                objdispsubdetails.sealno = dr["sealno"].ToString();
                Dispathsubdetails.Add(objdispsubdetails);
            }
            get_DispathDetails get_DispathDetails = new get_DispathDetails();
            get_DispathDetails.Dispathentrydetails = Dispathentrydetails;
            get_DispathDetails.Dispathsubdetails = Dispathsubdetails;
            getDispathDetails.Add(get_DispathDetails);
            string response = GetJson(getDispathDetails);
            context.Response.Write(response);
        }
        else
        {
            string msg = "";
            string response = GetJson(getDispathDetails);
            context.Response.Write(response);
        }
    }

    private void get_divdirectsale_details(HttpContext context)
    {
        try
        {
            string branchid = context.Session["Branch_Id"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT  ds.dcno, ds.doe, vd.vendorname AS fromcc, v.vendorname AS tocc, ds.qty_kgs, ds.qty_ltr, ds.fat, ds.snf, ds.clr, ds.cell, ds.milktype FROM  directsale AS ds INNER JOIN vendors AS vd ON vd.sno = ds.fromccid INNER JOIN vendors AS v ON v.sno = ds.toccid WHERE  (ds.doe BETWEEN @d1 AND @d2) AND (ds.branchid = @branchid)");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-7));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", branchid);

            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<directsale> Departmentslst = new List<directsale>();
            foreach (DataRow dr in routes.Rows)
            {
                directsale getroutes = new directsale();
                getroutes.dcno = dr["dcno"].ToString();
                //getroutes.doe = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string date = dtdoe.ToString("dd/MM/yyyy");
                getroutes.doe = date;
                getroutes.fromcc = dr["fromcc"].ToString();
                getroutes.tocc = dr["tocc"].ToString();
                getroutes.qty_kgs = dr["qty_kgs"].ToString();
                getroutes.qty_ltr = dr["qty_ltr"].ToString();
                getroutes.fat = dr["fat"].ToString();
                getroutes.snf = dr["snf"].ToString();
                getroutes.clr = dr["clr"].ToString();
                getroutes.cell = dr["cell"].ToString();
                getroutes.milktype = dr["milktype"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_personal_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, name, mobno, email, msgtype FROM personalinfo WHERE (branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Personaldetails> shiftdetails = new List<Personaldetails>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                Personaldetails getpersonaldetails = new Personaldetails();
                getpersonaldetails.sno = i++.ToString();
                getpersonaldetails.id = dr["sno"].ToString();
                getpersonaldetails.name = dr["name"].ToString();
                getpersonaldetails.mobno = dr["mobno"].ToString();
                getpersonaldetails.email = dr["email"].ToString();
                getpersonaldetails.msgtype = dr["msgtype"].ToString();
                shiftdetails.Add(getpersonaldetails);
            }
            string response = GetJson(shiftdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_personal_details_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string name = context.Request["name"];
            string phoneno = context.Request["phoneno"];
            string email = context.Request["email"];
            string msgtype = context.Request["msgtype"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into personalinfo (name,mobno,email,msgtype,branchid) values(@name,@mobno,@email,@msgtype,@branchid)");
                cmd.Parameters.Add("@name", name);
                cmd.Parameters.Add("@mobno", phoneno);
                cmd.Parameters.Add("@email", email);
                cmd.Parameters.Add("@msgtype", msgtype);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.insert(cmd);
                string msg = "Personal info saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string id = context.Request["id"];
                cmd = new SqlCommand("update personalinfo set name=@name,mobno=@mobno,email=@email,msgtype=@msgtype where branchid=@branchid and sno=@sno");
                cmd.Parameters.Add("@name", name);
                cmd.Parameters.Add("@mobno", phoneno);
                cmd.Parameters.Add("@email", email);
                cmd.Parameters.Add("@msgtype", msgtype);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@sno", id);
                vdm.Update(cmd);
                string msg = "Personal info updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_vendor_collection_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string vendorname = context.Request["vendorname"];
            string paymenttype = context.Request["paymenttype"];
            float amount = 0;
            float.TryParse(context.Request["amount"], out amount);
            string remarks = context.Request["remarks"];
            string txtChequeNo = context.Request["txtChequeNo"];
            string date = context.Request["date"];
            DateTime pdate = Convert.ToDateTime(date);
            string chequeDate = context.Request["chequeDate"];
            DateTime dtcheque = Convert.ToDateTime(chequeDate);
            string txtBankName = context.Request["txtBankName"];
            string transtype = context.Request["transtype"];
            string vocherno = context.Request["vocherno"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno, vendorid, amount FROM vendor_accounts WHERE vendorid = @vendorid");
            cmd.Parameters.Add("@vendorid", vendorname);
            DataTable dtvendor = vdm.SelectQuery(cmd).Tables[0];
            float oppamount = 0;
            float cloamount = 0;
            string vacdate = string.Empty;
            DateTime dtvacdate = DateTime.Now;
            if (dtvendor.Rows.Count > 0)
            {
                if (transtype == "Payment")
                {
                    float.TryParse(dtvendor.Rows[0]["amount"].ToString(), out oppamount);
                    cloamount = oppamount - amount;
                }
                else
                {
                    float.TryParse(dtvendor.Rows[0]["amount"].ToString(), out oppamount);
                    cloamount = oppamount + amount;
                }
            }
            if (paymenttype == "Cash" || paymenttype == "Bank Transfer")
            {
                cmd = new SqlCommand("insert into collections(vendorid,doe,paytype,amount,branchid,entryby,status,remarks,opp_bal,clo_bal,transtype,vacdate) values (@vid,@doe,@paytype,@amount,@branchid,@entryby,@status,@remarks,@opp_bal,@clo_bal,@transtype,@date)");
            }
            else
            {
                if (paymenttype == "Cheque" || paymenttype == "DD")
                {
                    cmd = new SqlCommand("insert into collections(vendorid,doe,paytype,chequeno,chequedate,bankname,amount,branchid,entryby,status,remarks,opp_bal,clo_bal,transtype,vacdate) values (@vid,@doe,@paytype,@chequeno,@chequedate,@bankname,@amount,@branchid,@entryby,@status,@remarks,@opp_bal,@clo_bal,@transtype,@date)");
                    cmd.Parameters.Add("@chequeno", txtChequeNo);
                    cmd.Parameters.Add("@chequedate", dtcheque);
                    cmd.Parameters.Add("@bankname", txtBankName);
                }
                else
                {
                    cmd = new SqlCommand("insert into collections(vendorid,doe,paytype,vocherno,amount,branchid,entryby,status,remarks,opp_bal,clo_bal,transtype,vacdate) values (@vid,@doe,@paytype,@vocherno,@amount,@branchid,@entryby,@status,@remarks,@opp_bal,@clo_bal,@transtype,@date)");
                    cmd.Parameters.Add("@vocherno", txtChequeNo);
                }
            }
            cmd.Parameters.Add("@vid", vendorname);
            cmd.Parameters.Add("@doe", pdate);
            cmd.Parameters.Add("@paytype", paymenttype);
            cmd.Parameters.Add("@amount", amount);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@entryby", UserID);
            cmd.Parameters.Add("@status", 'P');
            cmd.Parameters.Add("@remarks", remarks);
            cmd.Parameters.Add("@opp_bal", oppamount);
            cmd.Parameters.Add("@clo_bal", cloamount);

            cmd.Parameters.Add("@transtype", transtype);
            cmd.Parameters.Add("@date", dtvacdate);
            vdm.insert(cmd);
            cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
            cmd.Parameters.Add("@amount", amount);
            cmd.Parameters.Add("@date", pdate);
            cmd.Parameters.Add("@vendorid", vendorname);
            vdm.Update(cmd);
            string msg = "Collections saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_Shift_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT shiftid, shiftname, timings FROM shiftmaster where branchid=@branchid");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<shiftdetails> shiftdetails = new List<shiftdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                shiftdetails getshiftdetails = new shiftdetails();
                getshiftdetails.shiftid = dr["shiftid"].ToString();
                getshiftdetails.shiftname = dr["shiftname"].ToString();
                getshiftdetails.timings = dr["timings"].ToString();
                shiftdetails.Add(getshiftdetails);
            }
            string response = GetJson(shiftdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void for_save_edit_Shift_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string Shifttype = context.Request["Shifttype"];
            string shifttiming = context.Request["shifttiming"];
            string shiftid = context.Request["shiftid"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into shiftmaster (shiftname, timings,branchid) values (@shiftname, @timings,@branchid)");
                cmd.Parameters.Add("@shiftname", Shifttype);
                cmd.Parameters.Add("@timings", shifttiming);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update shiftmaster set shiftname=@shiftname, timings=@timings where shiftid=@shiftid");
                cmd.Parameters.Add("@shiftname", Shifttype);
                cmd.Parameters.Add("@timings", shifttiming);
                cmd.Parameters.Add("@shiftid", shiftid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class outwordghee_detais_list
    {
        public List<outwordghee_details> Outword_Ghee_Details { set; get; }
    }
    public class outwordghee_details
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string date { get; set; }
        public string productname { get; set; }
        public string branchid { get; set; }
        public string qty_ltrs { get; set; }
        public string newrate { get; set; }
    }
    public class shiftwise_details_list
    {
        public string shiftid { get; set; }
        public string date { get; set; }
        public List<shiftwise_details> Shift_Wise_Details { set; get; }
    }
    public class shiftwise_details
    {
        public string siloid { get; set; }
        public string siloname { get; set; }
        public string date { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string enteredby { get; set; }
        public string editedby { get; set; }
        public string shiftname { get; set; }
        public string qty_kgs { get; set; }
        public string qty_ltrs { get; set; }
        public string branchid { get; set; }
        public string batchid { get; set; }
    }

    public class silowise_details_list
    {
        public string shiftid { get; set; }
        public List<silowise_details> silo_wise_details { set; get; }
    }

    public class silowise_details
    {
        public string siloid { get; set; }
        public string siloname { get; set; }
        public string date { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string enteredby { get; set; }
        public string editedby { get; set; }
        public string shiftname { get; set; }
        public string qty_kgs { get; set; }
        public string qty_ltrs { get; set; }
        public string branchid { get; set; }
        public string batchid { get; set; }
        public string closingdate { get; set; }
        public string clr { get; set; }
    }

    public class batchwise_details_list
    {
        public string shiftid { get; set; }
        public string date { get; set; }
        public List<batchwise_details> Batch_Wise_Details { set; get; }
    }

    public class batchwise_details
    {
        public string siloid { get; set; }
        public string siloname { get; set; }
        public string date { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string enteredby { get; set; }
        public string editedby { get; set; }
        public string shiftname { get; set; }
        public string qty_kgs { get; set; }
        public string qty_ltrs { get; set; }
        public string branchid { get; set; }
        public string batchid { get; set; }
        public string closingdate { get; set; }
    }

    public class vendorroot
    {
        public string dcno { get; set; }
        public string ccid { get; set; }
        public string vehicleno { get; set; }
        public List<vendorrootdetails> fillitems { set; get; }
    }

    public class vendorrootdetails
    {
        public string location { get; set; }
        public string hdnvendorid { get; set; }
    }


    private void btnsave_filimrate_click(HttpContext context)
    {
        if (context.Session["Branch_ID"] != null)
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            outwordghee_detais_list obj = js.Deserialize<outwordghee_detais_list>(title1);
            foreach (outwordghee_details o in obj.Outword_Ghee_Details)
            {
                int productid = Convert.ToInt32(o.productid);
                string newrate = o.qty_ltrs;
                cmd = new SqlCommand("update productmaster set filimrate=@filimrate where sno=@productid");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@filimrate", newrate);
                vdm.Update(cmd);
            }
            string msg = "Film Rate changed successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }


    private void btnsave_shiftclosing_click(HttpContext context)
    {
        try
        {
            if (context.Session["Branch_ID"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                string deptid = context.Session["DeptID"].ToString();

                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                WebClient client = new WebClient();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                shiftwise_details_list obj = js.Deserialize<shiftwise_details_list>(title1);
                int ShiftID = Convert.ToInt32(obj.shiftid);
                string date = obj.date;
                DateTime ddate = Convert.ToDateTime(date);
                cmd = new SqlCommand("SELECT sno, siloid FROM closing_details WHERE  (closeddate between @d1 and @d2)  AND (shiftid = @ShiftID) and branchid=@BranchID");
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@ShiftID", ShiftID);
                cmd.Parameters.Add("@d1", GetLowDate(ddate));
                cmd.Parameters.Add("@d2", GetHighDate(ddate));
                DataTable dtshift = vdm.SelectQuery(cmd).Tables[0];
                if (dtshift.Rows.Count > 0)
                {
                    string msg = "This shift already closed";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
                else
                {
                    foreach (shiftwise_details o in obj.Shift_Wise_Details)
                    {
                        string qty_ltrs = o.qty_ltrs;
                        int Siloid = Convert.ToInt32(o.siloid);
                        string fat = o.fat;
                        if (fat == "")
                        {
                            fat = "0";
                        }
                        string snf = o.snf;
                        if (snf == "")
                        {
                            snf = "0";
                        }
                        string qty_kgs = o.qty_kgs;
                        if (qty_kgs == "")
                        {
                            qty_kgs = "0";
                        }
                        cmd = new SqlCommand("insert into closing_details (siloid, shiftid, branchid, doe, qty_ltrs,  fat, snf, closedby, type, deptid, closeddate) values (@siloid,@shiftid,@branchid,@date,@qtyltrs,@fat,@snf, @entryby,@type, @deptid, @closeddate)");
                        cmd.Parameters.Add("@siloid", Siloid);
                        cmd.Parameters.Add("@shiftid", ShiftID);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@date", ServerDateCurrentdate);
                        cmd.Parameters.Add("@qtyltrs", qty_kgs);
                        //cmd.Parameters.Add("@qtykgs", qty_ltrs);
                        cmd.Parameters.Add("@fat", fat);
                        cmd.Parameters.Add("@snf", snf);
                        cmd.Parameters.Add("@deptid", deptid);
                        cmd.Parameters.Add("@entryby", UserID);
                        cmd.Parameters.Add("@type", "shift");
                        cmd.Parameters.Add("@closeddate", ddate);
                        vdm.insert(cmd);
                        // instruction by Seshu
                        if (BranchID == "26")
                        {
                            cmd = new SqlCommand("update silomonitar SET Quantity=@Quantity where  SiloId = @SiloId and BranchId=@BranchId ");
                            cmd.Parameters.Add("@BranchId", BranchID);
                            cmd.Parameters.Add("@SiloId", Siloid);
                            cmd.Parameters.Add("@Quantity", qty_kgs);
                            vdm.Update(cmd);
                        }
                    }
                    string msg = "Shift closing details entered successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void btnsave_batchclosing_click(HttpContext context)
    {
        try
        {
            if (context.Session["Branch_ID"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                string deptid = context.Session["DeptID"].ToString();
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                WebClient client = new WebClient();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                batchwise_details_list obj = js.Deserialize<batchwise_details_list>(title1);
                string date = obj.date;
                DateTime dttdate = Convert.ToDateTime(date);
                cmd = new SqlCommand("select * from closing_details where (closeddate between @d1 and @d2) and (branchid=@branchid) AND (type='batch')");
                cmd.Parameters.Add("@d1", GetLowDate(dttdate));
                cmd.Parameters.Add("@d2", GetHighDate(dttdate));
                cmd.Parameters.Add("@branchid", BranchID);
                DataTable dtclose = vdm.SelectQuery(cmd).Tables[0];
                if (dtclose.Rows.Count == 0)
                {
                    foreach (batchwise_details o in obj.Batch_Wise_Details)
                    {
                        string qtykgs = o.qty_kgs;
                        string batchid = o.batchid;
                        if (qtykgs != "0" && batchid != null)
                        {
                            int Siloid = Convert.ToInt32(o.siloid);
                            string qty_kgs = o.qty_kgs;
                            cmd = new SqlCommand("insert into closing_details (siloid, branchid, batchid, closeddate, doe, qty_kgs, closedby, type,deptid) values (@siloid, @branchid, @batchid, @closingdate, @date, @qtykgs, @entryby, @type,@deptid)");
                            cmd.Parameters.Add("@siloid", Siloid);
                            cmd.Parameters.Add("@branchid", BranchID);
                            cmd.Parameters.Add("@date", ServerDateCurrentdate);
                            cmd.Parameters.Add("@closingdate", dttdate);
                            cmd.Parameters.Add("@qtykgs", qty_kgs);
                            cmd.Parameters.Add("@batchid", batchid);
                            cmd.Parameters.Add("@entryby", UserID);
                            cmd.Parameters.Add("@type", "batch");
                            cmd.Parameters.Add("@deptid", deptid);
                            vdm.insert(cmd);
                        }
                    }
                    string msg = "Batch closing details successfully Saved";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
                else
                {
                    string msg = "Batch closing details already saved";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void btnsave_siloclosing_click(HttpContext context)
    {
        try
        {
            if (context.Session["Branch_ID"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                WebClient client = new WebClient();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                silowise_details_list obj = js.Deserialize<silowise_details_list>(title1);
                cmd = new SqlCommand("SELECT  sno, siloid, qty_kgs, fat, snf, clr, closingdate, branchid, enteredby FROM  silowiseclosingdetails WHERE (closingdate BETWEEN @d1 AND @d2) AND (branchid = @branchid)");
                cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate));
                cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                cmd.Parameters.Add("@branchid", BranchID);
                DataTable dtclose = vdm.SelectQuery(cmd).Tables[0];
                if (dtclose.Rows.Count > 0)
                {
                    string msg = "Silo Details Already Closed.";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
                else
                {
                    foreach (silowise_details o in obj.silo_wise_details)
                    {
                        string qtykgs = o.qty_kgs;
                        string fat = string.Empty;
                        string snf = string.Empty;
                        string clr = string.Empty;
                        if (o.fat == "")
                        {
                            fat = "0";
                        }
                        else
                        {
                            fat = o.fat;
                        }
                        if (o.snf == "")
                        {
                            snf = "0";
                        }
                        else
                        {
                            snf = o.snf;
                        }
                        if (o.clr == "")
                        {
                            clr = "0";
                        }
                        else
                        {
                            clr = o.clr;
                        }
                        string batchid = o.batchid;
                        if (batchid == "" || batchid == "Select Batch" || batchid == "null" || batchid == null || batchid == "undefined")
                        {
                            batchid = "0";
                        }
                        else
                        {
                            batchid = o.batchid;
                        }
                        if (o.siloid != null)
                        {
                            int Siloid = Convert.ToInt32(o.siloid);
                            string qty_kgs = o.qty_kgs;
                            cmd = new SqlCommand("insert into silowiseclosingdetails (siloid, branchid, closingdate, qty_kgs, fat, snf, clr, enteredby,batchid) values (@siloid, @branchid, @closingdate, @qtykgs, @fat, @snf, @clr, @entryby,@batchid)");
                            cmd.Parameters.Add("@siloid", Siloid);
                            cmd.Parameters.Add("@branchid", BranchID);
                            cmd.Parameters.Add("@closingdate", ServerDateCurrentdate);
                            cmd.Parameters.Add("@qtykgs", qty_kgs);
                            cmd.Parameters.Add("@fat", fat);
                            cmd.Parameters.Add("@snf", snf);
                            cmd.Parameters.Add("@clr", clr);
                            cmd.Parameters.Add("@entryby", UserID);
                            cmd.Parameters.Add("@batchid", batchid);
                            vdm.insert(cmd);
                            // instruction by Seshu
                            if (BranchID == "26")
                            {
                                cmd = new SqlCommand("update silomonitar SET Quantity=@Quantity where  SiloId = @SiloId and BranchId=@BranchId ");
                                cmd.Parameters.Add("@BranchId", BranchID);
                                cmd.Parameters.Add("@SiloId", Siloid);
                                cmd.Parameters.Add("@Quantity", qty_kgs);
                                vdm.Update(cmd);
                            }
                        }

                    }
                    string msg = "Silo closing details entered successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private DateTime GetLowDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        DT = dt;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }
    private DateTime GetHighDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }
    private DateTime GetLowMonthRetrive(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = dt;
        DT = dt;
        Day = -dt.Day + 1;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }
    private DateTime GetHighMonth(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Day = 31 - dt.Day;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        if (DT.Day == 3)
        {
            DT = DT.AddDays(-3);
        }
        else if (DT.Day == 2)
        {
            DT = DT.AddDays(-2);
        }
        else if (DT.Day == 1)
        {
            DT = DT.AddDays(-1);
        }
        return DT;
    }
    /// <summary>
    /// /APPROVAL TS RATES ONLY FOR AUTHORISED PERSON
    /// </summary>
    /// <param name="context"></param>
    /// 
    private void btnsave_approval_vendor_ts_rates_click(HttpContext context)
    {
        try
        {
            if (context.Session["branch_id"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                string vendorsno = context.Request["vendorno"];
                string frmdate = context.Request["fromdate"];
                string tdate = context.Request["todate"];
                string prevrate = context.Request["PrevRate"];
                string newrate = context.Request["NewRate"];
                string rateon = context.Request["rateon"];
                string calcon = context.Request["calon"];
                string remarks = context.Request["Remarks"];
                string refno = context.Request["refno"];
                string ohon = context.Request["ohon"];
                string ohcost = context.Request["ohcost"];
                string mstdsnf = context.Request["mstdsnf"];
                string pstdsnf = context.Request["pstdsnf"];
                string snfpluson = context.Request["snfpluson"];
                string msnfcost = context.Request["msnfcost"];
                string psnfcost = context.Request["psnfcost"];

                string mstdfat = context.Request["mstdfat"];
                string pstdfat = context.Request["pstdfat"];
                string fatpuls = context.Request["fatpuls"];
                string mfatcost = context.Request["mfatcost"];
                string pfatcost = context.Request["pfatcost"];

                string type = context.Request["type"];
                DateTime fromdate = DateTime.ParseExact(frmdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                DateTime todate = DateTime.ParseExact(tdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                cmd = new SqlCommand("UPDATE vendor_ts_rate_logs set status=@status,app_remarks=@app_remarks,Approve_date=@Approve_date,approved_by=@approved_by where vendor_sno=@vendor_sno and  branchid=@branchid and sno=@sno");
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@app_remarks", remarks);
                cmd.Parameters.Add("@Approve_date", ServerDateCurrentdate);
                cmd.Parameters.Add("@vendor_sno", vendorsno);
                cmd.Parameters.Add("@approved_by", UserID);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@sno", refno);
                vdm.Update(cmd);
                cmd = new SqlCommand("SELECT sno FROM milktransactions WHERE (sectionid = @VendorID) AND (doe BETWEEN @d1 AND @d2) ");
                cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                cmd.Parameters.Add("@d2", GetHighDate(todate));
                cmd.Parameters.Add("@VendorID", vendorsno);
                DataTable dtmilktransaction = vdm.SelectQuery(cmd).Tables[0];
                if (dtmilktransaction.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtmilktransaction.Rows)
                    {
                        if (type == "Others Cow" || type == "Cow")
                        {
                            cmd = new SqlCommand("update milktransaction_logs set cost=@cost, overheadon=@ohon, overheadcost=@ohcost, m_std_snf=@mstdsnf, p_std_snf=@pstdsnf, snfplus_on=@snfpluson, m_snfpluscost= @msnfcost, p_snfpluscost= @psnfcost, m_std_fat=@mstdfat, p_std_fat=@pstdfat, fatplus_on=@fatpuls, m_fatpluscost=@mfatcost, p_fatpluscost=@pfatcost where milktransaction_sno=@milktransaction_sno AND milktype='Cow'");
                            cmd.Parameters.Add("@cost", newrate);
                            cmd.Parameters.Add("@ohon", ohon);
                            cmd.Parameters.Add("@ohcost", ohcost);
                            cmd.Parameters.Add("@mstdsnf", mstdsnf);
                            cmd.Parameters.Add("@pstdsnf", pstdsnf);
                            cmd.Parameters.Add("@snfpluson", snfpluson);
                            cmd.Parameters.Add("@msnfcost", msnfcost);
                            cmd.Parameters.Add("@psnfcost", psnfcost);
                            cmd.Parameters.Add("@mstdfat", mstdfat);
                            cmd.Parameters.Add("@pstdfat", pstdfat);
                            cmd.Parameters.Add("@fatpuls", fatpuls);
                            cmd.Parameters.Add("@mfatcost", mfatcost);
                            cmd.Parameters.Add("@pfatcost", pfatcost);
                            cmd.Parameters.Add("@milktransaction_sno", dr["sno"].ToString());
                            vdm.Update(cmd);
                        }
                        else
                        {
                            cmd = new SqlCommand("update milktransaction_logs set cost=@cost, overheadon=@ohon, overheadcost=@ohcost, m_std_snf=@mstdsnf, p_std_snf=@pstdsnf, snfplus_on=@snfpluson, m_snfpluscost= @msnfcost, p_snfpluscost= @psnfcost, m_std_fat=@mstdfat, p_std_fat=@pstdfat, fatplus_on=@fatpuls, m_fatpluscost=@mfatcost, p_fatpluscost=@pfatcost where milktransaction_sno=@milktransaction_sno AND milktype='Buffalo'");
                            cmd.Parameters.Add("@cost", newrate);
                            cmd.Parameters.Add("@ohon", ohon);
                            cmd.Parameters.Add("@ohcost", ohcost);
                            cmd.Parameters.Add("@mstdsnf", mstdsnf);
                            cmd.Parameters.Add("@pstdsnf", pstdsnf);
                            cmd.Parameters.Add("@snfpluson", snfpluson);
                            cmd.Parameters.Add("@msnfcost", msnfcost);
                            cmd.Parameters.Add("@psnfcost", psnfcost);
                            cmd.Parameters.Add("@mstdfat", mstdfat);
                            cmd.Parameters.Add("@pstdfat", pstdfat);
                            cmd.Parameters.Add("@fatpuls", fatpuls);
                            cmd.Parameters.Add("@mfatcost", mfatcost);
                            cmd.Parameters.Add("@pfatcost", pfatcost);
                            cmd.Parameters.Add("@milktransaction_sno", dr["sno"].ToString());
                            vdm.Update(cmd);
                        }
                    }
                    cmd = new SqlCommand("SELECT sno FROM directsale WHERE (fromccid = @VendorID) AND (doe BETWEEN @d1 AND @d2) ");
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                    cmd.Parameters.Add("@VendorID", vendorsno);
                    DataTable dtdirectsale = vdm.SelectQuery(cmd).Tables[0];
                    if (dtdirectsale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtdirectsale.Rows)
                        {

                            cmd = new SqlCommand("update directsale set rate=@cost where sno=@milktransaction_sno");
                            cmd.Parameters.Add("@cost", newrate);
                            cmd.Parameters.Add("@milktransaction_sno", dr["sno"].ToString());
                            vdm.Update(cmd);

                        }
                    }
                    string msg = "Transaction approved successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
                else
                {
                    cmd = new SqlCommand("SELECT sno FROM directsale WHERE (fromccid = @VendorID) AND (doe BETWEEN @d1 AND @d2) ");
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                    cmd.Parameters.Add("@VendorID", vendorsno);
                    DataTable dtdirectsale = vdm.SelectQuery(cmd).Tables[0];
                    if (dtdirectsale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtdirectsale.Rows)
                        {

                            cmd = new SqlCommand("update directsale set rate=@cost where sno=@milktransaction_sno");
                            cmd.Parameters.Add("@cost", newrate);
                            cmd.Parameters.Add("@milktransaction_sno", dr["sno"].ToString());
                            vdm.Update(cmd);
                        }
                    }
                    string msg = "Transaction approved successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }

            }

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    /// <summary>
    /// GET DATA FROM Get_Approval_Vendor_TS_Rates_Logs TABLE
    /// </summary>
    /// <param name="context"></param>
    private void Get_Approval_Vendor_TS_Rates_Logs(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            vdm = new SalesDBManager();
            string type = context.Request["type"];
            if (type == "Buffalo")
            {
                cmd = new SqlCommand("SELECT vendor_ts_rate_logs.sno AS Refno, vendor_ts_rate_logs.ohon, vendor_ts_rate_logs.ohcost, vendor_ts_rate_logs.mstdsnf, vendor_ts_rate_logs.pstdsnf, vendor_ts_rate_logs.snfpuls, vendor_ts_rate_logs.msnfcost, vendor_ts_rate_logs.psnfcost, vendors.vendorname, vendor_ts_rate_logs.vendor_sno, vendor_ts_rate_logs.fromdate, vendor_ts_rate_logs.todate, vendor_ts_rate_logs.prev_rate, vendor_ts_rate_logs.new_rate, vendor_ts_rate_logs.rate_on, vendor_ts_rate_logs.calc_on, vendor_ts_rate_logs.mstdfat, vendor_ts_rate_logs.pstdfat, vendor_ts_rate_logs.fatpuls, vendor_ts_rate_logs.mfatcost, vendor_ts_rate_logs.pfatcost,  vendor_ts_rate_logs.Remarks FROM  vendor_ts_rate_logs INNER JOIN vendors ON vendor_ts_rate_logs.vendor_sno = vendors.sno INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendor_ts_rate_logs.branchid = @BranchID) AND (vendor_ts_rate_logs.status = @status) AND (vendor_subtable.milktype = 'Buffalo') AND (vendors.type = 'own') AND (vendor_ts_rate_logs.doe between @d1 and @d2)");
            }
            if (type == "Cow")
            {
                cmd = new SqlCommand("SELECT vendor_ts_rate_logs.sno AS Refno, vendor_ts_rate_logs.ohon, vendor_ts_rate_logs.ohcost, vendor_ts_rate_logs.mstdsnf, vendor_ts_rate_logs.pstdsnf, vendor_ts_rate_logs.snfpuls, vendor_ts_rate_logs.msnfcost, vendor_ts_rate_logs.psnfcost, vendors.vendorname, vendor_ts_rate_logs.vendor_sno, vendor_ts_rate_logs.fromdate, vendor_ts_rate_logs.todate, vendor_ts_rate_logs.prev_rate, vendor_ts_rate_logs.new_rate, vendor_ts_rate_logs.rate_on, vendor_ts_rate_logs.calc_on, vendor_ts_rate_logs.mstdfat, vendor_ts_rate_logs.pstdfat, vendor_ts_rate_logs.fatpuls, vendor_ts_rate_logs.mfatcost, vendor_ts_rate_logs.pfatcost,  vendor_ts_rate_logs.Remarks FROM  vendor_ts_rate_logs INNER JOIN vendors ON vendor_ts_rate_logs.vendor_sno = vendors.sno INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendor_ts_rate_logs.branchid = @BranchID) AND (vendor_ts_rate_logs.status = @status) AND (vendor_subtable.milktype = 'Cow') AND (vendors.type = 'own') AND (vendor_ts_rate_logs.doe between @d1 and @d2)");
            }
            if (type == "Others Buffalo")
            {
                cmd = new SqlCommand("SELECT vendor_ts_rate_logs.sno AS Refno, vendor_ts_rate_logs.ohon, vendor_ts_rate_logs.ohcost, vendor_ts_rate_logs.mstdsnf, vendor_ts_rate_logs.pstdsnf, vendor_ts_rate_logs.snfpuls, vendor_ts_rate_logs.msnfcost, vendor_ts_rate_logs.psnfcost, vendors.vendorname, vendor_ts_rate_logs.vendor_sno, vendor_ts_rate_logs.fromdate, vendor_ts_rate_logs.todate, vendor_ts_rate_logs.prev_rate, vendor_ts_rate_logs.new_rate, vendor_ts_rate_logs.rate_on, vendor_ts_rate_logs.calc_on, vendor_ts_rate_logs.mstdfat, vendor_ts_rate_logs.pstdfat, vendor_ts_rate_logs.fatpuls, vendor_ts_rate_logs.mfatcost, vendor_ts_rate_logs.pfatcost,  vendor_ts_rate_logs.Remarks FROM vendor_ts_rate_logs INNER JOIN vendors ON vendor_ts_rate_logs.vendor_sno = vendors.sno WHERE (vendor_ts_rate_logs.branchid = @BranchID) AND (vendor_ts_rate_logs.status = @status) AND (vendors.type = 'other') AND (vendor_ts_rate_logs.milktype = 'Others Buffalo') AND (vendor_ts_rate_logs.doe between @d1 and @d2)");
            }
            if (type == "Others Cow")
            {
                cmd = new SqlCommand("SELECT vendor_ts_rate_logs.sno AS Refno, vendor_ts_rate_logs.ohon, vendor_ts_rate_logs.ohcost, vendor_ts_rate_logs.mstdsnf, vendor_ts_rate_logs.pstdsnf, vendor_ts_rate_logs.snfpuls, vendor_ts_rate_logs.msnfcost, vendor_ts_rate_logs.psnfcost, vendors.vendorname, vendor_ts_rate_logs.vendor_sno, vendor_ts_rate_logs.fromdate, vendor_ts_rate_logs.todate, vendor_ts_rate_logs.prev_rate, vendor_ts_rate_logs.new_rate, vendor_ts_rate_logs.rate_on, vendor_ts_rate_logs.calc_on, vendor_ts_rate_logs.mstdfat, vendor_ts_rate_logs.pstdfat, vendor_ts_rate_logs.fatpuls, vendor_ts_rate_logs.mfatcost, vendor_ts_rate_logs.pfatcost,  vendor_ts_rate_logs.Remarks FROM vendor_ts_rate_logs INNER JOIN vendors ON vendor_ts_rate_logs.vendor_sno = vendors.sno WHERE (vendor_ts_rate_logs.branchid = @BranchID) AND (vendor_ts_rate_logs.status = @status) AND (vendors.type = 'other') AND (vendor_ts_rate_logs.milktype = 'Others Cow') AND (vendor_ts_rate_logs.doe between @d1 and @d2)");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtvendor = vdm.SelectQuery(cmd).Tables[0];

            List<vendor_ts_rate_details> Vendorlst = new List<vendor_ts_rate_details>();
            if (dtvendor.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtvendor.Rows)
                {
                    vendor_ts_rate_details getroutes = new vendor_ts_rate_details();
                    getroutes.sno = i++.ToString();
                    getroutes.vendorname = dr["vendorname"].ToString();
                    getroutes.vendorno = dr["vendor_sno"].ToString();

                    getroutes.presrate = dr["prev_rate"].ToString();
                    getroutes.fromdate = ((DateTime)dr["fromdate"]).ToString("yyyy-MM-dd");
                    getroutes.todate = ((DateTime)dr["todate"]).ToString("yyyy-MM-dd");
                    getroutes.newrate = dr["new_rate"].ToString();
                    getroutes.rate_on = dr["rate_on"].ToString();
                    getroutes.calc_on = dr["calc_on"].ToString();
                    getroutes.remarks = dr["remarks"].ToString();
                    getroutes.refno = dr["Refno"].ToString();

                    getroutes.overheadon = dr["ohon"].ToString();
                    getroutes.overheadcost = dr["ohcost"].ToString();
                    getroutes.mstdsnf = dr["mstdsnf"].ToString();
                    getroutes.pstdsnf = dr["pstdsnf"].ToString();
                    getroutes.snfpluson = dr["snfpuls"].ToString();
                    getroutes.msnfpluscost = dr["msnfcost"].ToString();
                    getroutes.psnfpluscost = dr["psnfcost"].ToString();

                    getroutes.mstdfat = dr["mstdfat"].ToString();
                    getroutes.pstdfat = dr["pstdfat"].ToString();
                    getroutes.fatpluson = dr["fatpuls"].ToString();
                    getroutes.mfatpluscost = dr["mfatcost"].ToString();
                    getroutes.pfatpluscost = dr["pfatcost"].ToString();
                    getroutes.type = type;
                    Vendorlst.Add(getroutes);

                }
            }
            string response = GetJson(Vendorlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    /// <summary>
    /// RAISE  TS RATES AND INSERT INTO Get_Approval_Vendor_TS_Rates_Logs TABLE
    /// </summary>
    /// <param name="context"></param>

    private void btnsave_vendor_ts_rate_logs_click(HttpContext context)
    {
        try
        {
            if (context.Session["branch_id"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                string mytype = context.Request["mytype"];
                string vendorsno = context.Request["vendorno"];
                string frmdate = context.Request["fromdate"];
                string tdate = context.Request["todate"];
                string prevrate = context.Request["PrevRate"];
                string newrate = context.Request["NewRate"];
                string rateon = context.Request["rateon"];
                string calcon = context.Request["calon"];
                string remarks = context.Request["Remarks"];
                string ohon = context.Request["ohon"];
                string ohcost = context.Request["ohcost"];
                string mstdsnf = context.Request["mstdsnf"];
                string pstdsnf = context.Request["pstdsnf"];
                string snfpuls = context.Request["snfpuls"];
                string msnfcost = context.Request["msnfcost"];
                string psnfcost = context.Request["psnfcost"];
                string mstdfat = context.Request["mstdfat"];
                string pstdfat = context.Request["pstdfat"];
                string fatpuls = context.Request["fatpuls"];
                string mfatcost = context.Request["mfatcost"];
                string pfatcost = context.Request["pfatcost"];
                DateTime fromdate = DateTime.ParseExact(frmdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                DateTime todate = DateTime.ParseExact(tdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                //if (mytype == "Buffalo" || mytype == "Others Buffalo")
                //{
                cmd = new SqlCommand("insert into vendor_ts_rate_logs (vendor_sno, fromdate, todate, prev_rate, new_rate, ohon, ohcost, mstdsnf, pstdsnf, snfpuls, msnfcost, psnfcost, mstdfat, pstdfat, fatpuls, mfatcost, pfatcost, milktype, doe, branchid, entry_by, rate_on, calc_on, status, remarks) values(@vendor_sno, @fromdate, @todate, @prev_rate, @new_rate, @ohon, @ohcost, @mstdsnf, @pstdsnf, @snfpuls, @msnfcost, @psnfcost, @mstdfat, @pstdfat, @fatpuls, @mfatcost, @pfatcost, @milktype, @doe, @branchid, @entry_by, @rate_on, @calc_on, @status, @remarks)");
                cmd.Parameters.Add("@vendor_sno", vendorsno);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@prev_rate", prevrate);
                cmd.Parameters.Add("@new_rate", newrate);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@entry_by", UserID);
                cmd.Parameters.Add("@rate_on", rateon);
                cmd.Parameters.Add("@calc_on", calcon);
                cmd.Parameters.Add("@ohon", ohon);
                cmd.Parameters.Add("@ohcost", ohcost);
                cmd.Parameters.Add("@mstdsnf", mstdsnf);
                cmd.Parameters.Add("@pstdsnf", pstdsnf);
                cmd.Parameters.Add("@snfpuls", snfpuls);
                cmd.Parameters.Add("@msnfcost", msnfcost);
                cmd.Parameters.Add("@psnfcost", psnfcost);
                cmd.Parameters.Add("@mstdfat", mstdfat);
                cmd.Parameters.Add("@pstdfat", pstdfat);
                cmd.Parameters.Add("@fatpuls", fatpuls);
                cmd.Parameters.Add("@mfatcost", mfatcost);
                cmd.Parameters.Add("@pfatcost", pfatcost);
                cmd.Parameters.Add("@milktype", mytype);
                cmd.Parameters.Add("@status", "R");
                cmd.Parameters.Add("@remarks", remarks);
                vdm.insert(cmd);
                if (newrate != null)
                {
                    if (mytype == "Buffalo" || mytype == "Others Buffalo")
                    {
                        cmd = new SqlCommand("update vendor_subtable  set cost = @new_rate, overheadon=@ohon, overheadcost= @ohcost, m_std_snf= @mstdsnf, p_std_snf= @pstdsnf, snfplus_on= @snfpuls, m_snfpluscost=@msnfcost, p_snfpluscost= @psnfcost, fatplus_on=@fatpuls,  m_fatpluscost=@mfatcost, p_fatpluscost=@pfatcost, m_std_fat=@mstdfat, p_std_fat=@pstdfat, editeddate = @doe where vendor_refno=@vendor_sno AND milktype='Buffalo'");
                        cmd.Parameters.Add("@vendor_sno", vendorsno);
                        cmd.Parameters.Add("@new_rate", newrate);
                        cmd.Parameters.Add("@ohon", ohon);
                        cmd.Parameters.Add("@ohcost", ohcost);
                        cmd.Parameters.Add("@mstdsnf", mstdsnf);
                        cmd.Parameters.Add("@pstdsnf", pstdsnf);
                        cmd.Parameters.Add("@snfpuls", snfpuls);
                        cmd.Parameters.Add("@msnfcost", msnfcost);
                        cmd.Parameters.Add("@psnfcost", psnfcost);
                        cmd.Parameters.Add("@mstdfat", mstdfat);
                        cmd.Parameters.Add("@pstdfat", pstdfat);
                        cmd.Parameters.Add("@fatpuls", fatpuls);
                        cmd.Parameters.Add("@mfatcost", mfatcost);
                        cmd.Parameters.Add("@pfatcost", pfatcost);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        cmd = new SqlCommand("update vendor_subtable  set cost = @new_rate, overheadon=@ohon, overheadcost= @ohcost, m_std_snf= @mstdsnf, p_std_snf= @pstdsnf, snfplus_on= @snfpuls, m_snfpluscost=@msnfcost, p_snfpluscost= @psnfcost, fatplus_on=@fatpuls,  m_fatpluscost=@mfatcost, p_fatpluscost=@pfatcost, m_std_fat=@mstdfat, p_std_fat=@pstdfat, editeddate = @doe where vendor_refno=@vendor_sno AND milktype='Cow'");
                        cmd.Parameters.Add("@vendor_sno", vendorsno);
                        cmd.Parameters.Add("@new_rate", newrate);
                        cmd.Parameters.Add("@ohon", ohon);
                        cmd.Parameters.Add("@ohcost", ohcost);
                        cmd.Parameters.Add("@mstdsnf", mstdsnf);
                        cmd.Parameters.Add("@pstdsnf", pstdsnf);
                        cmd.Parameters.Add("@snfpuls", snfpuls);
                        cmd.Parameters.Add("@msnfcost", msnfcost);
                        cmd.Parameters.Add("@psnfcost", psnfcost);
                        cmd.Parameters.Add("@mstdfat", mstdfat);
                        cmd.Parameters.Add("@pstdfat", pstdfat);
                        cmd.Parameters.Add("@fatpuls", fatpuls);
                        cmd.Parameters.Add("@mfatcost", mfatcost);
                        cmd.Parameters.Add("@pfatcost", pfatcost);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.Update(cmd);
                    }
                }

            }
            string msg = "Transaction saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    public class GetDespatchcls
    {
        public List<MilkDetails> MilkDetailslst { get; set; }
        public List<MilkfatDetails> MilkfatDetailslst { get; set; }
    }

    public class trasistcls
    {
        public string vendorname { get; set; }
        public string vehciecleno { get; set; }
        public string milktype { get; set; }
        public string dctime { get; set; }
        public string distance { get; set; }
        public string exptime { get; set; }
        public string QtyLtr { get; set; }
        public string QtyKgs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string kgfat { get; set; }
        public string kgsnf { get; set; }
        public string avgfat { get; set; }
        public string avgsnf { get; set; }
        public string dcdtime { get; set; }
        public string dcdate { get; set; }
        public string weight { get; set; }
    }

    public class Vehiclecls
    {
        public string sno { get; set; }
        public string vehicleno { get; set; }
        public string capacity { get; set; }
        public string noofqty { get; set; }
        public string frentcell { get; set; }
        public string middlecell { get; set; }
        public string backcell { get; set; }
        public string kmperrate { get; set; }
        public string make { get; set; }
    }

    public class fat_snf_details
    {
        public string sno { get; set; }
        public string kgfat { get; set; }
        public string kgsnf { get; set; }
        public string kgcowfat { get; set; }
        public string kgcowsnf { get; set; }
        public string kgbuffat { get; set; }
        public string kgbufsnf { get; set; }

    }

    public class vendor_ts_rate_details_list
    {
        public List<vendor_ts_rate_details> Vendor_TSRate_details { set; get; }
    }

    public class vendor_ts_rate_details
    {
        public string refno { get; set; }
        public string sno { get; set; }
        public string vendorname { get; set; }
        public string vendorno { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string presrate { get; set; }
        public string newrate { get; set; }
        public string rate_on { get; set; }
        public string calc_on { get; set; }
        public string remarks { get; set; }
        public string overheadon { get; set; }
        public string overheadcost { get; set; }
        public string mstdsnf { get; set; }
        public string pstdsnf { get; set; }
        public string snfpluson { get; set; }
        public string msnfpluscost { get; set; }
        public string psnfpluscost { get; set; }

        public string mstdfat { get; set; }
        public string pstdfat { get; set; }
        public string fatpluson { get; set; }
        public string mfatpluscost { get; set; }
        public string pfatpluscost { get; set; }

        public string type { get; set; }
    }

    private void Get_Vendor_TS_Rates(HttpContext context)
    {
        try
        {
            string type = context.Request["type"];

            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            if (type == "Buffalo")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.m_fatpluscost, vendor_subtable.p_fatpluscost, vendor_subtable.m_std_fat, vendor_subtable.p_std_fat, vendor_subtable.fatplus_on, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost,  vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendor_subtable.milktype='Buffalo') and (vendors.type='own')");
            }
            if (type == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.overheadon, vendor_subtable.m_fatpluscost, vendor_subtable.p_fatpluscost, vendor_subtable.m_std_fat, vendor_subtable.p_std_fat, vendor_subtable.fatplus_on, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost,  vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendor_subtable.milktype='Cow') and (vendors.type='own')");
                //cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendor_subtable.milktype='Cow') and (vendors.type='own')");
            }
            if (type == "Others Buffalo")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.m_fatpluscost, vendor_subtable.p_fatpluscost, vendor_subtable.m_std_fat, vendor_subtable.p_std_fat, vendor_subtable.fatplus_on, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost,  vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendors.type='other') and (vendor_subtable.milktype='Buffalo')");
                //cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost, vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendors.type='other') and (vendor_subtable.milktype='Buffalo')");
            }

            if (type == "Others Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.m_fatpluscost, vendor_subtable.p_fatpluscost, vendor_subtable.m_std_fat, vendor_subtable.p_std_fat, vendor_subtable.fatplus_on, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost,  vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendors.type='other') and (vendor_subtable.milktype='Cow')");
                // cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname, vendor_subtable.cost, vendor_subtable.rate_on, vendor_subtable.calc_on FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.branchid = @BranchID) and (vendors.type='other') and (vendor_subtable.milktype='Cow')");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtvendor = vdm.SelectQuery(cmd).Tables[0];

            List<vendor_ts_rate_details> Vendorlst = new List<vendor_ts_rate_details>();
            if (dtvendor.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtvendor.Rows)
                {
                    vendor_ts_rate_details getroutes = new vendor_ts_rate_details();
                    getroutes.sno = i++.ToString();
                    getroutes.vendorname = dr["vendorname"].ToString();
                    getroutes.vendorno = dr["sno"].ToString();
                    getroutes.presrate = dr["cost"].ToString();
                    getroutes.rate_on = dr["rate_on"].ToString();
                    getroutes.calc_on = dr["calc_on"].ToString();
                    getroutes.overheadon = dr["overheadon"].ToString();
                    getroutes.overheadcost = dr["overheadcost"].ToString();
                    getroutes.mstdsnf = dr["m_std_snf"].ToString();
                    getroutes.pstdsnf = dr["p_std_snf"].ToString();
                    getroutes.snfpluson = dr["snfplus_on"].ToString();
                    double mcost = Convert.ToDouble(dr["m_snfpluscost"].ToString());
                    mcost = Math.Round(mcost, 2);
                    getroutes.msnfpluscost = mcost.ToString();
                    double pcost = Convert.ToDouble(dr["p_snfpluscost"].ToString());
                    pcost = Math.Round(pcost, 2);
                    getroutes.msnfpluscost = mcost.ToString();
                    getroutes.psnfpluscost = pcost.ToString();
                    getroutes.pstdfat = dr["p_std_fat"].ToString();
                    getroutes.fatpluson = dr["fatplus_on"].ToString();

                    getroutes.mfatpluscost = dr["m_fatpluscost"].ToString();
                    getroutes.pfatpluscost = dr["p_fatpluscost"].ToString();

                    getroutes.type = type;
                    Vendorlst.Add(getroutes);
                }
            }
            string response = GetJson(Vendorlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_fat_snf_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "1");
            DataTable dtfat = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "2");
            DataTable dtsnf = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "3");
            DataTable dtcowfat = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "4");
            DataTable dtcowsnf = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "5");
            DataTable dtbuffat = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT sno, round(remaining,2) as remaining, productid FROM fat_snf_inventory WHERE (branchid = @BranchID) AND (productid=@productid)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@productid", "6");
            DataTable dtbufsnf = vdm.SelectQuery(cmd).Tables[0];
            List<fat_snf_details> Vehilcelst = new List<fat_snf_details>();
            if (dtfat.Rows.Count > 0)
            {
                fat_snf_details get_fat_snf = new fat_snf_details();
                get_fat_snf.kgfat = dtfat.Rows[0]["remaining"].ToString();
                get_fat_snf.kgsnf = dtsnf.Rows[0]["remaining"].ToString();
                get_fat_snf.kgcowfat = dtcowfat.Rows[0]["remaining"].ToString();
                get_fat_snf.kgcowsnf = dtcowsnf.Rows[0]["remaining"].ToString();
                get_fat_snf.kgbuffat = dtbuffat.Rows[0]["remaining"].ToString();
                get_fat_snf.kgbufsnf = dtbufsnf.Rows[0]["remaining"].ToString();
                Vehilcelst.Add(get_fat_snf);
            }
            string response = GetJson(Vehilcelst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_silo_wise_fat_snf_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT SiloId, SiloName from silomaster");
            DataTable dtsilomaster = vdm.SelectQuery(cmd).Tables[0];
            if (dtsilomaster.Rows.Count > 0)
            {
                foreach (DataRow dr in dtsilomaster.Rows)
                {
                    cmd = new SqlCommand("SELECT    silo_inward_transaction.qty_ltrs, silo_inward_transaction.qty_kgs, silomaster.SiloName, silo_inward_transaction.fat, silo_inward_transaction.snf FROM   silo_inward_transaction INNER JOIN silomaster ON silo_inward_transaction.siloid = silomaster.SiloId WHERE (silo_inward_transaction.date BETWEEN @d1 AND @d2) AND (branchid = @BranchID) AND (silo_inward_transaction.siloid = @siloid)");
                    cmd.Parameters.Add("@BranchID", BranchID);
                    cmd.Parameters.Add("@siloid", dr["SiloId"].ToString());
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtsilofat = vdm.SelectQuery(cmd).Tables[0];
                    List<SiloMonitar> Silodata = new List<SiloMonitar>();
                    if (dtsilofat.Rows.Count > 0)
                    {
                        double ltrfat = 0;
                        double ltrsnf = 0;
                        foreach (DataRow drr in dtsilofat.Rows)
                        {
                            SiloMonitar getroutes = new SiloMonitar();
                            // getroutes.sno = dr["sno"].ToString();
                            getroutes.SiloName = drr["SiloName"].ToString();
                            getroutes.fat = drr["fat"].ToString();
                            getroutes.snf = drr["snf"].ToString();
                            double fat = Convert.ToDouble(drr["fat"].ToString());
                            double snf = Convert.ToDouble(drr["snf"].ToString());
                            double ltrs = Convert.ToDouble(drr["qty_ltrs"].ToString());
                            ltrfat = ltrs * fat;
                            ltrfat = ltrfat / ltrs;
                            ltrfat = Math.Round(ltrfat / 100, 2);
                            getroutes.ltrfat = ltrfat.ToString();
                            ltrsnf = ltrs * snf;
                            ltrsnf = Math.Round(ltrsnf / 100, 2);
                            getroutes.ltrsnf = ltrsnf.ToString();
                            Silodata.Add(getroutes);
                        }
                        string response = GetJson(Silodata);
                        context.Response.Write(response);
                    }
                }
            }
        }
        catch
        {

        }
    }

    private void get_Vehicle_Master_details(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno,vehicleno,capacity,noofqty,fcell_qty,mcell_qty,bcell_qty,per_kmrate,make FROM vehicle_master");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Vehiclecls> Vehilcelst = new List<Vehiclecls>();
            foreach (DataRow dr in routes.Rows)
            {
                Vehiclecls getroutes = new Vehiclecls();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vehicleno = dr["vehicleno"].ToString();
                getroutes.capacity = dr["capacity"].ToString();
                getroutes.noofqty = dr["noofqty"].ToString();
                getroutes.frentcell = dr["fcell_qty"].ToString();
                getroutes.middlecell = dr["mcell_qty"].ToString();
                getroutes.backcell = dr["bcell_qty"].ToString();
                getroutes.kmperrate = dr["per_kmrate"].ToString();
                getroutes.make = dr["make"].ToString();
                Vehilcelst.Add(getroutes);
            }
            string response = GetJson(Vehilcelst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_weigh_bridge_click(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            vdm = new SalesDBManager();
            string refdcno = context.Request["refdcno"];
            string grossweight = context.Request["grossweight"];
            string cell = context.Request["cell"];
            string qty = context.Request["qty"];
            string tareweight = context.Request["tareweight"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("insert into  weighbridge (transno,cell,doe,qty,grossweight,tareweight,entryby,branchid) values (@transno,@cell,@doe,@qty,@grossweight,@tareweight,@entryby,@branchid)");
            cmd.Parameters.Add("@transno", refdcno);
            cmd.Parameters.Add("@cell", cell);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@qty", qty);
            cmd.Parameters.Add("@grossweight", grossweight);
            cmd.Parameters.Add("@tareweight", tareweight);
            cmd.Parameters.Add("@entryby", UserID);
            cmd.Parameters.Add("@branchid", BranchID);
            vdm.insert(cmd);
            string msg = "Weigh bridge transaction saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_vehicle_master_click(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            vdm = new SalesDBManager();
            string vehicleno = context.Request["vehicleno"];
            string nocell = context.Request["nocell"];
            string capacity = context.Request["capacity"];
            string frentcell = context.Request["frentcell"];
            string middlecell = context.Request["middlecell"];
            string backcell = context.Request["backcell"];
            string kmperrate = context.Request["kmperrate"];
            string make = context.Request["make"];
            string btnval = context.Request["btnval"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into  vehicle_master (vehicleno,capacity,noofqty,branchid,fcell_qty,mcell_qty,bcell_qty,per_kmrate,make, createdby, doe) values (@vehicleno,@capacity,@noofqty,@branchid,@frentcell,@middlecell,@backcell,@kmperrate,@make,@createdby,@doe)");
                cmd.Parameters.Add("@vehicleno", vehicleno);
                cmd.Parameters.Add("@capacity", capacity);
                cmd.Parameters.Add("@noofqty", nocell);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@frentcell", frentcell);
                cmd.Parameters.Add("@middlecell", middlecell);
                cmd.Parameters.Add("@backcell", backcell);
                cmd.Parameters.Add("@kmperrate", kmperrate);
                cmd.Parameters.Add("@make", make);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string msg = "Vehicle no saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("update vehicle_master set vehicleno=@vehicleno,capacity=@capacity,noofqty=@noofqty,fcell_qty=@frentcell,mcell_qty=@middlecell,bcell_qty=@backcell,per_kmrate=@kmperrate,make=@make where  branchid=@branchid AND sno=@sno");
                cmd.Parameters.Add("@vehicleno", vehicleno);
                cmd.Parameters.Add("@capacity", capacity);
                cmd.Parameters.Add("@noofqty", nocell);
                cmd.Parameters.Add("@frentcell", frentcell);
                cmd.Parameters.Add("@middlecell", middlecell);
                cmd.Parameters.Add("@backcell", backcell);
                cmd.Parameters.Add("@kmperrate", kmperrate);
                cmd.Parameters.Add("@make", make);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Vehicle no updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void Get_Cow_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (BranchID == "1")
            {
                //cmd = new SqlCommand("SELECT  despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') GROUP BY  despatch_sub.milktype");
                cmd = new SqlCommand("SELECT despatch_sub.milktype, despatch_sub.qty_ltr, despatch_sub.qty_kgs, vendor_subtable.rate_on, vendor_subtable.calc_on, despatch_sub.fat, despatch_sub.snf FROM  despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno where  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') and (despatch_sub.milktype = 'Cow') AND (despatch_entry.salestype='SVDS PUNABAKA')");
            }
            else
            {
                cmd = new SqlCommand("SELECT despatch_sub.milktype, despatch_sub.qty_ltr, despatch_sub.qty_kgs, vendor_subtable.rate_on, vendor_subtable.calc_on, despatch_sub.fat, despatch_sub.snf FROM  despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno where  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') and (despatch_sub.milktype = 'Cow') AND (despatch_entry.salestype='SVF WYRA')");

            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            List<trasistcls> Departmentslst = new List<trasistcls>();
            DataTable Report = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("Milk Type");
            Report.Columns.Add("QtyLtr");
            Report.Columns.Add("QtyKgs");
            Report.Columns.Add("FAT");
            Report.Columns.Add("SNF");
            Report.Columns.Add("KG FAT");
            Report.Columns.Add("KG SNF");
            int i = 1;
            double kgfattotal = 0;
            double kgsnftotal = 0;
            double kgstotal = 0;
            double Ltrstotal = 0;
            double TStotal = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                double ltrs = 0;
                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                Ltrstotal += ltrs;
                double Kgs = 0;
                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                kgstotal += Kgs;
                newrow["Milk Type"] = dr["milktype"].ToString();
                newrow["QtyLtr"] = ltrs;
                newrow["QtyKgs"] = Kgs;
                string Rateon = dr["rate_on"].ToString();
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                newrow["SNF"] = SNF;
                double weight = 0;
                double KGFAT = 0;
                double KGSNF = 0;
                if (Rateon == "TS")
                {

                    double TS = 0;
                    TS = FAT + SNF;
                    weight = (TS * Kgs) / 100;
                    KGFAT = (FAT * Kgs) / 100;
                    KGSNF = (SNF * Kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    weight = (FAT * Kgs) / 100;
                    KGFAT = (FAT * Kgs) / 100;
                    KGSNF = (SNF * Kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        weight = ltrs;
                        KGFAT = (FAT * ltrs) / 100;
                        KGSNF = (SNF * ltrs) / 100;
                    }
                    else
                    {
                        weight = Kgs;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                newrow["KG FAT"] = KGFAT;
                kgfattotal += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                newrow["KG SNF"] = KGSNF;
                kgsnftotal += KGSNF;
            }
            DataRow newvartical2 = Report.NewRow();
            newvartical2["Milk Type"] = "Cow";
            newvartical2["QtyKgs"] = kgstotal;
            newvartical2["QtyLtr"] = Ltrstotal;
            double fattotal = 0;
            fattotal = (kgfattotal / kgstotal) * 100;
            fattotal = Math.Round(fattotal, 2);
            newvartical2["FAT"] = fattotal;
            newvartical2["KG FAT"] = kgfattotal;
            double snftotal = 0;
            snftotal = (kgsnftotal / kgstotal) * 100;
            snftotal = Math.Round(snftotal, 2);
            newvartical2["SNF"] = snftotal;
            newvartical2["KG SNF"] = kgsnftotal;
            Report.Rows.Add(newvartical2);
            foreach (DataRow dr in Report.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.milktype = dr["Milk Type"].ToString();
                getroutes.QtyLtr = dr["QtyLtr"].ToString();
                getroutes.QtyKgs = dr["QtyKgs"].ToString();
                getroutes.fat = dr["FAT"].ToString();
                getroutes.snf = dr["SNF"].ToString();
                getroutes.kgfat = dr["KG FAT"].ToString();
                getroutes.kgsnf = dr["KG SNF"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_Buffalo_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (BranchID == "1")
            {
                //cmd = new SqlCommand("SELECT  despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') GROUP BY  despatch_sub.milktype");
                cmd = new SqlCommand("SELECT despatch_sub.milktype, despatch_sub.qty_ltr, despatch_sub.qty_kgs, vendor_subtable.rate_on, vendor_subtable.calc_on, despatch_sub.fat, despatch_sub.snf FROM  despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno where  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype='SVDS PUNABAKA') and (despatch_sub.milktype = 'Buffalo') ");
            }
            else
            {
                cmd = new SqlCommand("SELECT despatch_sub.milktype, despatch_sub.qty_ltr, despatch_sub.qty_kgs, vendor_subtable.rate_on, vendor_subtable.calc_on, despatch_sub.fat, despatch_sub.snf FROM  despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno where  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype='SVF WYRA') and (despatch_sub.milktype = 'Buffalo') ");

            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];

            List<trasistcls> Departmentslst = new List<trasistcls>();
            DataTable Report = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("Milk Type");
            Report.Columns.Add("QtyLtr");
            Report.Columns.Add("QtyKgs");
            Report.Columns.Add("FAT");
            Report.Columns.Add("SNF");
            Report.Columns.Add("KG FAT");
            Report.Columns.Add("KG SNF");
            int i = 1;
            double kgfattotal = 0;
            double kgsnftotal = 0;
            double kgstotal = 0;
            double Ltrstotal = 0;
            double TStotal = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                double ltrs = 0;
                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                Ltrstotal += ltrs;
                double Kgs = 0;
                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                kgstotal += Kgs;
                newrow["Milk Type"] = dr["milktype"].ToString();
                newrow["QtyLtr"] = ltrs;
                newrow["QtyKgs"] = Kgs;
                string Rateon = dr["rate_on"].ToString();
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                newrow["SNF"] = SNF;
                double weight = 0;
                double KGFAT = 0;
                double KGSNF = 0;
                if (Rateon == "TS")
                {

                    double TS = 0;
                    TS = FAT + SNF;
                    weight = (TS * Kgs) / 100;
                    KGFAT = (FAT * Kgs) / 100;
                    KGSNF = (SNF * Kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    weight = (FAT * Kgs) / 100;
                    KGFAT = (FAT * Kgs) / 100;
                    KGSNF = (SNF * Kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        weight = ltrs;
                        KGFAT = (FAT * ltrs) / 100;
                        KGSNF = (SNF * ltrs) / 100;
                    }
                    else
                    {
                        weight = Kgs;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                newrow["KG FAT"] = KGFAT;
                kgfattotal += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                newrow["KG SNF"] = KGSNF;
                kgsnftotal += KGSNF;
            }
            DataRow newvartical2 = Report.NewRow();
            newvartical2["Milk Type"] = "Buffalo";
            newvartical2["QtyKgs"] = kgstotal;
            newvartical2["QtyLtr"] = Ltrstotal;
            double fattotal = 0;
            fattotal = (kgfattotal / kgstotal) * 100;
            fattotal = Math.Round(fattotal, 2);
            newvartical2["FAT"] = fattotal;
            newvartical2["KG FAT"] = kgfattotal;
            double snftotal = 0;
            snftotal = (kgsnftotal / kgstotal) * 100;
            snftotal = Math.Round(snftotal, 2);
            newvartical2["SNF"] = snftotal;
            newvartical2["KG SNF"] = kgsnftotal;
            Report.Rows.Add(newvartical2);
            foreach (DataRow dr in Report.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.milktype = dr["Milk Type"].ToString();
                getroutes.QtyLtr = dr["QtyLtr"].ToString();
                getroutes.QtyKgs = dr["QtyKgs"].ToString();
                getroutes.fat = dr["FAT"].ToString();
                getroutes.snf = dr["SNF"].ToString();
                getroutes.kgfat = dr["KG FAT"].ToString();
                getroutes.kgsnf = dr["KG SNF"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_ghee_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            //cmd = new SqlCommand("SELECT  despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') GROUP BY  despatch_sub.milktype");
            cmd = new SqlCommand("SELECT sno, received_qty, fat, snf, doe, qty_kgs FROM ghee_section WHERE (branchid = @BranchID) ");
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];

            List<trasistcls> Departmentslst = new List<trasistcls>();
            DataTable Report = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("received qty");
            Report.Columns.Add("QtyKgs");
            Report.Columns.Add("FAT");
            Report.Columns.Add("SNF");
            Report.Columns.Add("KG FAT");
            Report.Columns.Add("KG SNF");
            int i = 1;
            double kgfattotal = 0;
            double kgsnftotal = 0;
            double kgstotal = 0;
            double receivedqtytotal = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                double Kgs = 0;
                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                kgstotal += Kgs;
                newrow["QtyKgs"] = Kgs;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                newrow["SNF"] = SNF;

                double KGFAT = 0;
                double KGSNF = 0;

                KGFAT = (FAT * Kgs) / 100;
                KGSNF = (SNF * Kgs) / 100;

                KGFAT = Math.Round(KGFAT, 2);
                newrow["KG FAT"] = KGFAT;
                kgfattotal += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                newrow["KG SNF"] = KGSNF;
                kgsnftotal += KGSNF;

                double receivedqty = 0;
                double.TryParse(dr["received_qty"].ToString(), out receivedqty);
                receivedqtytotal += receivedqty;
                newrow["received qty"] = receivedqty;

            }

            DataRow newvartical2 = Report.NewRow();
            newvartical2["received qty"] = receivedqtytotal;
            newvartical2["QtyKgs"] = kgstotal;
            double fattotal = 0;
            fattotal = (kgfattotal / kgstotal) * 100;
            fattotal = Math.Round(fattotal, 2);
            newvartical2["FAT"] = fattotal;
            newvartical2["KG FAT"] = kgfattotal;
            double snftotal = 0;
            snftotal = (kgsnftotal / kgstotal) * 100;
            snftotal = Math.Round(snftotal, 2);
            newvartical2["SNF"] = snftotal;
            newvartical2["KG SNF"] = kgsnftotal;
            Report.Rows.Add(newvartical2);

            foreach (DataRow dr in Report.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.milktype = dr["received qty"].ToString();
                getroutes.QtyKgs = dr["QtyKgs"].ToString();
                getroutes.fat = dr["FAT"].ToString();
                getroutes.snf = dr["SNF"].ToString();
                getroutes.kgfat = dr["KG FAT"].ToString();
                getroutes.kgsnf = dr["KG SNF"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void Get_unload_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno, vehicletype, vehicleno, dcno, milkofat, milkosnf, celltype, doe, branchid, status FROM milkoscreendetails WHERE (doe BETWEEN @d1 AND @d2) AND (branchid = @BranchID) AND (vehicletype=@vehicletype) AND (dcno <> 0)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@vehicletype", "Tanker");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtweighdetails = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT    sno,  dcno as dc_no, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, enterby, branchid FROM   silo_inward_transaction WHERE (date BETWEEN @d1 AND @d2) AND (branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtunload = vdm.SelectQuery(cmd).Tables[0];
            var idsNotInB = dtweighdetails.AsEnumerable().Select(r => r.Field<int>("dcno"))
            .Except(dtunload.AsEnumerable().Select(r => r.Field<int>("dc_no")));
            DataTable dtMerged = (from row in dtweighdetails.AsEnumerable()
                                  join id in idsNotInB
                                  on row.Field<int>("dcno") equals id
                                  select row).CopyToDataTable();

            var valueMismatchInBoth = from c in dtweighdetails.AsEnumerable()
                                      where (from o in dtunload.AsEnumerable()
                                             select o["dc_no"]).Contains(c["dcno"].ToString())
                                      select c;
            List<trasistcls> Departmentslst = new List<trasistcls>();
            foreach (DataRow dr in dtMerged.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.vehciecleno = dr["vehicleno"].ToString();
                getroutes.milktype = dr["dcno"].ToString();
                getroutes.fat = dr["milkofat"].ToString();
                getroutes.snf = dr["milkosnf"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string strdctime = dtdoe.ToString("dd/MMM/yyyy HH:mm");
                string[] dcDateTime = strdctime.Split(' ');
                string[] PDateTime = strdctime.Split(' ');
                getroutes.dcdate = dcDateTime[0];
                getroutes.dcdtime = PDateTime[1];
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_labdcMilk_Deatails(HttpContext context)
    {
        try
        {

            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno, weighbridge.vehicleno, weighbridgedetails.dcno as dcno, weighbridgedetails.weight, weighbridgedetails.entrydate FROM weighbridge INNER JOIN weighbridgedetails ON weighbridge.sno = weighbridgedetails.ticketno WHERE (weighbridge.doe BETWEEN @d1 AND @d2) AND (weighbridge.branchid = @BranchID) AND (weighbridge.vehicletype=@vehicletype) AND status='open' AND (weighbridgedetails.dcno <> 0)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@vehicletype", "Tanker");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtweighdetails = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT sno, vehicletype, vehicleno, dcno as dc_no, celltype, doe, branchid, status FROM milkoscreendetails WHERE (doe BETWEEN @d1 AND @d2) AND (branchid = @BranchID) AND (vehicletype=@vehicletype)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@vehicletype", "Tanker");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtlab = vdm.SelectQuery(cmd).Tables[0];
            var idsNotInB = dtweighdetails.AsEnumerable().Select(r => r.Field<int>("dcno"))
            .Except(dtlab.AsEnumerable().Select(r => r.Field<int>("dc_no")));
            DataTable dtMerged = (from row in dtweighdetails.AsEnumerable()
                                  join id in idsNotInB
                                  on row.Field<int>("dcno") equals id
                                  select row).CopyToDataTable();

            var valueMismatchInBoth = from c in dtweighdetails.AsEnumerable()
                                      where (from o in dtlab.AsEnumerable()
                                             select o["dc_no"]).Contains(c["dcno"].ToString())
                                      select c;
            List<trasistcls> Departmentslst = new List<trasistcls>();
            foreach (DataRow dr in dtMerged.Rows)
            {
                trasistcls getroutes = new trasistcls();
                string dcno = dr["dcno"].ToString();
                if (dcno != "")
                {
                    getroutes.vehciecleno = dr["vehicleno"].ToString();
                    getroutes.milktype = dr["dcno"].ToString();
                    DateTime dtdoe = Convert.ToDateTime(dr["entrydate"].ToString());
                    string strdctime = dr["entrydate"].ToString();
                    string[] dcDateTime = strdctime.Split(' ');
                    string[] PDateTime = strdctime.Split(' ');
                    getroutes.dcdate = dcDateTime[0];
                    getroutes.dcdtime = PDateTime[1];
                    //getroutes.weight = dr["weight"].ToString();
                    Departmentslst.Add(getroutes);
                }
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_weighMilk_Deatails(HttpContext context)
    {
        try
        {

            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT vendors.vendorname, CONVERT(VARCHAR(20),despatch_entry.doe, 113) AS doe, despatch_entry.dc_no, despatch_entry.vehciecleno, despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'V') AND (despatch_entry.doe BETWEEN @d1 AND @d2) GROUP BY vendors.vendorname, despatch_entry.vehciecleno, despatch_entry.dc_no, despatch_sub.milktype,despatch_entry.doe,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtdespatch = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT sno, vehicletype, vehicleno, dcno, cell, doe, branchid, transportername, transactionno, entryby, status FROM weighbridge WHERE (doe BETWEEN @d1 AND @d2) AND (branchid = @BranchID) AND (vehicletype=@vehicletype)");
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@vehicletype", "Tanker");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtweigh = vdm.SelectQuery(cmd).Tables[0];

            var idsNotInB = dtdespatch.AsEnumerable().Select(r => r.Field<int>("dc_no"))
            .Except(dtweigh.AsEnumerable().Select(r => r.Field<int>("dcno")));
            DataTable dtMerged = (from row in dtdespatch.AsEnumerable()
                                  join id in idsNotInB
                                  on row.Field<int>("dc_no") equals id
                                  select row).CopyToDataTable();

            var valueMismatchInBoth = from c in dtdespatch.AsEnumerable()
                                      where (from o in dtweigh.AsEnumerable()
                                             select o["dcno"]).Contains(c["dc_no"].ToString())
                                      select c;
            List<trasistcls> Departmentslst = new List<trasistcls>();
            foreach (DataRow dr in dtMerged.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.vehciecleno = dr["vehciecleno"].ToString();
                getroutes.dctime = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string strdctime = dtdoe.ToString("dd/MMM/yyyy HH:mm");
                string[] dcDateTime = strdctime.Split(' ');
                string[] PDateTime = strdctime.Split(' ');
                getroutes.dcdate = dcDateTime[0];
                getroutes.dcdtime = PDateTime[1];
                getroutes.milktype = dr["milktype"].ToString();
                double QtyLtr = 0;
                double.TryParse(dr["QtyLtr"].ToString(), out QtyLtr);
                QtyLtr = Math.Round(QtyLtr, 2);
                getroutes.QtyLtr = QtyLtr.ToString();
                double QtyKgs = 0;
                double.TryParse(dr["QtyKgs"].ToString(), out QtyKgs);
                QtyKgs = Math.Round(QtyKgs, 2);
                getroutes.QtyKgs = QtyKgs.ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void Get_InTrasistMilk_Deatails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (BranchID == "1")
            {
                cmd = new SqlCommand("SELECT  vendors.vendorname,CONVERT(VARCHAR(20),despatch_entry.doe, 113) AS doe, despatch_entry.vehciecleno, despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype = 'SVDS PUNABAKA') GROUP BY vendors.vendorname, despatch_entry.vehciecleno, despatch_sub.milktype,despatch_entry.doe,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf ");
            }
            else if (BranchID == "22")
            {
                cmd = new SqlCommand("SELECT  vendors.vendorname,CONVERT(VARCHAR(20),despatch_entry.doe, 113) AS doe, despatch_entry.vehciecleno, despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype = 'KUPPAM') GROUP BY vendors.vendorname, despatch_entry.vehciecleno, despatch_sub.milktype,despatch_entry.doe,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf ");
            }
            else if (BranchID == "26")
            {
                cmd = new SqlCommand("SELECT  vendors.vendorname,CONVERT(VARCHAR(20),despatch_entry.doe, 113) AS doe, despatch_entry.vehciecleno, despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype = 'SVF WYRA') GROUP BY vendors.vendorname, despatch_entry.vehciecleno, despatch_sub.milktype,despatch_entry.doe,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf ");
            }
            else if (BranchID == "115")
            {
                cmd = new SqlCommand("SELECT  vendors.vendorname,CONVERT(VARCHAR(20),despatch_entry.doe, 113) AS doe, despatch_entry.vehciecleno, despatch_sub.milktype, SUM(despatch_sub.qty_ltr) AS QtyLtr, SUM(despatch_sub.qty_kgs) AS QtyKgs,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (branchmapping.superbranch = @BranchID) AND (despatch_entry.status = 'A') AND (despatch_entry.salestype = 'HYDERABAD PLANT') GROUP BY vendors.vendorname, despatch_entry.vehciecleno, despatch_sub.milktype,despatch_entry.doe,vendors.kms,vendors.expectedtime,despatch_sub.fat,despatch_sub.snf ");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<trasistcls> Departmentslst = new List<trasistcls>();
            foreach (DataRow dr in routes.Rows)
            {
                trasistcls getroutes = new trasistcls();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.dctime = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string strdctime = dtdoe.ToString("dd/MMM/yyyy HH:mm");
                string[] dcDateTime = strdctime.Split(' ');
                string[] PDateTime = strdctime.Split(' ');
                getroutes.dcdate = dcDateTime[0];
                getroutes.dcdtime = PDateTime[1];
                getroutes.vehciecleno = dr["vehciecleno"].ToString();
                getroutes.milktype = dr["milktype"].ToString();
                double QtyLtr = 0;
                double.TryParse(dr["QtyLtr"].ToString(), out QtyLtr);
                QtyLtr = Math.Round(QtyLtr, 2);
                getroutes.QtyLtr = QtyLtr.ToString();
                double QtyKgs = 0;
                double.TryParse(dr["QtyKgs"].ToString(), out QtyKgs);
                QtyKgs = Math.Round(QtyKgs, 2);
                getroutes.QtyKgs = QtyKgs.ToString();
                getroutes.distance = dr["kms"].ToString();
                int expmins = 0;
                int.TryParse(dr["expectedtime"].ToString(), out expmins);
                string dcTime = dr["doe"].ToString();
                DateTime dtPlantime = Convert.ToDateTime(dcTime);
                DateTime dtecpected = dtPlantime.AddMinutes(expmins);
                getroutes.exptime = dtecpected.ToString("dd/MMM/yyyy HH:mm");
                double fat = 0;
                double.TryParse(dr["fat"].ToString(), out fat);
                fat = Math.Round(fat, 2);
                getroutes.fat = fat.ToString();
                double snf = 0;
                double.TryParse(dr["snf"].ToString(), out snf);
                snf = Math.Round(snf, 2);
                getroutes.snf = snf.ToString();
                double kgfat = 0;
                kgfat = QtyKgs * fat / 100;
                kgfat = Math.Round(kgfat, 2);
                double kgsnf = 0;
                kgsnf = QtyKgs * snf / 100;
                kgsnf = Math.Round(kgsnf, 2);
                getroutes.kgfat = kgfat.ToString();
                getroutes.kgsnf = kgsnf.ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_branchdata_click(HttpContext context)
    {
        try
        {
            string branchname = context.Request["branchname"];
            string address = context.Request["address"];
            string branchtype = context.Request["branchtype"];
            string branchcode = context.Request["branchcode"];
            string cstno = context.Request["cstno"];
            string mitno = context.Request["mitno"];
            string branchid = context.Session["Branch_ID"].ToString();
            string tin = context.Request["tin"];
            string sapcodebranch = context.Request["sapcodebranch"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into  branch_info (branchname,address,branchtype,tinno,cstno,mitno,branchcode,whcode) values (@branchname,@address,@branchtype,@tinno,@cstno,@mitno,@branchcode,@whcode)");
                cmd.Parameters.Add("@branchname", branchname);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@tinno", tin);
                cmd.Parameters.Add("@cstno", cstno);
                cmd.Parameters.Add("@mitno", mitno);
                cmd.Parameters.Add("@branchcode", branchcode);
                cmd.Parameters.Add("@whcode", sapcodebranch);
                vdm.insert(cmd);
                cmd = new SqlCommand("Select  MAX(sno) as sno from branch_info");
                DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
                string RefNo = dtbranch.Rows[0]["sno"].ToString();
                cmd = new SqlCommand("insert into branchmapping (subbranch, superbranch) values (@subbranch,@superbranch)");
                cmd.Parameters.Add("@subbranch", RefNo);
                cmd.Parameters.Add("@superbranch", branchid);
                vdm.insert(cmd);
                string msg = "Branch saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("update  branch_info set cstno=@cstno,mitno=@mitno,branchcode=@branchcode, branchname=@branchname,address=@address,branchtype=@branchtype,tinno=@tinno,whcode=@whcode where sno=@sno");
                cmd.Parameters.Add("@branchname", branchname);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@tinno", tin);
                cmd.Parameters.Add("@cstno", cstno);
                cmd.Parameters.Add("@mitno", mitno);
                cmd.Parameters.Add("@branchcode", branchcode);
                cmd.Parameters.Add("@whcode", sapcodebranch);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Branch update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }

    private void Get_Varify_DespatchDetails_click(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string strDcNo = context.Request["refdcno"];
            string[] arrdc = strDcNo.Split('/');
            string RefDcNo = arrdc[2];
            vdm = new SalesDBManager();
            DateTime dtcurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("update despatch_entry set status=@status ,desp_time=@desp_time where sno=@sno AND status='A'");
            cmd.Parameters.Add("@status", "V");
            cmd.Parameters.Add("@desp_time", dtcurrentdate);
            cmd.Parameters.Add("@sno", RefDcNo);
            cmd.Parameters.Add("@branchid", BranchID);
            vdm.Update(cmd);
            cmd = new SqlCommand("SELECT despatch_entry.sno, despatch_entry.vehciecleno,vendors.vendorname,vendors.sno as vendorid, despatch_entry.doe,despatch_entry.branchid  FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno WHERE (despatch_entry.sno = @Sno)");
            cmd.Parameters.Add("@Sno", RefDcNo);
            DataTable dtvendors = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT sno, name, mobno, email FROM personalinfo WHERE (msgtype = 'Security Inward') AND (branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtMobno = vdm.SelectQuery(cmd).Tables[0];
            WebClient client = new WebClient();
            if (dtMobno.Rows.Count > 0)
            {
                foreach (DataRow dr in dtMobno.Rows)
                {
                    string MobNo = dtvendors.Rows[0]["mobno"].ToString();
                    if (MobNo.Length == 10)
                    {
                        string vendorname = dtvendors.Rows[0]["vendorname"].ToString();
                        string vendorbranchid = dtvendors.Rows[0]["branchid"].ToString();
                        string doe = dtvendors.Rows[0]["doe"].ToString();
                        string dcno = dtvendors.Rows[0]["sno"].ToString();
                        string vendorid = dtvendors.Rows[0]["vendorid"].ToString();
                        string vehicleno = dtvendors.Rows[0]["vehciecleno"].ToString();
                        string rdate = "DC Raised date->" + doe + "\r\n";
                        string details = "CC Name->" + vendorname + "DCNo ->" + dcno + "\r\n";
                        string vehicle = "Vehcile ->" + vehicleno + "Tanker Received Time At Plant ->" + dtcurrentdate + "\r\n";
                        string ccdet = rdate + details + vehicle;
                        string totaldetails = ccdet;
                        string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                        Stream data = client.OpenRead(baseurl);
                        StreamReader reader = new StreamReader(data);
                        string ResponseID = reader.ReadToEnd();
                        data.Close();
                        reader.Close();


                        cmd = new SqlCommand("SELECT  sno FROM  employee_erp WHERE (phoneno = @MobNo)");
                        cmd.Parameters.Add("@MobNo", MobNo);
                        DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                        string HRMS_EmpId = "";
                        if (dtmobid.Rows.Count > 0)
                        {
                            HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                        }
                        else
                        {
                            HRMS_EmpId = vendorid;
                        }
                        cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                        cmd.Parameters.Add("@empid", HRMS_EmpId);
                        cmd.Parameters.Add("@mainbranch", BranchID);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@msg", totaldetails);
                        cmd.Parameters.Add("@mobileno", MobNo);
                        cmd.Parameters.Add("@doe", dtcurrentdate);
                        vdm.insert(cmd);
                    }
                }
            }
            string msg = "Despatch varified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void GetDespatchDetails_click(HttpContext context)
    {
        try
        {
            string strDcNo = context.Request["refdcno"];
            string[] arrdc = strDcNo.Split('/');
            string RefDcNo = arrdc[2];
            cmd = new SqlCommand("SELECT sno, dc_no, cc_id, branchid, doe, entry_by, chemist, remarks, vehciecleno, qco, status, desp_time, trans_type FROM despatch_entry WHERE (sno = @Sno) AND (status='A')");
            cmd.Parameters.Add("@Sno", RefDcNo);
            DataTable dtstatus = vdm.SelectQuery(cmd).Tables[0];
            if (dtstatus.Rows.Count > 0)
            {
                cmd = new SqlCommand("SELECT despatch_sub.cellname as CellName, despatch_sub.milktype as MilkType, despatch_sub.fat as FAT,despatch_sub.snf as SNF, despatch_sub.qty_ltr as QtyLtr,despatch_sub.qty_kgs as QtyKgs, despatch_sub.percentageon as PercentageOn,despatch_sub.clr as CLR, despatch_sub.cob1 as COB, despatch_sub.hs as HS, despatch_sub.phosps1 as Phosps, despatch_sub.alcohol as Alcohol, despatch_sub.temp as TEMP, vendors.vendorname, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no, vendors.sno AS vsno, vendors.companycode FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno WHERE (despatch_entry.sno = @RefDcNo)");
                cmd.Parameters.Add("@RefDcNo", RefDcNo);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dtDispatch);
                    DataTable dtlblValues = view1.ToTable(true, "sno", "dc_no", "vehciecleno", "doe", "chemist", "vendorname", "vsno", "companycode");
                    DataTable dtgrdValues = view1.ToTable(true, "sno", "vsno", "MilkType", "CellName", "FAT", "SNF", "QtyLtr", "QtyKgs", "PercentageOn", "CLR", "COB", "HS", "Phosps", "Alcohol", "TEMP");
                    List<GetDespatchcls> GetDespatchlist = new List<GetDespatchcls>();
                    List<MilkDetails> Milkdetailslst = new List<MilkDetails>();
                    foreach (DataRow dr in dtlblValues.Rows)
                    {
                        MilkDetails getdespatch = new MilkDetails();
                        getdespatch.dcno = dr["dc_no"].ToString();
                        getdespatch.vehicleno = dr["vehciecleno"].ToString();
                        getdespatch.dispdate = dr["doe"].ToString();
                        getdespatch.chemist = dr["chemist"].ToString();
                        getdespatch.plantname = dr["vendorname"].ToString();
                        getdespatch.vsno = dr["vsno"].ToString();
                        getdespatch.companycode = dr["companycode"].ToString();
                        getdespatch.sno = dr["sno"].ToString();
                        Milkdetailslst.Add(getdespatch);
                    }
                    List<MilkfatDetails> MilkfatDetailslst = new List<MilkfatDetails>();
                    foreach (DataRow dr in dtgrdValues.Rows)
                    {
                        MilkfatDetails getdespatch = new MilkfatDetails();
                        getdespatch.vsno = dr["vsno"].ToString();
                        getdespatch.sno = dr["sno"].ToString();
                        getdespatch.milktype = dr["MilkType"].ToString();
                        getdespatch.CellName = dr["CellName"].ToString();
                        getdespatch.fat = dr["FAT"].ToString();
                        getdespatch.snf = dr["SNF"].ToString();
                        getdespatch.Qtykg = dr["QtyKgs"].ToString();
                        getdespatch.Qtyltr = dr["QtyLtr"].ToString();
                        getdespatch.clr = dr["CLR"].ToString();
                        getdespatch.cob = dr["COB"].ToString();
                        getdespatch.hs = dr["HS"].ToString();
                        getdespatch.phosps = dr["Phosps"].ToString();
                        getdespatch.alcohol = dr["Alcohol"].ToString();
                        getdespatch.temp = dr["TEMP"].ToString();
                        MilkfatDetailslst.Add(getdespatch);
                    }
                    GetDespatchcls get_despatch = new GetDespatchcls();
                    get_despatch.MilkDetailslst = Milkdetailslst;
                    get_despatch.MilkfatDetailslst = MilkfatDetailslst;
                    GetDespatchlist.Add(get_despatch);
                    string response = GetJson(GetDespatchlist);
                    context.Response.Write(response);

                }
                else
                {
                    string msg = "No dc were found";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                string msg = "Dc alredy verified";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class packingdetails
    {
        public string batch { get; set; }
        public string sno { get; set; }
        public string btnvalue { get; set; }
        public string date { get; set; }
        public string productid { get; set; }
        public string qty_kgs { get; set; }
        public string recivedfilm { get; set; }
        public string Consumptionfilm { get; set; }
        public string Returnfilm { get; set; }
        public string wastagefilm { get; set; }
        public string cuttingfilm { get; set; }
        public List<packingfatdetails> pkg_batch_wise_details { get; set; }
    }
    public class packingfatdetails
    {
        public string siloid { get; set; }
        public string productid { get; set; }
        public string qty_kgs { get; set; }
        public string recivedfilm { get; set; }
        public string Consumptionfilm { get; set; }
        public string Returnfilm { get; set; }
        public string wastagefilm { get; set; }
        public string cuttingfilm { get; set; }
        public string date { get; set; }
    }

    public class MilkDetails
    {
        public string dispdate { get; set; }
        public string plantname { get; set; }
        public string vehicleno { get; set; }
        public string dcno { get; set; }
        public string newdcNo { get; set; }
        public string mobno { get; set; }
        public string inwardno { get; set; }
        public string fatcalon { get; set; }
        public string qco { get; set; }
        public string remarks { get; set; }
        public string chemist { get; set; }
        public string btnvalue { get; set; }
        public string sno { get; set; }
        public string sourceid { get; set; }
        public string fromsourceid { get; set; }
        public string tosourceid { get; set; }
        public string salesType { get; set; }
        public string partydcno { get; set; }
        public string partytransno { get; set; }
        public string pdcno { get; set; }
        public string transportvalue { get; set; }
        public string date { get; set; }
        public string vehicleid { get; set; }
        public string vsno { get; set; }
        public string companycode { get; set; }
        public string vendorid { get; set; }
        public List<MilkfatDetails> MilkfatDetailsMilkarray { get; set; }
        public List<MilksaleDetails> MilksaleDetailsMilkarray { get; set; }
    }
    public class MilkfatDetails
    {
        public string milktype { get; set; }
        public string CellName { get; set; }
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string sno { get; set; }
        public string vsno { get; set; }
        public string productid { get; set; }
    }
    public class MilksaleDetails
    {
        public string milktype { get; set; }
        public string CellName { get; set; }
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
    }

    public class qualitytesting
    {
        public string dispdate { get; set; }
        public string plantname { get; set; }
        public string vehicleno { get; set; }
        public string dcno { get; set; }
        public string newdcNo { get; set; }
        public string mobno { get; set; }
        public string inwardno { get; set; }
        public string fatcalon { get; set; }
        public string qco { get; set; }
        public string remarks { get; set; }
        public string chemist { get; set; }
        public string btnvalue { get; set; }
        public string sno { get; set; }
        public string sourceid { get; set; }
        public string fromsourceid { get; set; }
        public string tosourceid { get; set; }
        public string salesType { get; set; }
        public string date { get; set; }
        public string partytransno { get; set; }
        public string pdcno { get; set; }
        public string sample { get; set; }
        public string creamtype { get; set; }
        public List<qualitytestingDetails> MilkqualityDetailsarray { get; set; }
        public List<siloqualitytestingDetails> MilksiloqualityDetailsarray { get; set; }
        public List<qualitytestingDetails> creamdetails { get; set; }
    }

    public class qualitytestingDetails
    {
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string temprature { get; set; }
    }
    public class siloqualitytestingDetails
    {
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string siloid { get; set; }
    }

    private void Send_milk_details_click(HttpContext context)
    {
        try
        {
            if (context.Session["branch_id"] != null)
            {
                string BranchID = context.Session["branch_id"].ToString();
                DateTime dtcurrentdate = SalesDBManager.GetTime(vdm.conn);
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                WebClient client = new WebClient();
                MilkDetails obj = js.Deserialize<MilkDetails>(title1);
                string MobNo = obj.mobno;
                string dispdate = obj.dispdate + "\r\n";
                string CCname = obj.plantname + "\r\n";
                string dcno = obj.dcno + "\r\n";
                string vehicleno = obj.vehicleno + "\r\n";
                string vendorid = obj.vendorid;
                string Cell1 = "";
                string Cell2 = "";
                string Cell3 = "";
                int i = 1;
                foreach (MilkfatDetails mf in obj.MilkfatDetailsMilkarray)
                {
                    string cell = mf.CellName + "\r\n";
                    string Qty = mf.Qtyltr + "\r\n";
                    string fat = mf.fat + "\r\n";
                    string snf = mf.snf + "\r\n";
                    string temp = mf.temp + "\r\n";
                    string acidity = mf.acidity + "\r\n";
                    string clr = mf.clr + "\r\n";
                    if (i == 1)
                    {
                        if (Qty == "\r\n")
                        {
                        }
                        else
                        {
                            Cell1 = "Cell ->" + cell + "Qty ->" + Qty + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                        }
                    }
                    if (i == 2)
                    {
                        if (Qty == "\r\n")
                        {
                        }
                        else
                        {
                            Cell2 = "Cell ->" + cell + "Qty ->" + Qty + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                        }
                    }
                    if (i == 3)
                    {
                        if (Qty == "\r\n")
                        {
                        }
                        else
                        {
                            Cell3 = "Cell ->" + cell + "Qty ->" + Qty + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                        }
                    }
                    i++;
                }
                string msg = "";
                if (MobNo.Length == 10)
                {
                    string ccdet = "Date->" + dispdate + "CC Name->" + CCname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                    string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                    string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                    //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                    //string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + MobNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                    // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();
                    msg = "Message sent successfully";


                    cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                    cmd.Parameters.Add("@venorid", vendorid);
                    DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                    string branchvendorid = "";
                    if (dtbvid.Rows.Count > 0)
                    {
                        branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                    }
                    cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                    cmd.Parameters.Add("@phoneno", MobNo);
                    DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                    string HRMS_EmpId = "";
                    if (dtmobid.Rows.Count > 0)
                    {
                        HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                    }
                    else
                    {
                        HRMS_EmpId = branchvendorid;
                    }
                    cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                    cmd.Parameters.Add("@empid", HRMS_EmpId);
                    cmd.Parameters.Add("@mainbranch", BranchID);
                    cmd.Parameters.Add("@branchid", branchvendorid);
                    cmd.Parameters.Add("@msg", totaldetails);
                    cmd.Parameters.Add("@mobileno", MobNo);
                    cmd.Parameters.Add("@doe", dtcurrentdate);
                    vdm.insert(cmd);
                }
                else
                {
                    msg = "Please enter 10 digit mob no";
                }
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class get_Vendor
    {
        public List<vendordetails> vendordetails { get; set; }
        public List<vendorsubdetails> vendorsubdetails { get; set; }
    }
    public class vendordetails
    {
        public string vendorcode { get; set; }
        public string vendorname { get; set; }
        public string latitude { get; set; }
        public string longitude { get; set; }
        public string addr { get; set; }
        public string email { get; set; }
        public string sapcode { get; set; }
        public string phoneno { get; set; }
        public string panno { get; set; }
        public string kms { get; set; }
        public string cell { get; set; }
        public string qtyltrs { get; set; }
        public string exptime { get; set; }
        public string Vendortype { get; set; }
        public string sno { get; set; }
        public string btnval { get; set; }
        public string branchtype { get; set; }
        public string ledgertype { get; set; }
        public string saleledgertype { get; set; }
        public string overhead { get; set; }
        public string distance { get; set; }
        public string transactionno { get; set; }
        public string vehicleno { get; set; }

        public string tallyoverheadsales { get; set; }
        public string ledgercodesales { get; set; }
        public string sapvendorcode { get; set; }
        public string purchaseoverheadcode { get; set; }
        public string salesohcode { get; set; }
        public string coustmername { get; set; }
        public string sapcoustmercode { get; set; }
        public string purchasetype { get; set; }
        public string transportvalue { get; set; }

        public string vendortypes { get; set; }
        public string totalqty { get; set; }

        public string pancardno { get; set; }
        public string gstnnumber { get; set; }
        public string registertype { get; set; }
        public string satatename { get; set; }
        public List<vendorsubdetails> Vendor_subarray { get; set; }
    }

    public class vendorsubdetails
    {
        public string sno { get; set; }
        public string ddltype { get; set; }
        public string Rateon { get; set; }
        public string CalculationOn { get; set; }
        public string RateOnCost { get; set; }
        public string OverHeadOn { get; set; }
        public string OverHeadCost { get; set; }
        public string MSTDSNF { get; set; }
        public string PSTDSNF { get; set; }
        public string SNFPlus { get; set; }
        public string MSNFPlusCost { get; set; }
        public string PSNFPlusCost { get; set; }
        public string TransportOn { get; set; }
        public string KmCost { get; set; }
        public string Transport { get; set; }
        public string Transportcost { get; set; }
        public string rank { get; set; }
        public string FATPlus { get; set; }
        public string MFATPlusCost { get; set; }
        public string PFATPlusCost { get; set; }
        public string MSTDFAT { get; set; }
        public string PSTDFAT { get; set; }
    }
    private void save_silo_operations_click(HttpContext context)
    {
        try
        {
            string FromSilo = context.Request["FromSilo"];
            string ToSilo = context.Request["ToSilo"];
            string qtykgs = context.Request["qtykgs"];
            string qtyltrs = context.Request["qtyltrs"];
            double costperltr = 0;
            double fat = 0;
            double snf = 0;
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            cmd = new SqlCommand("insert into  intra_silo_transactions (fromsiloid,tosiloid,qty_ltrs,qty_kgs,costperltr,fat,snf,branchid,operatedby) values(@fromsiloid,@tosiloid,@qty_ltrs,@qty_kgs,@costperltr,@fat,@snf,@branchid,@operatedby)");
            cmd.Parameters.Add("@fromsiloid", FromSilo);
            cmd.Parameters.Add("@tosiloid", ToSilo);
            cmd.Parameters.Add("@qty_kgs", qtykgs);
            cmd.Parameters.Add("@qty_ltrs", qtyltrs);
            cmd.Parameters.Add("@costperltr", costperltr);
            cmd.Parameters.Add("@fat", fat);
            cmd.Parameters.Add("@snf", snf);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@operatedby", UserID);
            vdm.insert(cmd);

            string msg = "Operations saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_edit_Vendor_click(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            vendordetails obj = js.Deserialize<vendordetails>(title1);
            string vendorcode = obj.vendorcode;
            string vendorname = obj.vendorname;
            string btnval = obj.btnval;
            string address = obj.addr;
            string email = obj.email;
            string phoneno = obj.phoneno;
            int kms = 0;
            int.TryParse(obj.kms, out kms);
            int exptime = 0;
            int.TryParse(obj.exptime, out exptime);
            string sno = obj.sno;
            string Vendortype = obj.Vendortype;
            string branchtype = obj.branchtype;
            string sapcode = obj.sapcode;
            string ledgertype = obj.ledgertype;
            string salesledgertype = obj.saleledgertype;
            string overhead = obj.overhead;

            string tallyoverheadsales = obj.tallyoverheadsales;
            string ledgercodesales = obj.ledgercodesales;
            string sapvendorcode = obj.sapvendorcode;
            string purchaseoverheadcode = obj.purchaseoverheadcode;
            string salesohcode = obj.salesohcode;
            string coustmername = obj.coustmername;
            string sapcoustmercode = obj.sapcoustmercode;

            string purchasetype = obj.purchasetype;
            string vendortypes = obj.vendortypes;

            string gstnnumber = obj.gstnnumber;
            string registertype = obj.registertype;
            string satatename = obj.satatename;

            string branchid = context.Session["Branch_ID"].ToString();
            string UserId = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);

            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into vendors ( vendorcode, vendorname,vendortype, email, mobno, doe, branchid,address,kms, expectedtime,branchtype, ledgertype, tallyoh, ledgertype1, sapcode, salesledgertype,salestallyoh, salesledgercode, sapvendorcode, purchaseohcode,  salesohcode, customername, sapcustomercode,purchasetype,type,gstinno, regtype, state) values (@vendorcode, @vendorname,@vendortype, @email, @mobno, @doe, @branchid,@address,@kms,@expectedtime,@branchtype, @ledgertype, @oh, @ledgertype1, @sapcode, @salesledgertype,@salestallyoh,@salesledgercode,@sapvendorcode,@purchaseohcode,@salesohcode,@customername,@sapcustomercode,@purchasetype,@type,@gstnnumber,@registertype,@satatename)");
                //salestallyoh, salesledgercode, sapvendorcode, purchaseohcode,  salesohcode, customername, sapcustomercode
                cmd.Parameters.Add("@vendorcode", vendorcode);
                cmd.Parameters.Add("@vendorname", vendorname);
                cmd.Parameters.Add("@vendortype", Vendortype);
                cmd.Parameters.Add("@email", email);
                cmd.Parameters.Add("@mobno", phoneno);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@kms", kms);
                cmd.Parameters.Add("@expectedtime", exptime);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@oh", overhead);
                cmd.Parameters.Add("@ledgertype", ledgertype);
                cmd.Parameters.Add("@salesledgertype", salesledgertype);
                cmd.Parameters.Add("@ledgertype1", overhead);
                cmd.Parameters.Add("@sapcode", sapcode);

                cmd.Parameters.Add("@salestallyoh", tallyoverheadsales);
                cmd.Parameters.Add("@salesledgercode", ledgercodesales);
                cmd.Parameters.Add("@sapvendorcode", sapvendorcode);
                cmd.Parameters.Add("@purchaseohcode", purchaseoverheadcode);
                cmd.Parameters.Add("@salesohcode", salesohcode);
                cmd.Parameters.Add("@customername", coustmername);
                cmd.Parameters.Add("@sapcustomercode", sapcoustmercode);
                cmd.Parameters.Add("@purchasetype", purchasetype);
                cmd.Parameters.Add("@type", vendortypes);

                cmd.Parameters.Add("@gstnnumber", gstnnumber);
                cmd.Parameters.Add("@registertype", registertype);
                cmd.Parameters.Add("@satatename", satatename);

                vdm.insert(cmd);
                cmd = new SqlCommand("Select  MAX(sno) as vendorrefno from vendors");
                DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                string RefNo = dtVendor.Rows[0]["vendorrefno"].ToString();
                foreach (vendorsubdetails o in obj.Vendor_subarray)
                {
                    if (o.ddltype != "" && o.ddltype != null)
                    {
                        cmd = new SqlCommand("insert into  vendor_subtable (vendor_refno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@vendor_refno, @milktype, @rate_on, @calc_on, @cost, @overheadon, @overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                        //cmd = new SqlCommand("insert into  vendor_subtable (vendor_refno, milktype, calc_on, cost, overheadon, overheadcost, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport) values (@vendor_refno, @milktype, @calc_on, @cost, @overheadon, @overheadcost, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport)");
                        cmd.Parameters.Add("@vendor_refno", RefNo);
                        cmd.Parameters.Add("@milktype", o.ddltype);
                        cmd.Parameters.Add("@rate_on", o.Rateon);
                        cmd.Parameters.Add("@calc_on", o.CalculationOn);
                        cmd.Parameters.Add("@cost", o.RateOnCost);
                        cmd.Parameters.Add("@overheadon", o.OverHeadOn);
                        float OverHeadCost = 0;
                        float.TryParse(o.OverHeadCost, out OverHeadCost);
                        cmd.Parameters.Add("@overheadcost", OverHeadCost);
                        float MSTDSNF = 0;
                        float.TryParse(o.MSTDSNF, out MSTDSNF);
                        cmd.Parameters.Add("@m_std_snf", MSTDSNF);
                        float PSTDSNF = 0;
                        float.TryParse(o.PSTDSNF, out PSTDSNF);
                        cmd.Parameters.Add("@p_std_snf", PSTDSNF);
                        cmd.Parameters.Add("@snfplus_on", o.SNFPlus);
                        float MSNFPlusCost = 0;
                        float.TryParse(o.MSNFPlusCost, out MSNFPlusCost);
                        cmd.Parameters.Add("@m_snfpluscost", MSNFPlusCost);
                        float PSNFPlusCost = 0;
                        float.TryParse(o.PSNFPlusCost, out PSNFPlusCost);
                        cmd.Parameters.Add("@p_snfpluscost", PSNFPlusCost);
                        cmd.Parameters.Add("@transport_on", o.TransportOn);
                        float KmCost = 0;
                        float.TryParse(o.KmCost, out KmCost);
                        cmd.Parameters.Add("@transportcost", KmCost);
                        cmd.Parameters.Add("@transport", o.Transport);
                        cmd.Parameters.Add("@fatplus_on", o.FATPlus);
                        float MFATPlusCost = 0;
                        float.TryParse(o.MSNFPlusCost, out MFATPlusCost);
                        cmd.Parameters.Add("@m_fatpluscost", MFATPlusCost);
                        float PFATPlusCost = 0;
                        float.TryParse(o.PSNFPlusCost, out PFATPlusCost);
                        cmd.Parameters.Add("@p_fatpluscost", PFATPlusCost);
                        cmd.Parameters.Add("@m_std_fat", o.MSTDFAT);
                        cmd.Parameters.Add("@p_std_fat", o.PSTDFAT);
                        vdm.insert(cmd);
                    }
                }
                string tin = "0";
                string cstno = "0";
                string mitno = "0";
                cmd = new SqlCommand("insert into  branch_info (branchname,address,branchtype,tinno,cstno,mitno,venorid) values (@branchname,@address,@branchtype,@tinno,@cstno,@mitno,@venorid)");
                cmd.Parameters.Add("@branchname", vendorname);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@branchtype", "CC");
                cmd.Parameters.Add("@tinno", tin);
                cmd.Parameters.Add("@cstno", cstno);
                cmd.Parameters.Add("@mitno", mitno);
                cmd.Parameters.Add("@venorid", RefNo);
                vdm.insert(cmd);
                cmd = new SqlCommand("Select  MAX(sno) as sno from branch_info");
                DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
                string BranchRefNo = dtbranch.Rows[0]["sno"].ToString();
                cmd = new SqlCommand("insert into branchmapping (subbranch, superbranch) values (@subbranch,@superbranch)");
                cmd.Parameters.Add("@subbranch", BranchRefNo);
                cmd.Parameters.Add("@superbranch", branchid);
                vdm.insert(cmd);
            }
            else
            {
                cmd = new SqlCommand("update vendors  set branchtype=@branchtype, kms=@kms,expectedtime=@expectedtime, vendorcode=@vendorcode, vendorname=@vendorname,vendortype=@vendortype, email=@email, mobno=@mobno, address=@address, ledgertype=@ledgertype, salesledgertype=@salesledgertype, tallyoh=@oh, ledgertype1=@ledgertype1, sapcode=@sapcode,salestallyoh=@salestallyoh, salesledgercode=@salesledgercode, sapvendorcode=@sapvendorcode, purchaseohcode=@purchaseohcode,  salesohcode=@salesohcode, customername=@customername, sapcustomercode=@sapcustomercode,purchasetype=@purchasetype,type=@type, gstinno=@gstnnumber,regtype=@registertype,state=@satatename where branchid=@branchid and sno=@sno");
                cmd.Parameters.Add("@vendorcode", vendorcode);
                cmd.Parameters.Add("@vendorname", vendorname);
                cmd.Parameters.Add("@vendortype", Vendortype);
                cmd.Parameters.Add("@email", email);
                cmd.Parameters.Add("@mobno", phoneno);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@kms", kms);
                cmd.Parameters.Add("@expectedtime", exptime);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@oh", overhead);
                cmd.Parameters.Add("@ledgertype", ledgertype);
                cmd.Parameters.Add("@salesledgertype", salesledgertype);
                cmd.Parameters.Add("@ledgertype1", overhead);
                cmd.Parameters.Add("@sapcode", sapcode);

                cmd.Parameters.Add("@salestallyoh", tallyoverheadsales);
                cmd.Parameters.Add("@salesledgercode", ledgercodesales);
                cmd.Parameters.Add("@sapvendorcode", sapvendorcode);
                cmd.Parameters.Add("@purchaseohcode", purchaseoverheadcode);
                cmd.Parameters.Add("@salesohcode", salesohcode);
                cmd.Parameters.Add("@customername", coustmername);
                cmd.Parameters.Add("@sapcustomercode", sapcoustmercode);
                cmd.Parameters.Add("@purchasetype", purchasetype);
                cmd.Parameters.Add("@type", vendortypes);

                cmd.Parameters.Add("@gstnnumber", gstnnumber);
                cmd.Parameters.Add("@registertype", registertype);
                cmd.Parameters.Add("@satatename", satatename);

                vdm.Update(cmd);
                cmd = new SqlCommand("Delete from   vendor_subtable where  vendor_refno=@vendor_refno");
                cmd.Parameters.Add("@vendor_refno", sno);
                vdm.Delete(cmd);
                foreach (vendorsubdetails o in obj.Vendor_subarray)
                {
                    if (o.ddltype != "" && o.ddltype != null)
                    {
                        cmd = new SqlCommand("insert into  vendor_subtable (vendor_refno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@vendor_refno, @milktype, @rate_on, @calc_on, @cost, @overheadon, @overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                        cmd.Parameters.Add("@vendor_refno", sno);
                        cmd.Parameters.Add("@milktype", o.ddltype);
                        cmd.Parameters.Add("@rate_on", o.Rateon);
                        cmd.Parameters.Add("@calc_on", o.CalculationOn);
                        cmd.Parameters.Add("@cost", o.RateOnCost);
                        cmd.Parameters.Add("@overheadon", o.OverHeadOn);
                        float OverHeadCost = 0;
                        float.TryParse(o.OverHeadCost, out OverHeadCost);
                        cmd.Parameters.Add("@overheadcost", OverHeadCost);
                        float MSTDSNF = 0;
                        float.TryParse(o.MSTDSNF, out MSTDSNF);
                        cmd.Parameters.Add("@m_std_snf", MSTDSNF);
                        float PSTDSNF = 0;
                        float.TryParse(o.PSTDSNF, out PSTDSNF);
                        cmd.Parameters.Add("@p_std_snf", PSTDSNF);
                        cmd.Parameters.Add("@snfplus_on", o.SNFPlus);
                        float MSNFPlusCost = 0;
                        float.TryParse(o.MSNFPlusCost, out MSNFPlusCost);
                        cmd.Parameters.Add("@m_snfpluscost", MSNFPlusCost);
                        float PSNFPlusCost = 0;
                        float.TryParse(o.PSNFPlusCost, out PSNFPlusCost);
                        cmd.Parameters.Add("@p_snfpluscost", PSNFPlusCost);
                        cmd.Parameters.Add("@transport_on", o.TransportOn);
                        float KmCost = 0;
                        float.TryParse(o.KmCost, out KmCost);
                        cmd.Parameters.Add("@transportcost", KmCost);
                        cmd.Parameters.Add("@transport", o.Transport);
                        cmd.Parameters.Add("@fatplus_on", o.FATPlus);
                        float MFATPlusCost = 0;
                        float.TryParse(o.MFATPlusCost, out MFATPlusCost);
                        cmd.Parameters.Add("@m_fatpluscost", MFATPlusCost);
                        float PFATPlusCost = 0;
                        float.TryParse(o.PFATPlusCost, out PFATPlusCost);
                        cmd.Parameters.Add("@p_fatpluscost", PFATPlusCost);
                        cmd.Parameters.Add("@m_std_fat", o.MSTDFAT);
                        cmd.Parameters.Add("@p_std_fat", o.PSTDFAT);
                        vdm.insert(cmd);
                    }
                }
            }
            string response = GetJson("Vendor Information Saved Successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class Departments
    {
        public string Name { get; set; }
        public string Code { get; set; }
        public string Sno { get; set; }
    }

    public class Silos
    {
        public string SiloName { get; set; }
        public string Capacity { get; set; }
        public string SiloId { get; set; }
        public string SiloDeportmentId { get; set; }
        public string DeportmentName { get; set; }
        public string Quantity { get; set; }

    }

    public class Dispathsubdetails
    {
        public string desprefno { get; set; }
        public string qtyltr { get; set; }
        public string qtykgs { get; set; }
        public string percentageon { get; set; }
        public string snf { get; set; }
        public string fat { get; set; }
        public string clr { get; set; }
        public string hs { get; set; }
        public string milktype { get; set; }
        public string branchId { get; set; }
        public string branchname { get; set; }
        public string cellname { get; set; }
        public string branchid { get; set; }
        public string alcohol { get; set; }
        public string temp { get; set; }
        public string cob1 { get; set; }
        public string phosps1 { get; set; }
        public string mbrt { get; set; }
        public string ot { get; set; }
        public string sealno { get; set; }
        public string hsncode { get; set; }
        public string rateon { get; set; }
        public string calucationon { get; set; }
        public string costs { get; set; }
        public string milkvalue { get; set; }
        public string dtogstcode { get; set; }
        public string dfromgstcode { get; set; }
        public string dfromcompanycode { get; set; }
        public string dtocompanycode { get; set; }

        public string kgfattsvalue { get; set; }
        public string ohcost { get; set; }
        public string MValue { get; set; }
        public string remarks { get; set; }
        public string difffatsnfcost { get; set; }
    }
    public class Dispathentrydetails
    {
        public string sno { get; set; }
        public string dcno { get; set; }
        public string ccid { get; set; }
        public string entryby { get; set; }
        public string vehicalno { get; set; }
        public string date { get; set; }
        public string Chemist { get; set; }
        public string Qco { get; set; }
        public string Remarks { get; set; }
        public string transtype { get; set; }
        public string transid { get; set; }
        public string sectionid { get; set; }
        public string kms { get; set; }
        public string expectedtime { get; set; }
        public string fromstate { get; set; }
        public string gstinno { get; set; }
        public string gststatecode { get; set; }
        public string desitnation { get; set; }
        public string address { get; set; }
        public string tostatename { get; set; }
        public string tovendorname { get; set; }
        public string togstnno { get; set; }
        public string togststatecode { get; set; }
        public string toaddress { get; set; }
        public string email { get; set; }
        public string mobno { get; set; }
        public string frmcompanycode { get; set; }
        public string tocompanycode { get; set; }
        public string companyname { get; set; }
        public string titlename { get; set; }
        public string dctime { get; set; }
        public string remarks { get; set; }
        public string salesinvoiceno { get; set; }
        public string jurisdiction { get; set; }
        public string invoiceno { get; set; }
        public string branchcode { get; set; }
        public List<Dispathsubdetails> Dispathsubdetails_subarray { get; set; }
    }
    public class get_DispathDetails
    {
        public List<Dispathentrydetails> Dispathentrydetails { get; set; }
        public List<Dispathsubdetails> Dispathsubdetails { get; set; }
    }

    public class get_milktransactiondetails
    {
        public List<milktransactiondetails> transactiondetails { get; set; }
        public List<milktransactionsubdetails> transactionsubdetails { get; set; }
    }

    public class milktransactionsubdetails
    {
        public string milktransactonno { get; set; }
        public string rateon { get; set; }
        public string calcon { get; set; }
        public string cost { get; set; }
        public string overhidden { get; set; }
        public string mstdsnf { get; set; }
        public string pstdsnf { get; set; }
        public string snfpluson { get; set; }
        public string snfpluscost { get; set; }
        public string transporton { get; set; }
        public string transportcost { get; set; }
        public string transport { get; set; }
        public string entryby { get; set; }
        public string msnfpluscost { get; set; }
        public string vendorname { get; set; }
        public string datetime { get; set; }
        public string sectionid { get; set; }
        public string qco { get; set; }
        public string remarks { get; set; }
        public string chemist { get; set; }
        public string vehicleno { get; set; }
        public string dcno { get; set; }
        public string inwardno { get; set; }
        public string partydcno { get; set; }
        public string doe { get; set; }
        public string transportvalue { get; set; }
    }
    public class milktransactiondetails
    {
        public string sno { get; set; }
        public string transid { get; set; }
        public string transtype { get; set; }

        public string qtyltr { get; set; }
        public string qtykgs { get; set; }
        public string perecentageon { get; set; }

        public string branchid { get; set; }
        public string operatedby { get; set; }
        public string cellno { get; set; }
        public string milktype { get; set; }
        public string CellName { get; set; }
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string dispdate { get; set; }
        public string plantname { get; set; }

        public string mobno { get; set; }

        public string fatcalon { get; set; }

        public string btnvalue { get; set; }

        public string sourceid { get; set; }
        public List<milktransactionsubdetails> milktransactionsubdetailsarray { get; set; }
    }


    private void Siloquantity_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT S.SiloId, S.SiloName, S.Capacity, SM.quantity FROM Silomaster S INNER JOIN silomonitar SM ON SM.siloid = S.SiloId WHERE SM.BranchId=@branchid");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Silos> Silolist = new List<Silos>();
            foreach (DataRow dr in routes.Rows)
            {
                Silos getsilo = new Silos();
                getsilo.SiloId = dr["SiloId"].ToString();
                string SiloName = dr["SiloName"].ToString();
                getsilo.SiloName = dr["SiloName"].ToString();
                string Capacity = dr["Capacity"].ToString();
                getsilo.Capacity = dr["Capacity"].ToString();
                string Quantity = dr["quantity"].ToString();
                getsilo.Quantity = dr["quantity"].ToString();
                string str = "capacity " + Capacity + "quantity is " + Quantity + ".";
                getsilo.DeportmentName = str;
                Silolist.Add(getsilo);
            }
            string response = GetJson(Silolist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_SiloDepartments_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT departmentid, departmentname FROM processingdepartments");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Silos> Silolist = new List<Silos>();
            foreach (DataRow dr in routes.Rows)
            {
                Silos getsilo = new Silos();
                getsilo.SiloDeportmentId = dr["departmentid"].ToString();
                getsilo.DeportmentName = dr["departmentname"].ToString();
                Silolist.Add(getsilo);
            }
            string response = GetJson(Silolist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Silo_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT SiloId, SiloName, Capacity FROM Silomaster WHERE branchid=@branchid");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Silos> Silolist = new List<Silos>();
            foreach (DataRow dr in routes.Rows)
            {
                Silos getsilo = new Silos();
                getsilo.SiloId = dr["SiloId"].ToString();
                getsilo.SiloName = dr["SiloName"].ToString();
                getsilo.Capacity = dr["Capacity"].ToString();
                Silolist.Add(getsilo);
            }
            string response = GetJson(Silolist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class biproduct
    {
        public string quantity { get; set; }
        public string productid { get; set; }
    }
    private void get_biproductob_details(HttpContext context)
    {
        string branchid = context.Session["Branch_ID"].ToString();
        string productname = context.Request["producttype"].ToString();
        //if (productname == "93")
        //{
        //    cmd = new SqlCommand("select quantity from productmonitar where productid='93' AND branchid=@branchid");
        //}
        //else
        //{
        cmd = new SqlCommand("select quantity from productmonitar where productid=@productname AND branchid=@branchid");
        //}
        cmd.Parameters.Add("@productname", productname);
        cmd.Parameters.Add("@branchid", branchid);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<biproduct> biproductlist = new List<biproduct>();
        foreach (DataRow dr in dtroutes.Rows)
        {
            biproduct getbiproduct = new biproduct();
            getbiproduct.quantity = dr["quantity"].ToString();
            biproductlist.Add(getbiproduct);
        }
        string response = GetJson(biproductlist);
        context.Response.Write(response);
    }
    private void get_processingdepartment_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT departmentid, departmentname FROM processingdepartments");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Silos> Silolist = new List<Silos>();
            foreach (DataRow dr in routes.Rows)
            {
                Silos getsilo = new Silos();
                getsilo.SiloDeportmentId = dr["departmentid"].ToString();
                getsilo.DeportmentName = dr["departmentname"].ToString();
                Silolist.Add(getsilo);
            }
            string response = GetJson(Silolist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Dept_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT sno, deptname, deptcode FROM processingdept");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Departments> Departmentslst = new List<Departments>();
            foreach (DataRow dr in routes.Rows)
            {
                Departments getroutes = new Departments();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.Name = dr["deptname"].ToString();
                getroutes.Code = dr["deptcode"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_InwordMilkTransaction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT de.sno, de.dc_no, de.cc_id, de.branchid, de.doe, de.entry_by, de.chemist, de.remarks, de.vehciecleno, de.qco, de.status, de.desp_time, de.trans_type, ds.desp_refno, ds.cellname, ds.milktype, ds.fat, ds.snf, ds.qty_ltr, ds.qty_kgs, ds.percentageon, ds.clr, ds.hs, ds.alcohol, ds.temp, ds.cob1, ds.phosps1, ds.mbrt, ds.ot, ds.sealno FROM despatch_entry AS de INNER JOIN despatch_sub AS ds ON de.sno = ds.desp_refno where (de.branchid=@BranchID) and (de.doe between @d1 and @d2)");
            cmd.Parameters.Add("@BranchID", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtDispathentrydetails = view.ToTable(true, "sno", "dc_no", "cc_id", "doe", "entry_by", "chemist", "remarks", "vehciecleno", "qco", "desp_time", "trans_type");
            DataTable dtDispathsubdetails_subdetails = view.ToTable(true, "desp_refno", "cellname", "milktype", "fat", "snf", "qty_ltr", "qty_kgs", "percentageon", "clr", "hs", "alcohol", "temp", "cob1", "phosps1", "mbrt", "ot", "sealno");
            List<get_DispathDetails> getDispathDetails = new List<get_DispathDetails>();
            List<Dispathentrydetails> Dispathentrydetails = new List<Dispathentrydetails>();
            List<Dispathsubdetails> Dispathsubdetails = new List<Dispathsubdetails>();
            foreach (DataRow dr in dtDispathentrydetails.Rows)
            {
                Dispathentrydetails dispentry = new Dispathentrydetails();
                dispentry.sno = dr["sno"].ToString();
                dispentry.dcno = dr["dc_no"].ToString();
                dispentry.ccid = dr["cc_id"].ToString();
                dispentry.date = dr["doe"].ToString();
                dispentry.entryby = dr["entry_by"].ToString();
                dispentry.Chemist = dr["chemist"].ToString();
                dispentry.Remarks = dr["remarks"].ToString();
                dispentry.vehicalno = dr["vehciecleno"].ToString();
                dispentry.Qco = dr["qco"].ToString();
                dispentry.transtype = dr["trans_type"].ToString();
                Dispathentrydetails.Add(dispentry);
            }
            foreach (DataRow dr in dtDispathsubdetails_subdetails.Rows)
            {
                Dispathsubdetails objdispsubdetails = new Dispathsubdetails();
                objdispsubdetails.desprefno = dr["desp_refno"].ToString();
                objdispsubdetails.cellname = dr["cellname"].ToString();
                objdispsubdetails.milktype = dr["milktype"].ToString();
                objdispsubdetails.fat = dr["fat"].ToString();
                objdispsubdetails.snf = dr["snf"].ToString();
                objdispsubdetails.qtyltr = dr["qty_ltr"].ToString();
                objdispsubdetails.qtykgs = dr["qty_kgs"].ToString();
                objdispsubdetails.percentageon = dr["percentageon"].ToString();
                objdispsubdetails.clr = dr["clr"].ToString();
                objdispsubdetails.hs = dr["hs"].ToString();
                objdispsubdetails.alcohol = dr["alcohol"].ToString();
                objdispsubdetails.temp = dr["temp"].ToString();
                objdispsubdetails.cob1 = dr["cob1"].ToString();
                objdispsubdetails.phosps1 = dr["phosps1"].ToString();
                objdispsubdetails.mbrt = dr["mbrt"].ToString();
                objdispsubdetails.ot = dr["ot"].ToString();
                objdispsubdetails.sealno = dr["sealno"].ToString();
                Dispathsubdetails.Add(objdispsubdetails);
            }
            get_DispathDetails get_DispathDetails = new get_DispathDetails();
            get_DispathDetails.Dispathentrydetails = Dispathentrydetails;
            get_DispathDetails.Dispathsubdetails = Dispathsubdetails;
            getDispathDetails.Add(get_DispathDetails);
            string response = GetJson(getDispathDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public class Employees
    {
        public string EmpName { get; set; }
        public string UserName { get; set; }
        public string Passward { get; set; }
        public string Deptsno { get; set; }
        public string Sno { get; set; }
        public string branchid { get; set; }
        public string leveltype { get; set; }
        public string deptname { get; set; }
        public string branchname { get; set; }
    }

    public class Vendors
    {
        public string VendorCode { get; set; }
        public string Sno { get; set; }
        public string vendorname { get; set; }
        public string email { get; set; }
        public string mobno { get; set; }
        public string panno { get; set; }
        public string address { get; set; }
    }
    private void get_Clients_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, email, mobno, panno, doe, branchid, address FROM vendors where (vendortype<>'Vendor')");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<vendordetails> Departmentslst = new List<vendordetails>();
            foreach (DataRow dr in routes.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.email = dr["email"].ToString();
                getroutes.phoneno = dr["mobno"].ToString();
                getroutes.panno = dr["panno"].ToString();
                getroutes.addr = dr["address"].ToString();
                Departmentslst.Add(getroutes);
            }

            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Client_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT    vendors.sno, vendors.vendorcode, vendors.vendorname, vendors.email, vendors.mobno, vendors.panno, vendors.doe, vendors.kms, vendors.expectedtime,vendors.branchid, vendors.address, vendor_subtable.sno AS vendor_sub_sno, vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on,  vendor_subtable.cost, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf,  vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, branch_info.sno AS Expr1,  branchmapping.superbranch FROM  vendors INNER JOIN branch_info ON vendors.sno = branch_info.venorid INNER JOIN branchmapping ON branch_info.sno = branchmapping.subbranch LEFT OUTER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendors.vendortype <> 'Vendor') AND (branchmapping.superbranch = @branchid)");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtVendor = view.ToTable(true, "sno", "vendorcode", "vendorname", "email", "mobno", "panno", "address", "kms", "expectedtime");
            DataTable dtvendor_subdetails = view.ToTable(true, "sno", "milktype", "rate_on", "calc_on", "cost", "overheadon", "overheadcost", "m_std_snf", "p_std_snf", "snfplus_on", "m_snfpluscost", "p_snfpluscost", "transport_on");
            List<get_Vendor> vendordetails = new List<get_Vendor>();
            List<vendordetails> vendorlst = new List<vendordetails>();
            List<vendorsubdetails> vendor_sublst = new List<vendorsubdetails>();
            foreach (DataRow dr in dtVendor.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.email = dr["email"].ToString();
                getroutes.phoneno = dr["mobno"].ToString();
                getroutes.kms = dr["kms"].ToString();
                getroutes.exptime = dr["expectedtime"].ToString();
                getroutes.addr = dr["address"].ToString();
                vendorlst.Add(getroutes);
            }
            foreach (DataRow dr in dtvendor_subdetails.Rows)
            {
                vendorsubdetails getroutes = new vendorsubdetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.ddltype = dr["milktype"].ToString();
                getroutes.Rateon = dr["rate_on"].ToString();
                getroutes.CalculationOn = dr["calc_on"].ToString();
                getroutes.RateOnCost = dr["cost"].ToString();
                getroutes.OverHeadOn = dr["overheadon"].ToString();
                getroutes.OverHeadCost = dr["overheadcost"].ToString();
                getroutes.MSTDSNF = dr["m_std_snf"].ToString();
                getroutes.PSTDSNF = dr["p_std_snf"].ToString();
                getroutes.SNFPlus = dr["snfplus_on"].ToString();
                getroutes.MSNFPlusCost = dr["m_snfpluscost"].ToString();
                getroutes.PSNFPlusCost = dr["p_snfpluscost"].ToString();
                getroutes.Transport = dr["transport_on"].ToString();
                vendor_sublst.Add(getroutes);
            }
            get_Vendor get_vendors = new get_Vendor();
            get_vendors.vendordetails = vendorlst;
            get_vendors.vendorsubdetails = vendor_sublst;
            vendordetails.Add(get_vendors);
            string response = GetJson(vendordetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_direct_sale_Vendor_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  vendors.sno, branch_info.venorid, vendors.vendortype, vendors.vendorcode, vendors.vendorname, vendors.email, vendors.kms, vendors.expectedtime, vendors.mobno, vendors.panno, vendors.doe, vendors.branchid, vendors.address, vendor_subtable.sno AS vendor_sub_sno, vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, branchmapping.superbranch FROM  branchmapping INNER JOIN branch_info ON branchmapping.subbranch = branch_info.sno INNER JOIN vendors ON branch_info.venorid = vendors.sno LEFT OUTER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (branchmapping.superbranch = @branchid)");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtVendor = view.ToTable(true, "sno", "vendorcode", "vendorname", "email", "mobno", "panno", "address", "kms", "expectedtime", "vendortype");
            DataTable dtvendor_subdetails = view.ToTable(true, "sno", "milktype", "rate_on", "calc_on", "cost", "overheadon", "overheadcost", "m_std_snf", "p_std_snf", "snfplus_on", "m_snfpluscost", "p_snfpluscost", "transport_on");
            List<get_Vendor> vendordetails = new List<get_Vendor>();
            List<vendordetails> vendorlst = new List<vendordetails>();
            List<vendorsubdetails> vendor_sublst = new List<vendorsubdetails>();
            foreach (DataRow dr in dtVendor.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.email = dr["email"].ToString();
                getroutes.phoneno = dr["mobno"].ToString();
                getroutes.kms = dr["kms"].ToString();
                getroutes.exptime = dr["expectedtime"].ToString();
                getroutes.addr = dr["address"].ToString();
                getroutes.Vendortype = dr["Vendortype"].ToString();
                vendorlst.Add(getroutes);
            }
            foreach (DataRow dr in dtvendor_subdetails.Rows)
            {
                vendorsubdetails getroutes = new vendorsubdetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.ddltype = dr["milktype"].ToString();
                getroutes.Rateon = dr["rate_on"].ToString();
                getroutes.CalculationOn = dr["calc_on"].ToString();
                getroutes.RateOnCost = dr["cost"].ToString();
                getroutes.OverHeadOn = dr["overheadon"].ToString();
                getroutes.OverHeadCost = dr["overheadcost"].ToString();
                getroutes.MSTDSNF = dr["m_std_snf"].ToString();
                getroutes.PSTDSNF = dr["p_std_snf"].ToString();
                getroutes.SNFPlus = dr["snfplus_on"].ToString();
                getroutes.MSNFPlusCost = dr["m_snfpluscost"].ToString();
                getroutes.PSNFPlusCost = dr["p_snfpluscost"].ToString();
                getroutes.Transport = dr["transport_on"].ToString();
                vendor_sublst.Add(getroutes);
            }
            get_Vendor get_vendors = new get_Vendor();
            get_vendors.vendordetails = vendorlst;
            get_vendors.vendorsubdetails = vendor_sublst;
            vendordetails.Add(get_vendors);
            string response = GetJson(vendordetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Vendor_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  vendors.sno, vendors.branchtype, vendors.vendortype, vendors.vendorcode, vendors.vendorname, vendors.email, vendors.kms, vendors.expectedtime, vendors.mobno, vendors.sapcode, vendors.salesledgertype, vendors.panno, vendors.doe, vendors.branchid, vendors.address, vendors.type, vendor_subtable.sno AS vendor_sub_sno, vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transportcost, vendor_subtable.transport, vendor_subtable.fatplus_on, vendor_subtable.m_fatpluscost, vendor_subtable.p_fatpluscost, vendor_subtable.m_std_fat, vendor_subtable.p_std_fat, vendors.tallyoh, vendors.ledgertype, vendors.ledgertype1, vendors.salestallyoh, vendors.salesledgercode, vendors.sapvendorcode, vendors.purchaseohcode,  vendors.salesohcode, vendors.customername, vendors.sapcustomercode, vendors.purchasetype, branchmapping.superbranch, vendors.gstinno, vendors.regtype, vendors.state FROM   vendors INNER JOIN branch_info ON vendors.sno = branch_info.venorid INNER JOIN branchmapping ON branch_info.sno = branchmapping.subbranch LEFT OUTER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (branchmapping.superbranch = @branchid)");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            //vendors.pancardno, vendors.gstnnumber, vendors.registertype, vendors.satatename
            DataTable dtVendor = view.ToTable(true, "sno", "branchtype", "vendortype", "vendorcode", "vendorname", "email", "mobno", "panno", "address", "kms", "expectedtime", "tallyoh", "ledgertype", "sapcode", "salesledgertype", "salestallyoh", "salesledgercode", "sapvendorcode", "purchaseohcode", "salesohcode", "customername", "sapcustomercode", "purchasetype", "type", "gstinno", "regtype", "state");
            DataTable dtvendor_subdetails = view.ToTable(true, "sno", "milktype", "rate_on", "calc_on", "cost", "overheadon", "overheadcost", "m_std_snf", "p_std_snf", "snfplus_on", "m_snfpluscost", "p_snfpluscost", "transport_on", "transportcost", "transport", "fatplus_on", "m_fatpluscost", "p_fatpluscost", "m_std_fat", "p_std_fat");
            List<get_Vendor> vendordetails = new List<get_Vendor>();
            List<vendordetails> vendorlst = new List<vendordetails>();
            List<vendorsubdetails> vendor_sublst = new List<vendorsubdetails>();
            foreach (DataRow dr in dtVendor.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.email = dr["email"].ToString();
                getroutes.phoneno = dr["mobno"].ToString();
                getroutes.kms = dr["kms"].ToString();
                getroutes.exptime = dr["expectedtime"].ToString();
                getroutes.addr = dr["address"].ToString();
                getroutes.branchtype = dr["branchtype"].ToString();
                getroutes.Vendortype = dr["vendortype"].ToString();
                getroutes.overhead = dr["tallyoh"].ToString();
                getroutes.ledgertype = dr["ledgertype"].ToString();
                getroutes.saleledgertype = dr["salesledgertype"].ToString();
                getroutes.sapcode = dr["sapcode"].ToString();
                getroutes.tallyoverheadsales = dr["salestallyoh"].ToString();
                getroutes.ledgercodesales = dr["salesledgercode"].ToString();
                getroutes.sapvendorcode = dr["sapvendorcode"].ToString();
                getroutes.purchaseoverheadcode = dr["purchaseohcode"].ToString();
                getroutes.salesohcode = dr["salesohcode"].ToString();
                getroutes.coustmername = dr["customername"].ToString();
                getroutes.sapcoustmercode = dr["sapcustomercode"].ToString();
                getroutes.purchasetype = dr["purchasetype"].ToString();
                getroutes.vendortypes = dr["type"].ToString();

                getroutes.gstnnumber = dr["gstinno"].ToString();
                getroutes.registertype = dr["regtype"].ToString();
                getroutes.satatename = dr["state"].ToString();

                vendorlst.Add(getroutes);
            }
            foreach (DataRow dr in dtvendor_subdetails.Rows)
            {
                vendorsubdetails getroutes = new vendorsubdetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.ddltype = dr["milktype"].ToString();
                getroutes.Rateon = dr["rate_on"].ToString();
                getroutes.CalculationOn = dr["calc_on"].ToString();
                getroutes.RateOnCost = dr["cost"].ToString();
                getroutes.OverHeadOn = dr["overheadon"].ToString();
                getroutes.OverHeadCost = dr["overheadcost"].ToString();
                getroutes.MSTDSNF = dr["m_std_snf"].ToString();
                getroutes.PSTDSNF = dr["p_std_snf"].ToString();
                getroutes.SNFPlus = dr["snfplus_on"].ToString();
                double m_snfpluscost = 0;
                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                m_snfpluscost = Math.Round(m_snfpluscost, 2);
                getroutes.MSNFPlusCost = m_snfpluscost.ToString();
                double p_snfpluscost = 0;
                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                p_snfpluscost = Math.Round(p_snfpluscost, 2);
                getroutes.PSNFPlusCost = p_snfpluscost.ToString();
                getroutes.TransportOn = dr["transport_on"].ToString();
                getroutes.Transportcost = dr["transportcost"].ToString();
                getroutes.Transport = dr["transport"].ToString();
                getroutes.FATPlus = dr["fatplus_on"].ToString();
                double m_fatpluscost = 0;
                double.TryParse(dr["m_fatpluscost"].ToString(), out m_fatpluscost);
                m_fatpluscost = Math.Round(m_fatpluscost, 2);
                getroutes.MFATPlusCost = m_fatpluscost.ToString();
                double p_fatpluscost = 0;
                double.TryParse(dr["p_fatpluscost"].ToString(), out p_fatpluscost);
                p_fatpluscost = Math.Round(p_fatpluscost, 2);
                getroutes.PFATPlusCost = p_fatpluscost.ToString();
                getroutes.MSTDFAT = dr["m_std_fat"].ToString();
                getroutes.PSTDFAT = dr["p_std_fat"].ToString();
                vendor_sublst.Add(getroutes);
            }
            get_Vendor get_vendors = new get_Vendor();
            get_vendors.vendordetails = vendorlst;
            get_vendors.vendorsubdetails = vendor_sublst;
            vendordetails.Add(get_vendors);
            string response = GetJson(vendordetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_vendor_distancedetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, shortname, latitude, longitude, email, mobno, panno, doe, branchid, address FROM vendors");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<vendordetails> Departmentslst = new List<vendordetails>();
            foreach (DataRow dr in routes.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                string vendor = dr["shortname"].ToString();
                string latitude = dr["latitude"].ToString();
                if (latitude == "")
                {
                }
                else
                {
                    getroutes.vendorname = vendor;
                    getroutes.email = dr["email"].ToString();
                    getroutes.phoneno = dr["mobno"].ToString();
                    getroutes.panno = dr["panno"].ToString();
                    getroutes.addr = dr["address"].ToString();
                    getroutes.latitude = dr["latitude"].ToString();
                    getroutes.longitude = dr["longitude"].ToString();
                    Departmentslst.Add(getroutes);
                }
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_vendor_latlongdetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string location = context.Request["location"].ToString();
            cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, shortname, latitude, longitude, email, mobno, panno, doe, branchid, address FROM vendors where sno=@sno");
            cmd.Parameters.Add("@sno", location);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<vendordetails> Departmentslst = new List<vendordetails>();
            foreach (DataRow dr in routes.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                string vendor = dr["shortname"].ToString();
                if (vendor == "")
                {
                }
                else
                {
                    getroutes.vendorname = vendor;
                    getroutes.email = dr["email"].ToString();
                    getroutes.phoneno = dr["mobno"].ToString();
                    getroutes.panno = dr["panno"].ToString();
                    getroutes.addr = dr["address"].ToString();
                    getroutes.latitude = dr["latitude"].ToString();
                    getroutes.longitude = dr["longitude"].ToString();
                    Departmentslst.Add(getroutes);
                }
            }

            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_vendor_shortcodedetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        cmd = new SqlCommand("SELECT vendors.sno,vendors.branchtype, vendors.vendortype, vendors.shortname, vendors.latitude,vendors.longitude,vendors.vendorcode, vendors.vendorname, vendors.email,vendors.kms,vendors.expectedtime, vendors.mobno, vendors.panno, vendors.doe, vendors.branchid, vendors.address, vendor_subtable.sno AS vendor_sub_sno, vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon, vendor_subtable.overheadcost, vendor_subtable.m_std_snf, vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost, vendor_subtable.p_snfpluscost, vendor_subtable.transport_on,vendor_subtable.transportcost,vendor_subtable.transport,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM vendors LEFT OUTER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno ");
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<vendordetails> Departmentslst = new List<vendordetails>();
        if (dtroutes.Rows.Count > 0)
        {
            foreach (DataRow dr in dtroutes.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                //getroutes.vendorname = dr["vendorname"].ToString();
                string vendor = dr["shortname"].ToString();
                if (vendor == "")
                {
                }
                else
                {
                    getroutes.vendorname = vendor;
                    getroutes.email = dr["email"].ToString();
                    getroutes.phoneno = dr["mobno"].ToString();
                    getroutes.kms = dr["kms"].ToString();
                    getroutes.exptime = dr["expectedtime"].ToString();
                    getroutes.addr = dr["address"].ToString();
                    getroutes.branchtype = dr["branchtype"].ToString();
                    getroutes.Vendortype = dr["vendortype"].ToString();
                    getroutes.latitude = dr["latitude"].ToString();
                    getroutes.longitude = dr["longitude"].ToString();
                    Departmentslst.Add(getroutes);
                }
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
    }

    public class SiloMonitar
    {
        public string sno { get; set; }
        public string SiloId { get; set; }
        public string SiloName { get; set; }
        public string branchname { get; set; }
        public string BranchId { get; set; }
        public string Quantity { get; set; }
        public string Deportment { get; set; }
        public string OutwordQuantitykgs { get; set; }
        public string stocktransfor { get; set; }
        public string OutwordQuantityltrs { get; set; }
        public string CellName { get; set; }
        public string DCNo { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string transno { get; set; }
        public string departmentid { get; set; }
        public string remaining { get; set; }
        public string productid { get; set; }
        public string ltrsnf { get; set; }
        public string ltrfat { get; set; }
        public string doe { get; set; }
        public string otherpartyname { get; set; }
        public string hs { get; set; }
        public string alcohol { get; set; }
        public string ob { get; set; }
        public string cb { get; set; }
        public string recivedqty { get; set; }
        public string batchname { get; set; }
        public string datetime { get; set; }
        public string batchid { get; set; }
        public string batch { get; set; }
    }

    public class SiloTransactions
    {
        public string FromSiloId { get; set; }
        public string ToSiloId { get; set; }
        public string SiloName { get; set; }
        public string branchname { get; set; }
        public string BranchId { get; set; }
        public string QuantityKgs { get; set; }
        public string Quantityltrs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string CostForLtr { get; set; }
        public string CreatedBy { get; set; }
    }
    private void get_vendor_autodetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, email, mobno, panno, doe, branchid, address FROM vendors WHERE branchid=@branchid");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<vendordetails> Departmentslst = new List<vendordetails>();
            foreach (DataRow dr in routes.Rows)
            {
                vendordetails getroutes = new vendordetails();
                getroutes.sno = dr["sno"].ToString();
                getroutes.vendorcode = dr["vendorcode"].ToString();
                getroutes.vendorname = dr["vendorname"].ToString();
                getroutes.email = dr["email"].ToString();
                getroutes.phoneno = dr["mobno"].ToString();
                getroutes.panno = dr["panno"].ToString();
                getroutes.addr = dr["address"].ToString();
                Departmentslst.Add(getroutes);
            }

            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class Branches
    {
        public string branchName { get; set; }
        public string address { get; set; }
        public string type { get; set; }
        public string tin { get; set; }
        public string cstno { get; set; }
        public string mitno { get; set; }
        public string branchcode { get; set; }
        public string Sno { get; set; }
        public string sapcodebranch { get; set; }
        public string SubCatName { get; set; }
        public string Qty { get; set; }
        public string sno { get; set; }
        public string productname { get; set; }
        public string quantity { get; set; }
    }
    private void get_Branch_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT branch_info.sno, branch_info.branchname, branch_info.address,branch_info.whcode, branch_info.branchtype, branch_info.tinno, branch_info.cstno, branch_info.mitno, branch_info.branchcode FROM branch_info LEFT JOIN branchmapping ON branchmapping.subbranch = branch_info.sno WHERE branchmapping.superbranch=@branchid");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Branches> Departmentslst = new List<Branches>();
            foreach (DataRow dr in routes.Rows)
            {
                Branches getroutes = new Branches();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.branchName = dr["branchname"].ToString();
                getroutes.address = dr["address"].ToString();
                getroutes.type = dr["branchtype"].ToString();
                getroutes.tin = dr["tinno"].ToString();
                getroutes.cstno = dr["cstno"].ToString();
                getroutes.mitno = dr["mitno"].ToString();
                getroutes.branchcode = dr["branchcode"].ToString();
                getroutes.sapcodebranch = dr["whcode"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Branch1_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchtype = context.Request["branchtype"];
            if (branchtype == "Inter Branches")
            {
                cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, email, mobno, panno, doe, branchid, address FROM vendors where branchtype='Inter Branch'");
            }
            else
            {
                cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, email, mobno, panno, doe, branchid, address FROM vendors where branchtype='Other Branch'");
            }
            cmd.Parameters.Add("@branchtype", branchtype);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Branches> Departmentslst = new List<Branches>();
            foreach (DataRow dr in routes.Rows)
            {
                Branches getroutes = new Branches();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.branchName = dr["vendorname"].ToString();
                getroutes.address = dr["mobno"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_intratransactions_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT is.SiloId, S.SiloName, bi.branchname, bi.BranchId, is.Quantity FROM intrasilotransaction is INNER JOIN SiloMaster S on S.SiloId = SM.SiloId inner join branch_info bi on bi.sno = SM.BranchId");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.SiloId = dr["SiloId"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitar.branchname = dr["branchname"].ToString();
                SiloMonitar.BranchId = dr["BranchId"].ToString();
                SiloMonitar.Quantity = dr["Quantity"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_inword_silo_transactions_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT is.siloid, S.SiloName, bi.branchname, bi.branchid, is.quantity FROM intrasilotransaction is INNER JOIN SiloMaster S on S.SiloId = SM.SiloId inner join branch_info bi on bi.sno = SM.BranchId");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.SiloId = dr["SiloId"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitar.branchname = dr["branchname"].ToString();
                SiloMonitar.BranchId = dr["BranchId"].ToString();
                SiloMonitar.Quantity = dr["Quantity"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Silomonitor_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT SM.SiloId, S.SiloName, bi.branchname, SM.BranchId, SM.Quantity FROM SiloMonitar SM INNER JOIN SiloMaster S on S.SiloId = SM.SiloId inner join branch_info bi on bi.sno = SM.BranchId WHERE SM.Branchid=@branchid");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.sno = i++.ToString();
                SiloMonitar.SiloId = dr["SiloId"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitar.branchname = dr["branchname"].ToString();
                SiloMonitar.BranchId = dr["BranchId"].ToString();
                SiloMonitar.Quantity = dr["Quantity"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Emp_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT employee_erp.sno, employee_erp.empname, employee_erp.deptid, employee_erp.branchid, employee_erp.leveltype, employee_erp.username, employee_erp.passward, branch_info.branchname, processingdept.deptname FROM  employee_erp INNER JOIN branch_info ON employee_erp.branchid = branch_info.sno INNER JOIN branchmapping ON branchmapping.subbranch = branch_info.sno INNER JOIN processingdept ON employee_erp.deptid = processingdept.sno WHERE    (branchmapping.superbranch = @branchid)");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Employees> Departmentslst = new List<Employees>();
            foreach (DataRow dr in routes.Rows)
            {
                Employees getroutes = new Employees();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.EmpName = dr["empname"].ToString();
                getroutes.Deptsno = dr["deptid"].ToString();
                getroutes.UserName = dr["username"].ToString();
                getroutes.Passward = dr["passward"].ToString();
                getroutes.branchid = dr["branchid"].ToString();
                getroutes.branchname = dr["branchname"].ToString();
                getroutes.deptname = dr["deptname"].ToString();
                getroutes.leveltype = dr["leveltype"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void for_save_Silointratransaction(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string FromSiloId = context.Request["FromSiloId"];
            string ToSiloId = context.Request["ToSiloId"];
            string smp = context.Request["smp"];
            if (smp == "")
            {
                smp = "0";
            }
            double Quantitykgs = 0;
            double.TryParse(context.Request["Quantitykgs"], out Quantitykgs);
            double Quantityltrs = 0;
            double.TryParse(context.Request["Quantityltrs"], out Quantityltrs);
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string costltrs = context.Request["costltrs"];
            string batchid = context.Request["batchid"];
            string puposetype = context.Request["purposetype"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string enterby = context.Session["Employ_Sno"].ToString();
            string istdate = context.Request["istdate"];
            DateTime distdate = Convert.ToDateTime(istdate);
            DateTime dtcurrentdate = SalesDBManager.GetTime(vdm.conn);

            if (btnval == "Save")
            {

                cmd = new SqlCommand("insert into intra_silo_transactions (fromsiloid,tosiloid,qty_ltrs,qty_kgs,costperltr, fat,snf, clr, branchid, operatedby,doe, smp) values (@FromSiloId,@ToSiloId,@Quantityltrs,@Quantitykgs,@costltrs,@fat,@snf,@clr,@branchid,@enterby,@doe,@smp)");
                cmd.Parameters.Add("@FromSiloId", FromSiloId);
                cmd.Parameters.Add("@ToSiloId", ToSiloId);
                cmd.Parameters.Add("@Quantitykgs", Quantitykgs);
                cmd.Parameters.Add("@Quantityltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@costltrs", costltrs);
                cmd.Parameters.Add("@purposetype", puposetype);
                cmd.Parameters.Add("@batchid", batchid);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                cmd.Parameters.Add("@doe", distdate);
                cmd.Parameters.Add("@smp", smp);
                vdm.insert(cmd);
                if (batchid != "")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (batchid, fat, snf, clr, qty_kgs, qty_ltrs, type, fromsiloid, tosiloid, doe, branchid, perltrrate, smp) values (@batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs,@type,@source, @destinationsilo,@doe, @branchid, @perltrrate, @bsmp)");
                    cmd.Parameters.Add("@batchtype", batchid);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Quantitykgs);
                    cmd.Parameters.Add("@Qtyltrs", Quantityltrs);
                    cmd.Parameters.Add("@type", "From SILO");
                    cmd.Parameters.Add("@source", FromSiloId);
                    cmd.Parameters.Add("@destinationsilo", ToSiloId);
                    cmd.Parameters.Add("@doe", distdate);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@perltrrate", costltrs);
                    cmd.Parameters.Add("@bsmp", smp);
                    vdm.insert(cmd);
                }
                cmd = new SqlCommand("update silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchid=@branchid");
                cmd.Parameters.Add("@Quantity", Quantityltrs);
                cmd.Parameters.Add("@SiloId", FromSiloId);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);
                cmd = new SqlCommand("update silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchid=@branchid");
                cmd.Parameters.Add("@Quantity", Quantityltrs);
                cmd.Parameters.Add("@SiloId", ToSiloId);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);
                string msg = "Intra Silo Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("SELECT qty_ltrs, branchid FROM  intra_silo_transactions WHERE  (sno = @sno) AND (branchid = @branchid)");
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@branchid", branchid);
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                double pqty = Convert.ToDouble(dt.Rows[0]["qty_ltrs"].ToString());

                cmd = new SqlCommand("update intra_silo_transactions set fromsiloid=@fromsiloid,tosiloid=@tosiloid,qty_ltrs=@qty_ltrs,qty_kgs=@qty_kgs,costperltr=@costperltr, fat=@fat,snf=@snf, clr=@clr,doe=@doe, smp=@smp Where  branchid=@branchid AND sno=@sno");
                cmd.Parameters.Add("@fromsiloid", FromSiloId);
                cmd.Parameters.Add("@tosiloid", ToSiloId);
                cmd.Parameters.Add("@qty_kgs", Quantitykgs);
                cmd.Parameters.Add("@qty_ltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@costperltr", costltrs);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@doe", distdate);
                cmd.Parameters.Add("@smp", smp);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                double dQuantityltrs = Convert.ToDouble(Quantityltrs);
                if (branchid == "26" || branchid == "115")
                {
                    if (pqty > dQuantityltrs)
                    {
                        double qty = pqty - dQuantityltrs;
                        cmd = new SqlCommand("update silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchid=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", FromSiloId);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("update silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchid=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", ToSiloId);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        double qty = dQuantityltrs - pqty;
                        cmd = new SqlCommand("update silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchid=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", FromSiloId);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("update silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchid=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", ToSiloId);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                string msg = "Intra Silo Transaction Updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void for_save_Silomonitor(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string SiloId = context.Request["SiloId"];
            double Quantity = 0;
            double.TryParse(context.Request["Quantity"], out Quantity);
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into silomonitar (siloid, quantity, branchid) values (@SiloId, @Quantity,@branchid)");
                cmd.Parameters.Add("@SiloId", SiloId);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@Quantity", Quantity);
                vdm.insert(cmd);
                string msg = "Silo inserted successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("update silomonitar set quantity=@Quantity where  siloid=@SiloId AND branchid=@branchid");
                cmd.Parameters.Add("@SiloId", SiloId);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@Quantity", Quantity);
                vdm.Update(cmd);
                string msg = "Silo updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void for_save_edit_Employee_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string Empname = context.Request["Empname"];
            string Deptsno = context.Request["Deptsno"];
            string UserName = context.Request["UserName"];
            string passward = context.Request["passward"];
            string branchid = context.Request["branchid"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            //string branchid = context.Session["Branch_ID"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into employee_erp (empname, deptid,username,passward, branchid, createddate) values (@empname, @deptid,@username,@passward,@branchid,@createddate)");
                cmd.Parameters.Add("@empname", Empname);
                cmd.Parameters.Add("@deptid", Deptsno);
                cmd.Parameters.Add("@username", UserName);
                cmd.Parameters.Add("@passward", passward);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@createddate", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update employee_erp set empname=@empname, deptid=@deptid,username=@username,passward=@passward where sno=@sno and branchid=@branchid");
                cmd.Parameters.Add("@empname", Empname);
                cmd.Parameters.Add("@deptid", Deptsno);
                cmd.Parameters.Add("@username", UserName);
                cmd.Parameters.Add("@passward", passward);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void for_save_edit_Dept_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string code = context.Request["code"];
            string name = context.Request["name"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into processingdept (deptcode, deptname) values (@deptcode, @deptname)");
                cmd.Parameters.Add("@deptcode", code);
                cmd.Parameters.Add("@deptname", name);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update processingdept set deptcode=@deptcode, deptname=@deptname where sno=@sno");
                cmd.Parameters.Add("@deptcode", code);
                cmd.Parameters.Add("@deptname", name);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void for_save_edit_Silo_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string Silo = context.Request["Silo"];
            string capacity = context.Request["capacity"];
            string SiloId = context.Request["SiloId"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into Silomaster (SiloName, Capacity, branchid) values (@SiloName, @Capacity, @branchid)");
                cmd.Parameters.Add("@SiloName", Silo);
                cmd.Parameters.Add("@Capacity", capacity);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update Silomaster set SiloName=@SiloName, Capacity=@Capacity where SiloId=@SiloId AND branchid=@branchid");
                cmd.Parameters.Add("@SiloName", Silo);
                cmd.Parameters.Add("@Capacity", capacity);
                cmd.Parameters.Add("@SiloId", SiloId);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void for_save_edit_pdepartment_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string pdepartment = context.Request["pdepartment"];
            string pdepartmentId = context.Request["pdepartmentId"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into processingdepartments (departmentName, branchid) values (@DeportmentName, @branchid)");
                cmd.Parameters.Add("@DeportmentName", pdepartment);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update processingdepartments set departmentName=@DeportmentName where departmentId=@departmentId");
                cmd.Parameters.Add("@DeportmentName", pdepartment);
                cmd.Parameters.Add("@departmentId", pdepartmentId);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_outward_despatch_entry_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string vehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string qco = obj.qco;
            string Remarks = obj.remarks;
            string Chemist = obj.chemist;
            string VendorID = obj.sourceid;
            string cmbstatus = obj.fatcalon;
            string btnvale = obj.btnvalue;
            string sno = obj.sno;
            DateTime dtcurrentdate = SalesDBManager.GetTime(vdm.conn);
            string DeptID = context.Session["DeptID"].ToString();
            //cmd = new SqlCommand("Select IFNULL(MAX(dc_no),0)+1 as dcno  from despatch_entry where (cc_id=@cc_id) AND (branchid=@branchid)");
            cmd = new SqlCommand("SELECT { fn IFNULL(MAX(dc_no), 0) } + 1 AS dcno FROM despatch_entry WHERE  (branchid = @branchid) ");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtdespatch = vdm.SelectQuery(cmd).Tables[0];
            string dcno = dtdespatch.Rows[0]["dcno"].ToString();
            if (btnvale == "Save")
            {
                cmd = new SqlCommand("insert into  despatch_entry(dc_no,cc_id,branchid,doe,entry_by,chemist,remarks,vehciecleno,qco,status,trans_type) values(@dc_no,@cc_id,@branchid,@doe,@entry_by,@chemist,@remarks,@vehciecleno,@qco,@status,@trans_type) ");
                cmd.Parameters.Add("@dc_no", dcno);
                cmd.Parameters.Add("@cc_id", VendorID);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@doe", dtcurrentdate);
                cmd.Parameters.Add("@entry_by", UserID);
                cmd.Parameters.Add("@chemist", Chemist);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@vehciecleno", vehicleNo);
                cmd.Parameters.Add("@qco", qco);
                cmd.Parameters.Add("@status", "V");
                cmd.Parameters.Add("@trans_type", "Out");
                vdm.insert(cmd);
                cmd = new SqlCommand("Select  MAX(sno) as Transno from despatch_entry");
                DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
                string Transno = dt_Trans.Rows[0]["Transno"].ToString();
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txtcob = 0;
                        double.TryParse(o.cob, out txtcob);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtPhosps = 0;
                        double.TryParse(o.phosps, out txtPhosps);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;

                        cmd = new SqlCommand("insert into  despatch_sub(desp_refno,cellname,milktype,fat,snf,qty_ltr,qty_kgs,percentageon,clr,cob1,hs,phosps1,alcohol,temp,mbrt) values(@desp_refno,@cellname,@milktype,@fat,@snf,@qty_ltr,@qty_kgs,@percentageon,@clr,@cob,@hs,@phosps,@alcohol,@temp,@mbrt) ");
                        cmd.Parameters.Add("@desp_refno", Transno);
                        cmd.Parameters.Add("@cellname", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", txtcob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", txtPhosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        vdm.insert(cmd);
                    }
                }

                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("update despatch_entry set dc_no=@dc_no,cc_id=@cc_id,branchid=@branchid,doe=@doe,entry_by=@entry_by,chemist=@chemist,remarks=@remarks,vehciecleno=@vehciecleno,qco=@qco,status=@status,trans_type=@trans_type where sno=@sno");
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@dc_no", dcno);
                cmd.Parameters.Add("@cc_id", VendorID);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@doe", dtcurrentdate);
                cmd.Parameters.Add("@entry_by", UserID);
                cmd.Parameters.Add("@chemist", Chemist);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@vehciecleno", vehicleNo);
                cmd.Parameters.Add("@qco", qco);
                cmd.Parameters.Add("@status", "V");
                cmd.Parameters.Add("@trans_type", "Out");
                vdm.Update(cmd);
                //cmd = new SqlCommand("Select  MAX(sno) as Transno from despatch_entry");
                //DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
                //string Transno = dt_Trans.Rows[0]["Transno"].ToString();
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txtcob = 0;
                        double.TryParse(o.cob, out txtcob);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtPhosps = 0;
                        double.TryParse(o.phosps, out txtPhosps);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;

                        cmd = new SqlCommand("upate despatch_sub set cellname = @cellname, milktype = @milktype,fat=@fat, snf=@snf, qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, temp=@temp, mbrt=@mbrt, ot=@ot, sealno=@sealno where desp_refno = @sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@cellname", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", txtcob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", txtPhosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@sealno", o.sealno);
                        vdm.insert(cmd);
                        string response = GetJson("update");
                        context.Response.Write(response);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void save_despatch_entry_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            vdmnr = new VehicleDBMgr();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string VendorID = context.Session["VendorID"].ToString();

            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string vehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string qco = obj.qco;
            string Remarks = obj.remarks;
            string Chemist = obj.chemist;
            string btnvalue = obj.btnvalue;
            string sno = obj.sno; ;
            string cmbstatus = obj.fatcalon;
            string salesType = obj.salesType;
            string vehicleid = obj.vehicleid;
            string igst = "0";
            string cgst = "0";
            string sgst = "0";
            DateTime dtcurrentdate = SalesDBManager.GetTime(vdm.conn);
            string DeptID = context.Session["DeptID"].ToString();

            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string dcdate = ServerDateCurrentdate.ToString("MM/dd/yyyy");

            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            string moduleid = "3";
            string vendorids = context.Session["VendorID"].ToString();
            cmd = new SqlCommand("SELECT   vendors.sno, vendors.vendorcode, vendors.vendorname, vendors.address, vendors.gstinno, vendors.state, vendors.companycode, state_master.gststatecode, state_master.statename FROM  vendors INNER JOIN state_master ON vendors.state = state_master.sno WHERE (vendors.sno = @vendorid)");
            cmd.Parameters.Add("@vendorid", vendorids);
            DataTable dtdet = vdm.SelectQuery(cmd).Tables[0];
            string companycode = "";
            string statecode = "";
            string gstinno = "";
            if (dtdet.Rows.Count > 0)
            {
                companycode = dtdet.Rows[0]["companycode"].ToString();
                statecode = dtdet.Rows[0]["gststatecode"].ToString();
                gstinno = dtdet.Rows[0]["gstinno"].ToString();
            }
            string tovendorid = "";
            if (salesType == "SVDS PUNABAKA")
            {
                tovendorid = "90";
            }
            if (salesType == "SVF WYRA")
            {
                tovendorid = "32";
            }
            if (salesType == "KUPPAM")
            {
                tovendorid = "89";
            }
            if (salesType == "SANGAM")
            {
                tovendorid = "30";
            }
            if (salesType == "NVL DAIRY")
            {
                tovendorid = "35";
            }
            cmd = new SqlCommand("SELECT   vendors.sno, vendors.vendorcode, vendors.vendorname, vendors.address, vendors.gstinno, vendors.state, vendors.companycode, state_master.gststatecode, state_master.statename FROM  vendors INNER JOIN state_master ON vendors.state = state_master.sno WHERE (vendors.sno = @tovendorid)");
            cmd.Parameters.Add("@tovendorid", tovendorid);
            DataTable dttovendor = vdm.SelectQuery(cmd).Tables[0];
            string tcompanycode = "";
            string tstatecode = "";
            if (dttovendor.Rows.Count > 0)
            {
                tcompanycode = dttovendor.Rows[0]["companycode"].ToString();
                tstatecode = dttovendor.Rows[0]["gststatecode"].ToString();
            }
            if (btnvalue == "Save")
            {
                string invoiceno = "0";
                string dctype = "0";
                //check state
                //if (statecode == tstatecode)
                //{
                //    //check company
                //    if (companycode == tcompanycode)
                //    {
                //        //stock transfer
                //        //sales code
                //        mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS dcno FROM  agentst WHERE (companycode = @companycode) AND (stateid = @statecode) AND (IndDate BETWEEN @d1 AND @d2)");
                //        mycmd.Parameters.Add("@companycode", companycode);
                //        mycmd.Parameters.Add("@statecode", statecode);
                //        mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                //        mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                //        DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                //        invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                //        //save agentst table 
                //        mycmd = new MySqlCommand("insert into  agentst(BranchID,IndDate,agentstno,stateid,companycode,moduleid,doe) values(@BranchID,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe) ");
                //        mycmd.Parameters.Add("@BranchID", BranchID);
                //        mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);   //serverdate
                //        mycmd.Parameters.Add("@agentdcno", invoiceno);   //sales dcno
                //        mycmd.Parameters.Add("@stateid", statecode);
                //        mycmd.Parameters.Add("@companycode", companycode);
                //        mycmd.Parameters.Add("@moduleid", moduleid);
                //        mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                //        vdmnr.insert(mycmd);

                //        //stocktransfer
                //        dctype = "1";
                //    }
                //    else
                //    {
                //        //invoice
                //        //sales code
                //        mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS dcno FROM  agentdc WHERE (companycode = @companycode) AND (stateid = @statecode) AND (IndDate BETWEEN @d1 AND @d2)");
                //        mycmd.Parameters.Add("@companycode", companycode);
                //        mycmd.Parameters.Add("@statecode", statecode);
                //        mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                //        mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                //        DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                //        invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                //        //save agentdc table 
                //        mycmd = new MySqlCommand("insert into  agentdc(BranchID,IndDate,agentdcno,stateid,companycode,moduleid,doe) values(@BranchID,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe) ");
                //        mycmd.Parameters.Add("@BranchID", BranchID);
                //        mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);   //serverdate
                //        mycmd.Parameters.Add("@agentdcno", invoiceno);   //sales dcno
                //        mycmd.Parameters.Add("@stateid", statecode);
                //        mycmd.Parameters.Add("@companycode", companycode);
                //        mycmd.Parameters.Add("@moduleid", moduleid);
                //        mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                //        vdmnr.insert(mycmd);

                //        //tax invoice (or) invoice
                //        dctype = "0";
                //    }
                //}
                //else
                //{
                //    //invoice
                //    //sales code
                //    mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS dcno FROM  agentdc WHERE (companycode = @companycode) AND (stateid = @statecode) AND (IndDate BETWEEN @d1 AND @d2)");
                //    mycmd.Parameters.Add("@companycode", companycode);
                //    mycmd.Parameters.Add("@statecode", statecode);
                //    mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                //    mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                //    DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                //    invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                //    //save agentdc table 
                //    mycmd = new MySqlCommand("insert into  agentdc(BranchID,IndDate,agentdcno,stateid,companycode,moduleid,doe) values(@BranchID,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe) ");
                //    mycmd.Parameters.Add("@BranchID", BranchID);
                //    mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);   //serverdate
                //    mycmd.Parameters.Add("@agentdcno", invoiceno);   //sales dcno
                //    mycmd.Parameters.Add("@stateid", statecode);
                //    mycmd.Parameters.Add("@companycode", companycode);
                //    mycmd.Parameters.Add("@moduleid", moduleid);
                //    mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                //    vdmnr.insert(mycmd);

                //    //tax invoice (or) invoice
                //    dctype = "0";
                //}
                if (statecode == tstatecode)
                {
                    //check company
                    if (companycode == tcompanycode)
                    {
                        //stocktransfer
                        dctype = "1";
                    }
                    else
                    {
                        //tax invoice (or) invoice
                        dctype = "0";
                    }
                }
                else
                {
                    //tax invoice (or) invoice
                    dctype = "0";
                }
                //auto incroment branches
                cmd = new SqlCommand("SELECT { fn IFNULL(MAX(dc_no), 0) } + 1 AS dcno FROM despatch_entry WHERE  (branchid = @branchid) and (doe BETWEEN @d1 AND @d2)");
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@d1", GetLowDate(dtapril));
                cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                DataTable dtdespatch = vdm.SelectQuery(cmd).Tables[0];
                string dcno = dtdespatch.Rows[0]["dcno"].ToString();

                cmd = new SqlCommand("insert into  despatch_entry(dc_no,cc_id,branchid,doe,entry_by,chemist,remarks,vehciecleno,qco,status,trans_type,salestype,invoiceno,dctype,vehicleid) values(@dc_no,@cc_id,@branchid,@doe,@entry_by,@chemist,@remarks,@vehciecleno,@qco,@status,@trans_type,@salestype,@invoiceno,@dctype,@vehicleid) ");
                cmd.Parameters.Add("@dc_no", dcno);        //Auto Incriment in cc
                cmd.Parameters.Add("@cc_id", VendorID);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@entry_by", UserID);
                cmd.Parameters.Add("@chemist", Chemist);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@vehciecleno", vehicleNo);
                cmd.Parameters.Add("@qco", qco);
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@trans_type", "In");
                cmd.Parameters.Add("@salestype", salesType);
                cmd.Parameters.Add("@invoiceno", invoiceno);     //sales dcno
                cmd.Parameters.Add("@dctype", dctype);      //dc type
                cmd.Parameters.Add("@vehicleid", vehicleid);
                vdm.insert(cmd);

                cmd = new SqlCommand("Select  MAX(sno) as Transno from despatch_entry");
                DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
                string Transno = dt_Trans.Rows[0]["Transno"].ToString();
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txtcob = 0;
                        double.TryParse(o.cob, out txtcob);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtPhosps = 0;
                        double.TryParse(o.phosps, out txtPhosps);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;

                        cmd = new SqlCommand("insert into  despatch_sub(desp_refno,cellname,milktype,fat,snf,qty_ltr,qty_kgs,percentageon,clr,cob1,hs,phosps1,alcohol,temp,mbrt,ot,sealno,igst,cgst,sgst) values(@desp_refno,@cellname,@milktype,@fat,@snf,@qty_ltr,@qty_kgs,@percentageon,@clr,@cob,@hs,@phosps,@alcohol,@temp,@mbrt,@ot,@sealno,@igst,@cgst,@sgst) ");
                        cmd.Parameters.Add("@desp_refno", Transno);
                        cmd.Parameters.Add("@cellname", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", txtcob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", txtPhosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@sealno", o.sealno);
                        cmd.Parameters.Add("@igst", igst);
                        cmd.Parameters.Add("@cgst", cgst);
                        cmd.Parameters.Add("@sgst", sgst);
                        vdm.insert(cmd);
                        //cmd = new SqlCommand("UPDATE ccwisemilkdetails set qty_kgs = qty_kgs-@qtykgs, qty_ltrs = qty_ltrs-@qtyltrs where branchid=@branchid");
                        //cmd.Parameters.Add("@qtykgs", txtqtykgs);
                        //cmd.Parameters.Add("@qtyltrs", txtqtyltrs);
                        //cmd.Parameters.Add("@branchid", BranchID);
                        //vdm.Update(cmd);
                    }
                }

                cmd = new SqlCommand("SELECT despatch_entry.sno,  despatch_sub.sgst FROM despatch_entry INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno where despatch_entry.sno=@sno");
                cmd.Parameters.Add("@sno", Transno);
                DataTable dtdesp = vdm.SelectQuery(cmd).Tables[0];
                if (dtdesp.Rows.Count > 0)
                {
                    string response = GetJson("OK");
                    context.Response.Write(response);
                }
                else
                {
                    cmd = new SqlCommand("DELETE FROM despatch_entry where despatch_entry.sno=@Tsno");
                    cmd.Parameters.Add("@Tsno", Transno);
                    vdm.Delete(cmd);
                    string response = GetJson("dc");
                    context.Response.Write(response);
                }
            }
            else
            {
                string strdespdate = obj.dispdate;
                //DateTime dtcurrent = Convert.ToDateTime(strdespdate);
                //doe=@doe,
                cmd = new SqlCommand("update despatch_entry set cc_id=@cc_id,branchid=@branchid,entry_by=@entry_by,chemist=@chemist,remarks=@remarks,vehciecleno=@vehciecleno,qco=@qco,status=@status,trans_type=@trans_type,salestype=@salestype,vehicleid=@vehicleid where sno=@sno");
                cmd.Parameters.Add("@sno", sno);
                //cmd.Parameters.Add("@dc_no", dcno);
                cmd.Parameters.Add("@cc_id", VendorID);
                cmd.Parameters.Add("@branchid", BranchID);
                //cmd.Parameters.Add("@doe", dtcurrent);
                cmd.Parameters.Add("@entry_by", UserID);
                cmd.Parameters.Add("@chemist", Chemist);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@vehciecleno", vehicleNo);
                cmd.Parameters.Add("@qco", qco);
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@trans_type", "In");
                cmd.Parameters.Add("@salestype", salesType);
                cmd.Parameters.Add("@vehicleid", vehicleid);
                vdm.Update(cmd);
                //cmd = new SqlCommand("Select  MAX(sno) as Transno from despatch_entry");
                //DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
                //string Transno = dt_Trans.Rows[0]["Transno"].ToString();
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txtcob = 0;
                        double.TryParse(o.cob, out txtcob);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtPhosps = 0;
                        double.TryParse(o.phosps, out txtPhosps);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;

                        cmd = new SqlCommand("update despatch_sub set milktype=@milktype,fat=@fat,snf=@snf,qty_ltr=@qty_ltr,qty_kgs=@qty_kgs,percentageon=@percentageon,clr=@clr,cob1=@cob,hs=@hs,phosps1=@phosps,alcohol=@alcohol,temp=@temp,mbrt=@mbrt,ot=@ot,sealno=@sealno where desp_refno = @sno and cellname = @cellname");
                        //cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@cellname", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", txtcob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", txtPhosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@sealno", o.sealno);
                        vdm.Update(cmd);

                    }
                }
                string response = GetJson("update");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_Outward_milktransactions_click(HttpContext context)
    {
        try
        { 
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);

            string txtdcno = obj.dcno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            //string txtdate = obj.dispdate;
            //DateTime dtdate = Convert.ToDateTime(txtdate);
            string cmbstatus = obj.fatcalon;
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            //string milk_type = obj.milktype;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            string DeptID = context.Session["DeptID"].ToString();
            string dispdate = obj.dispdate + "\r\n";
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";
            string Cell3 = "";
            int i = 1;
            string moduleid = "3";
            string vendorids = "";
            string soid = "";
            //There is no sap in SVF thats we we have to update sap code SVFPP002
            cmd = new SqlCommand("SELECT    sno, branchname, address, whcode FROM    branch_info WHERE  (sno = @ssno)");
            cmd.Parameters.Add("@ssno", BranchID);
            DataTable dtp = vdm.SelectQuery(cmd).Tables[0];
            string pwhcode = dtp.Rows[0]["whcode"].ToString();
            mycmd = new MySqlCommand("SELECT    sno, whcode, BranchName, SalesType FROM   branchdata WHERE  (SalesType = 23) AND (whcode = @pwhcode)");
            mycmd.Parameters.Add("@pwhcode", pwhcode);
            DataTable dts = vdmnr.SelectQuery(mycmd).Tables[0];
            soid = dts.Rows[0]["sno"].ToString();
            if (BranchID == "1")
            {
                vendorids = "90";
            }
            if (BranchID == "22")
            {
                vendorids = "89";
            }
            if (BranchID == "26")
            {
                vendorids = "32";
            }
            if (BranchID == "115")
            {
                vendorids = "114";
            }
            cmd = new SqlCommand("SELECT   vendors.sno, vendors.vendorcode, vendors.vendorname, vendors.address, vendors.gstinno, vendors.state, vendors.companycode, state_master.gststatecode, state_master.statename FROM  vendors INNER JOIN state_master ON vendors.state = state_master.sno WHERE (vendors.sno = @vendorid)");
            cmd.Parameters.Add("@vendorid", vendorids);
            DataTable dtdet = vdm.SelectQuery(cmd).Tables[0];
            string companycode = "";
            string statecode = "";
            string gstinno = "";
            if (dtdet.Rows.Count > 0)
            {
                companycode = dtdet.Rows[0]["companycode"].ToString();
                statecode = dtdet.Rows[0]["gststatecode"].ToString();
                gstinno = dtdet.Rows[0]["gstinno"].ToString();
            }
            cmd = new SqlCommand("SELECT   vendors.sno, vendors.vendorcode, vendors.vendorname, vendors.address, vendors.gstinno, vendors.state, vendors.companycode, state_master.gststatecode, state_master.statename FROM  vendors INNER JOIN state_master ON vendors.state = state_master.sno WHERE (vendors.sno = @tovendorid)");
            cmd.Parameters.Add("@tovendorid", VendorID);
            DataTable dttovendor = vdm.SelectQuery(cmd).Tables[0];
            string tcompanycode = "";
            string tstatecode = "";
            if (dttovendor.Rows.Count > 0)
            {
                tcompanycode = dttovendor.Rows[0]["companycode"].ToString();
                tstatecode = dttovendor.Rows[0]["gststatecode"].ToString();
            }
            if (btnvalue == "Save")
            {
                string invoiceno = "";
                string dctype = "";
                //sales dcno
                //check state
                if (statecode == tstatecode)
                {
                    //check company
                    if (companycode == tcompanycode)
                    {
                        //stock transfer
                        //sales code
                        mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS dcno FROM  agentst WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                        mycmd.Parameters.Add("@soid", soid);
                        mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                        mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                        DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                        invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                        //save agentst table
                        mycmd = new MySqlCommand("insert into  agentst(BranchID,IndDate,agentstno,stateid,companycode,moduleid,doe,soid) values(@BranchID,@IndDate,@agentstno,@stateid,@companycode,@moduleid,@doe,@soid) ");
                        mycmd.Parameters.Add("@BranchID", BranchID);
                        mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);    //serverdate
                        mycmd.Parameters.Add("@agentstno", invoiceno);   //sales dcno
                        mycmd.Parameters.Add("@stateid", statecode);
                        mycmd.Parameters.Add("@companycode", companycode);
                        mycmd.Parameters.Add("@moduleid", moduleid);
                        mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        mycmd.Parameters.Add("@soid", soid);  //sales branchid
                        vdmnr.insert(mycmd);

                        //stocktransfer
                        dctype = "1";
                    }
                    else
                    {
                        //invoice
                        //sales code
                        mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS dcno FROM  agentdc WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                        mycmd.Parameters.Add("@soid", soid);
                        mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                        mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                        DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                        invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                        //save agentdc table
                        mycmd = new MySqlCommand("insert into  agentdc(BranchID,IndDate,agentdcno,stateid,companycode,moduleid,doe,soid) values(@BranchID,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@soid) ");
                        mycmd.Parameters.Add("@BranchID", BranchID);
                        mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);    //serverdate
                        mycmd.Parameters.Add("@agentdcno", invoiceno);   //sales dcno
                        mycmd.Parameters.Add("@stateid", statecode);
                        mycmd.Parameters.Add("@companycode", companycode);
                        mycmd.Parameters.Add("@moduleid", moduleid);
                        mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        mycmd.Parameters.Add("@soid", soid);  //sales branchid
                        vdmnr.insert(mycmd);

                        //tax invoice (or) invoice
                        dctype = "0";
                    }
                }
                else
                {
                    //invoice
                    //sales code
                    //mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS dcno FROM  agentdc WHERE (companycode = @companycode) AND (stateid = @statecode) AND (IndDate BETWEEN @d1 AND @d2)");
                    mycmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS dcno FROM  agentdc WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");

                    //mycmd.Parameters.Add("@companycode", companycode);
                    mycmd.Parameters.Add("@soid", soid);
                    mycmd.Parameters.Add("@d1", GetLowDate(dtapril));
                    mycmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                    DataTable dtdcno = vdmnr.SelectQuery(mycmd).Tables[0];
                    invoiceno = dtdcno.Rows[0]["dcno"].ToString();

                    //save agentdc table
                    mycmd = new MySqlCommand("insert into  agentdc(BranchID,IndDate,agentdcno,stateid,companycode,moduleid,doe,soid) values(@BranchID,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@soid) ");
                    mycmd.Parameters.Add("@BranchID", BranchID);
                    mycmd.Parameters.Add("@IndDate", ServerDateCurrentdate);    //serverdate
                    mycmd.Parameters.Add("@agentdcno", invoiceno);   //sales dcno
                    mycmd.Parameters.Add("@stateid", statecode);
                    mycmd.Parameters.Add("@companycode", companycode);
                    mycmd.Parameters.Add("@moduleid", moduleid);
                    mycmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    mycmd.Parameters.Add("@soid", soid);  //sales branchid
                    vdmnr.insert(mycmd);

                    //tax invoice (or) invoice
                    dctype = "0";
                }
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into milktransactions (transid, dcno, transtype, sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,entrydate,invoiceno,dctype) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@entrydate,@invoiceno,@dctype)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);         //taken dcno
                        cmd.Parameters.Add("@transtype", "Out");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);   //server date pass
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@invoiceno", invoiceno); //slaes invoiceno
                        cmd.Parameters.Add("@dctype", dctype);   //save dctype
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);

                            double m_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_fat"].ToString(), out m_std_fat);
                            double p_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_fat"].ToString(), out p_std_fat);
                            string fatpluson = dtVendorlogs.Rows[0]["fatplus_on"].ToString();
                            double m_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_fatpluscost"].ToString(), out m_fatpluscost);
                            double p_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_fatpluscost"].ToString(), out p_fatpluscost);
                            cmd = new SqlCommand("insert into  milktransaction_logs (milktransaction_sno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            cmd.Parameters.Add("@fatplus_on", fatpluson);
                            cmd.Parameters.Add("@m_fatpluscost", m_fatpluscost);
                            cmd.Parameters.Add("@p_fatpluscost", p_fatpluscost);
                            cmd.Parameters.Add("@m_std_fat", m_std_fat);
                            cmd.Parameters.Add("@p_std_fat", p_std_fat);
                            vdm.insert(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                        double cowfat = 0;
                        double cowsnf = 0;
                        double buffat = 0;
                        double bufsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Cow" && cmbstatus == "Kgs")
                        {
                            cowfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@cowfat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowfat", cowfat);
                            cmd.Parameters.Add("@productid", "3");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@cowfat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowfat", cowfat);
                                cmd.Parameters.Add("@productid", "3");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            cowsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@cowsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowsnf", cowsnf);
                            cmd.Parameters.Add("@productid", "4");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowsnf", cowsnf);
                                cmd.Parameters.Add("@productid", "4");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Buffalo" && cmbstatus == "Kgs")
                        {
                            buffat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@buffat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@buffat", buffat);
                            cmd.Parameters.Add("@productid", "5");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining, productid,sectionid ) values (@buffat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@buffat", buffat);
                                cmd.Parameters.Add("@productid", "5");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            bufsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining-@bufsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@bufsnf", bufsnf);
                            cmd.Parameters.Add("@productid", "6");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@bufsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@bufsnf", bufsnf);
                                cmd.Parameters.Add("@productid", "6");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }

                cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, vendortype, email, mobno, panno, doe, branchid, address FROM vendors WHERE  (sno = @VendorID)");
                cmd.Parameters.Add("@VendorID", obj.sourceid);
                DataTable dtvendorinfo = vdm.SelectQuery(cmd).Tables[0];
                if (dtvendorinfo.Rows.Count > 0)
                {
                    string MobNo = dtvendorinfo.Rows[0]["mobno"].ToString();
                    string vendorname = dtvendorinfo.Rows[0]["vendorname"].ToString();
                    //if (MobNo.Length == 10)
                    //{
                    //    string ccdet = "Date->" + ServerDateCurrentdate + "CC Name->" + vendorname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                    //    string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                    //    string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                    //    Stream data = client.OpenRead(baseurl);
                    //    StreamReader reader = new StreamReader(data);
                    //    string ResponseID = reader.ReadToEnd();
                    //    data.Close();
                    //    reader.Close();
                    //}
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                DataTable outwordamount = vdm.SelectQuery(cmd).Tables[0];
                string outwordno = outwordamount.Rows[0]["TransNo"].ToString();
                cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", outwordno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Sno"] = k++.ToString();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);
                    }
                    cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                        cmd.Parameters.Add("@amount", milkvaluetotal);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        vdm.insert(cmd);
                    }
                    string msg = "Outward Milk Transaction Saved successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                double prevmilkvaluetotal = 0;
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        DataTable dtreport = new DataTable();
                        dtreport.Columns.Add("Sno");
                        dtreport.Columns.Add("DATE");
                        dtreport.Columns.Add("KGS");
                        dtreport.Columns.Add("LTRS");
                        dtreport.Columns.Add("FAT");
                        dtreport.Columns.Add("SNF");
                        dtreport.Columns.Add("CLR");
                        dtreport.Columns.Add("KG FAT RATE");
                        dtreport.Columns.Add("KG FAT");
                        dtreport.Columns.Add("KG SNF");
                        dtreport.Columns.Add("M VALUE");
                        dtreport.Columns.Add("OH");
                        dtreport.Columns.Add("SNF9");
                        dtreport.Columns.Add("MILK VALUE");
                        dtreport.Columns.Add("Transaction No");
                        dtreport.Columns.Add("DC No");
                        dtreport.Columns.Add("CC Name");
                        dtreport.Columns.Add("TANKER NO");
                        cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                        cmd.Parameters.Add("@sectionid", sno);
                        DataTable dtprevDispatch = vdm.SelectQuery(cmd).Tables[0];
                        if (dtprevDispatch.Rows.Count > 0)
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;

                            int k = 1;
                            foreach (DataRow dr in dtprevDispatch.Rows)
                            {
                                DataRow newrow = dtreport.NewRow();
                                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                string date = dtdoe.ToString("dd/MM/yyyy");
                                newrow["DATE"] = date;
                                newrow["KGS"] = dr["qty_kgs"].ToString();
                                double qty_ltr = 0;
                                double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                newrow["LTRS"] = dr["qty_ltr"].ToString();
                                double FAT = 0;
                                double.TryParse(dr["fat"].ToString(), out FAT);
                                FAT = Math.Round(FAT, 2);
                                newrow["FAT"] = FAT;
                                double SNF = 0;
                                double.TryParse(dr["snf"].ToString(), out SNF);
                                newrow["SNF"] = SNF;
                                newrow["CLR"] = dr["clr"].ToString();
                                string Rateon = dr["rate_on"].ToString();


                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;

                                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                Ltrstotal += ltrs;

                                double Kgs = 0;
                                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                kgstotal += Kgs;

                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {

                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dr["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dr["cost"].ToString(), out cost);
                                newrow["KG FAT RATE"] = cost;
                                KGFAT = Math.Round(KGFAT, 2);

                                newrow["KG FAT"] = KGFAT;
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                newrow["KG SNF"] = KGSNF;
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                //MValue = MValue / 100;
                                MValue = Math.Round(MValue, 2);
                                newrow["M VALUE"] = MValue;
                                mvaluetotal += MValue;
                                string OverheadOn = dr["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                newrow["OH"] = OHcost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                newrow["SNF9"] = DiffSNFCost;
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                newrow["MILK VALUE"] = OHandMvalue;
                                prevmilkvaluetotal += OHandMvalue;
                                newrow["Transaction No"] = dr["dcno"].ToString();
                                newrow["DC No"] = dr["partydcno"].ToString();

                                newrow["CC Name"] = dr["vendorname"].ToString();
                                newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                dtreport.Rows.Add(newrow);
                            }
                        }
                        cmd = new SqlCommand("update milktransactions set transid=@transid, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        //cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "Out");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.Update(cmd);
                        //cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                        //DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        //string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update milktransaction_logs set milktransaction_sno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where milktransaction_sno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;

                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", sno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);

                    }
                    double variationval = 0;
                    if (milkvaluetotal > prevmilkvaluetotal)
                    {
                        variationval = milkvaluetotal - prevmilkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }
                    else
                    {
                        variationval = prevmilkvaluetotal - milkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Outward Milk Transaction updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_tanker_inward_approval_milktransactions_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);

            string txtdcno = obj.dcno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            //string milk_type = obj.milktype;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string ddate = obj.dispdate;
            string dispdate = Convert.ToDateTime(ddate) + "\r\n";
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";
            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        txtsnf = Math.Round(txtsnf, 2);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        txtfat = Math.Round(txtfat, 2);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into milktransactions (transid, dcno, transtype,sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,acidity) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@acidity)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("insert into  milktransaction_logs (milktransaction_sno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.insert(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }
                cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, vendortype, email, mobno, panno, doe, branchid, address FROM vendors WHERE  (sno = @VendorID)");
                cmd.Parameters.Add("@VendorID", obj.sourceid);
                DataTable dtvendorinfo = vdm.SelectQuery(cmd).Tables[0];
                if (dtvendorinfo.Rows.Count > 0)
                {
                    string MobNo = dtvendorinfo.Rows[0]["mobno"].ToString();
                    string vendorname = dtvendorinfo.Rows[0]["vendorname"].ToString();
                    if (MobNo.Length == 10)
                    {
                        string ccdet = "Date->" + ServerDateCurrentdate + "CC Name->" + vendorname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                        string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                        string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                        //string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + MobNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                        //string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                        Stream data = client.OpenRead(baseurl);
                        StreamReader reader = new StreamReader(data);
                        string ResponseID = reader.ReadToEnd();
                        data.Close();
                        reader.Close();

                        cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                        cmd.Parameters.Add("@venorid", VendorID);
                        DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                        string branchvendorid = "";
                        if (dtbvid.Rows.Count > 0)
                        {
                            branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                        }
                        cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                        cmd.Parameters.Add("@phoneno", MobNo);
                        DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                        string HRMS_EmpId = "";
                        if (dtmobid.Rows.Count > 0)
                        {
                            HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                        }
                        else
                        {
                            HRMS_EmpId = branchvendorid;
                        }
                        cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                        cmd.Parameters.Add("@empid", HRMS_EmpId);
                        cmd.Parameters.Add("@mainbranch", BranchID);
                        cmd.Parameters.Add("@branchid", branchvendorid);
                        cmd.Parameters.Add("@msg", totaldetails);
                        cmd.Parameters.Add("@mobileno", MobNo);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                    string PhoneNo = "9087025914";
                    if (PhoneNo.Length == 10)
                    {
                        string ccdet = "Date->" + ServerDateCurrentdate + " CC Name->" + vendorname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                        string totaldetails = ccdet + Cell1 + Cell2 + Cell3 + "Dispatch Date" + dispdate;
                        string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                        //string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + PhoneNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                        //string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + PhoneNo + "&message=%20" + totaldetails + ";&response=N";
                        Stream data = client.OpenRead(baseurl);
                        StreamReader reader = new StreamReader(data);
                        string ResponseID = reader.ReadToEnd();
                        data.Close();
                        reader.Close();

                        cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                        cmd.Parameters.Add("@venorid", VendorID);
                        DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                        string branchvendorid = "";
                        if (dtbvid.Rows.Count > 0)
                        {
                            branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                        }
                        cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                        cmd.Parameters.Add("@phoneno", MobNo);
                        DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                        string HRMS_EmpId = "";
                        if (dtmobid.Rows.Count > 0)
                        {
                            HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                        }
                        else
                        {
                            HRMS_EmpId = branchvendorid;
                        }
                        cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                        cmd.Parameters.Add("@empid", HRMS_EmpId);
                        cmd.Parameters.Add("@mainbranch", BranchID);
                        cmd.Parameters.Add("@branchid", branchvendorid);
                        cmd.Parameters.Add("@msg", totaldetails);
                        cmd.Parameters.Add("@mobileno", MobNo);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Inward Milk Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        cmd = new SqlCommand("update milktransactions set transid=@transid, dcno=@dcno, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.Update(cmd);
                        //cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                        //DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        //string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update milktransaction_logs set milktransaction_sno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where milktransaction_sno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;

                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }
                cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, vendortype, email, mobno, panno, doe, branchid, address FROM vendors WHERE  (sno = @VendorID)");
                cmd.Parameters.Add("@VendorID", obj.sourceid);
                DataTable dtvendorinfo = vdm.SelectQuery(cmd).Tables[0];
                if (dtvendorinfo.Rows.Count > 0)
                {
                    string MobNo = dtvendorinfo.Rows[0]["mobno"].ToString();
                    string vendorname = dtvendorinfo.Rows[0]["vendorname"].ToString();
                    if (MobNo.Length == 10)
                    {
                        string ccdet = "Date->" + ServerDateCurrentdate + "CC Name->" + vendorname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                        string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                        string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                        // string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + MobNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                        // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                        Stream data = client.OpenRead(baseurl);
                        StreamReader reader = new StreamReader(data);
                        string ResponseID = reader.ReadToEnd();
                        data.Close();
                        reader.Close();

                        cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                        cmd.Parameters.Add("@venorid", VendorID);
                        DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                        string branchvendorid = "";
                        if (dtbvid.Rows.Count > 0)
                        {
                            branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                        }
                        cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                        cmd.Parameters.Add("@phoneno", MobNo);
                        DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                        string HRMS_EmpId = "";
                        if (dtmobid.Rows.Count > 0)
                        {
                            HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                        }
                        else
                        {
                            HRMS_EmpId = branchvendorid;
                        }
                        cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                        cmd.Parameters.Add("@empid", HRMS_EmpId);
                        cmd.Parameters.Add("@mainbranch", BranchID);
                        cmd.Parameters.Add("@branchid", branchvendorid);
                        cmd.Parameters.Add("@msg", totaldetails);
                        cmd.Parameters.Add("@mobileno", MobNo);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                    string PhoneNo = "9087025914";
                    if (PhoneNo.Length == 10)
                    {
                        string ccdet = "Date->" + ServerDateCurrentdate + "CC Name->" + vendorname + "DCNo ->" + dcno + "Vehcile ->" + vehicleno + "\r\n";
                        string totaldetails = ccdet + Cell1 + Cell2 + Cell3 + "Dispatch Date" + dispdate;
                        string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                        //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                        //string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + PhoneNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                        // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + PhoneNo + "&message=%20" + totaldetails + ";&response=N";
                        Stream data = client.OpenRead(baseurl);
                        StreamReader reader = new StreamReader(data);
                        string ResponseID = reader.ReadToEnd();
                        data.Close();
                        reader.Close();

                        cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                        cmd.Parameters.Add("@venorid", VendorID);
                        DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                        string branchvendorid = "";
                        if (dtbvid.Rows.Count > 0)
                        {
                            branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                        }
                        cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                        cmd.Parameters.Add("@phoneno", MobNo);
                        DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                        string HRMS_EmpId = "";
                        if (dtmobid.Rows.Count > 0)
                        {
                            HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                        }
                        else
                        {
                            HRMS_EmpId = branchvendorid;
                        }
                        cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                        cmd.Parameters.Add("@empid", HRMS_EmpId);
                        cmd.Parameters.Add("@mainbranch", BranchID);
                        cmd.Parameters.Add("@branchid", VendorID);
                        cmd.Parameters.Add("@msg", totaldetails);
                        cmd.Parameters.Add("@mobileno", MobNo);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Inward Milk Transaction updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_milk_direct_sale_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string txtdcno = string.Empty;
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            if (obj.dcno == "0")
            {
                txtdcno = obj.newdcNo;
            }
            else
            {
                txtdcno = obj.dcno;
            }

            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            DateTime dttime = Convert.ToDateTime(txtdate);
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string fromVendorID = obj.fromsourceid;
            string toVendorID = obj.tosourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string vehicleno = obj.vehicleno;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);

            string dispdate = obj.dispdate + "\r\n";
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            //string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";
            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    double txtqtyltrs = 0;
                    double.TryParse(o.Qtyltr, out txtqtyltrs);
                    double txtqtykgs = 0;
                    double.TryParse(o.Qtykg, out txtqtykgs);
                    double txtsnf = 0;
                    double.TryParse(o.snf, out txtsnf);
                    double txtfat = 0;
                    double.TryParse(o.fat, out txtfat);
                    double txtclr = 0;
                    double.TryParse(o.clr, out txtclr);
                    string milk_type = o.milktype;
                    string cell = o.CellName;
                    cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                    cmd.Parameters.Add("@MilkType", milk_type);
                    cmd.Parameters.Add("@VendorSno", fromVendorID);
                    DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                    if (dtVendorlogs.Rows.Count > 0)
                    {
                        double cost = 0;
                        double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                        double transportcost = 0;
                        double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out transportcost);
                        string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                        string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                        string transport_on = dtVendorlogs.Rows[0]["transport_on"].ToString();
                        cmd = new SqlCommand("insert into directsale (dcno,fromccid,toccid,doe,entryby,branchid,rate,qty_kgs,qty_ltr,fat,snf,clr,cell,milktype,transport_on,transport_cost,rate_on,calc_on,veh_sno) values(@dcno,@fromccid,@toccid,@doe,@entryby,@branchid,@rate,@qty_kgs,@qty_ltr,@fat,@snf,@clr,@cell,@milktype,@transport_on,@transport_cost,@rate_on,@calc_on,@veh_sno)");
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@fromccid", fromVendorID);
                        cmd.Parameters.Add("@toccid", toVendorID);
                        cmd.Parameters.Add("@doe", dttime);
                        cmd.Parameters.Add("@entryby", UserID);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@rate", cost);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cell", cell);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@transport_on", transport_on);
                        cmd.Parameters.Add("@transport_cost", transportcost);
                        cmd.Parameters.Add("@rate_on", rateon);
                        cmd.Parameters.Add("@calc_on", calcon);
                        cmd.Parameters.Add("@veh_sno", vehicleno);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Direct sale successfully saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_direct_purchase_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string txtdcno = obj.dcno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string transportvalue = obj.transportvalue;
            //string milk_type = obj.milktype;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string strdate = obj.dispdate;
            DateTime dispdate = Convert.ToDateTime(strdate);
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";
            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into directsales_purchase (transid, dcno, transtype,sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,acidity,partydcno,entrydate,ot,status, entrytype,transportvalue) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@acidity,@partydcno,@entrydate,@ot, 'pending', 'purchase',@transportvalue)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@partydcno", obj.partydcno);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@transportvalue", transportvalue);

                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from directsales_purchase");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);

                            double m_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_fat"].ToString(), out m_std_fat);
                            double p_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_fat"].ToString(), out p_std_fat);
                            string fatpluson = dtVendorlogs.Rows[0]["fatplus_on"].ToString();
                            double m_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_fatpluscost"].ToString(), out m_fatpluscost);
                            double p_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_fatpluscost"].ToString(), out p_fatpluscost);
                            cmd = new SqlCommand("insert into  directsales_purchaselogs (purchaserefno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            cmd.Parameters.Add("@fatplus_on", fatpluson);
                            cmd.Parameters.Add("@m_fatpluscost", m_fatpluscost);
                            cmd.Parameters.Add("@p_fatpluscost", p_fatpluscost);
                            cmd.Parameters.Add("@m_std_fat", m_std_fat);
                            cmd.Parameters.Add("@p_std_fat", p_std_fat);
                            vdm.insert(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                        double cowfat = 0;
                        double cowsnf = 0;
                        double buffat = 0;
                        double bufsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Cow" && cmbstatus == "Kgs")
                        {
                            cowfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowfat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowfat", cowfat);
                            cmd.Parameters.Add("@productid", "3");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@cowfat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowfat", cowfat);
                                cmd.Parameters.Add("@productid", "3");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            cowsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowsnf", cowsnf);
                            cmd.Parameters.Add("@productid", "4");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert into fat_snf_inventory (remaining,productid,sectionid ) values(@cowsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowsnf", cowsnf);
                                cmd.Parameters.Add("@productid", "4");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Buffalo" && cmbstatus == "Kgs")
                        {
                            buffat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@buffat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@buffat", buffat);
                            cmd.Parameters.Add("@productid", "5");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining, productid,sectionid ) values (@buffat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@buffat", buffat);
                                cmd.Parameters.Add("@productid", "5");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            bufsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@bufsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@bufsnf", bufsnf);
                            cmd.Parameters.Add("@productid", "6");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@bufsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@bufsnf", bufsnf);
                                cmd.Parameters.Add("@productid", "6");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("Select  MAX(sno) as TransNo from directsales_purchase");
                DataTable inwordamount = vdm.SelectQuery(cmd).Tables[0];
                string inwordno = inwordamount.Rows[0]["TransNo"].ToString();
                cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.partydcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchaselogs.p_snfpluscost, directsales_purchaselogs.transport_on, directsales_purchaselogs.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purchaserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", inwordno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Sno"] = k++.ToString();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);
                    }

                    //vender_account update quary .... Query Changed Ravindra....04/13/2016

                    cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                        cmd.Parameters.Add("@amount", milkvaluetotal);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        vdm.insert(cmd);
                    }
                    cmd = new SqlCommand("insert into inwordamountdetails (vendorid, dcno, amount, doe) values(@vendorid, @dcno, @amount, @vdate) ");
                    cmd.Parameters.Add("@dcno", txtdcno);
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vdate", dispdate);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    vdm.insert(cmd);

                }
                string msg = "Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                double prevmilkvaluetotal = 0;
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        DataTable dtreport = new DataTable();
                        dtreport.Columns.Add("Sno");
                        dtreport.Columns.Add("DATE");
                        dtreport.Columns.Add("KGS");
                        dtreport.Columns.Add("LTRS");
                        dtreport.Columns.Add("FAT");
                        dtreport.Columns.Add("SNF");
                        dtreport.Columns.Add("CLR");
                        dtreport.Columns.Add("KG FAT RATE");
                        dtreport.Columns.Add("KG FAT");
                        dtreport.Columns.Add("KG SNF");
                        dtreport.Columns.Add("M VALUE");
                        dtreport.Columns.Add("OH");
                        dtreport.Columns.Add("SNF9");
                        dtreport.Columns.Add("MILK VALUE");
                        dtreport.Columns.Add("Transaction No");
                        dtreport.Columns.Add("DC No");
                        dtreport.Columns.Add("CC Name");
                        dtreport.Columns.Add("TANKER NO");
                        cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.partydcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchase.p_snfpluscost, directsales_purchase.transport_on, directsales_purchase.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purchserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                        cmd.Parameters.Add("@sectionid", sno);
                        DataTable dtprevDispatch = vdm.SelectQuery(cmd).Tables[0];

                        if (dtprevDispatch.Rows.Count > 0)
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;

                            int k = 1;
                            foreach (DataRow dr in dtprevDispatch.Rows)
                            {
                                DataRow newrow = dtreport.NewRow();
                                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                string date = dtdoe.ToString("dd/MM/yyyy");
                                newrow["DATE"] = date;
                                newrow["KGS"] = dr["qty_kgs"].ToString();
                                double qty_ltr = 0;
                                double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                newrow["LTRS"] = dr["qty_ltr"].ToString();
                                double FAT = 0;
                                double.TryParse(dr["fat"].ToString(), out FAT);
                                FAT = Math.Round(FAT, 2);
                                newrow["FAT"] = FAT;
                                double SNF = 0;
                                double.TryParse(dr["snf"].ToString(), out SNF);
                                newrow["SNF"] = SNF;
                                newrow["CLR"] = dr["clr"].ToString();
                                string Rateon = dr["rate_on"].ToString();


                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;

                                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                Ltrstotal += ltrs;

                                double Kgs = 0;
                                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                kgstotal += Kgs;

                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {

                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dr["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dr["cost"].ToString(), out cost);
                                newrow["KG FAT RATE"] = cost;
                                KGFAT = Math.Round(KGFAT, 2);

                                newrow["KG FAT"] = KGFAT;
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                newrow["KG SNF"] = KGSNF;
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                //MValue = MValue / 100;
                                MValue = Math.Round(MValue, 2);
                                newrow["M VALUE"] = MValue;
                                mvaluetotal += MValue;
                                string OverheadOn = dr["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                newrow["OH"] = OHcost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                newrow["SNF9"] = DiffSNFCost;
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                newrow["MILK VALUE"] = OHandMvalue;
                                prevmilkvaluetotal += OHandMvalue;
                                newrow["Transaction No"] = dr["dcno"].ToString();
                                newrow["DC No"] = dr["partydcno"].ToString();

                                newrow["CC Name"] = dr["vendorname"].ToString();
                                newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                dtreport.Rows.Add(newrow);
                            }
                        }

                        cmd = new SqlCommand("update directsales_purchase set transid=@transid, dcno=@dcno, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update directsales_purchaselogs set purchaserefno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where purchaserefno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.partydcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchaselogs.p_snfpluscost, directsales_purchaselogs.transport_on, directsales_purchaselogs.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purcahserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", sno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);

                    }
                    double variationval = 0;
                    if (milkvaluetotal > prevmilkvaluetotal)
                    {
                        variationval = milkvaluetotal - prevmilkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }
                    else
                    {
                        variationval = prevmilkvaluetotal - milkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }

                    string msg = "Transaction updated successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_direct_sales_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string txtdcno = obj.partydcno;
            string txtpartytransno = obj.partytransno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string transportvalue = obj.transportvalue;
            //string milk_type = obj.milktype;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string strdate = obj.dispdate;
            DateTime dispdate = Convert.ToDateTime(strdate);
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";
            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilksaleDetails o in obj.MilksaleDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into directsales_purchase (transid, dcno, transtype, sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,acidity,partydcno,entrydate,ot,status,entrytype,transportvalue) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@acidity,@partydcno,@entrydate,@ot, 'pending', 'sales',@transportvalue)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@partydcno", obj.partydcno);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from directsales_purchase");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);

                            double m_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_fat"].ToString(), out m_std_fat);
                            double p_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_fat"].ToString(), out p_std_fat);
                            string fatpluson = dtVendorlogs.Rows[0]["fatplus_on"].ToString();
                            double m_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_fatpluscost"].ToString(), out m_fatpluscost);
                            double p_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_fatpluscost"].ToString(), out p_fatpluscost);
                            cmd = new SqlCommand("insert into  directsales_purchaselogs (purchaserefno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            cmd.Parameters.Add("@fatplus_on", fatpluson);
                            cmd.Parameters.Add("@m_fatpluscost", m_fatpluscost);
                            cmd.Parameters.Add("@p_fatpluscost", p_fatpluscost);
                            cmd.Parameters.Add("@m_std_fat", m_std_fat);
                            cmd.Parameters.Add("@p_std_fat", p_std_fat);
                            vdm.insert(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                        double cowfat = 0;
                        double cowsnf = 0;
                        double buffat = 0;
                        double bufsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Cow" && cmbstatus == "Kgs")
                        {
                            cowfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowfat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowfat", cowfat);
                            cmd.Parameters.Add("@productid", "3");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@cowfat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowfat", cowfat);
                                cmd.Parameters.Add("@productid", "3");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            cowsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowsnf", cowsnf);
                            cmd.Parameters.Add("@productid", "4");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowsnf", cowsnf);
                                cmd.Parameters.Add("@productid", "4");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Buffalo" && cmbstatus == "Kgs")
                        {
                            buffat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@buffat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@buffat", buffat);
                            cmd.Parameters.Add("@productid", "5");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining, productid,sectionid ) values (@buffat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@buffat", buffat);
                                cmd.Parameters.Add("@productid", "5");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            bufsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@bufsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@bufsnf", bufsnf);
                            cmd.Parameters.Add("@productid", "6");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@bufsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@bufsnf", bufsnf);
                                cmd.Parameters.Add("@productid", "6");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("Select  MAX(sno) as TransNo from directsales_purchase");
                DataTable inwordamount = vdm.SelectQuery(cmd).Tables[0];
                string inwordno = inwordamount.Rows[0]["TransNo"].ToString();
                cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.partydcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchaselogs.p_snfpluscost, directsales_purchaselogs.transport_on, directsales_purchaselogs.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purchaserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", inwordno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Sno"] = k++.ToString();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);
                    }

                    //vender_account update quary .... Query Changed Ravindra....04/13/2016

                    cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                        cmd.Parameters.Add("@amount", milkvaluetotal);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        vdm.insert(cmd);
                    }
                    cmd = new SqlCommand("insert into inwordamountdetails (vendorid, dcno, amount, doe) values(@vendorid, @dcno, @amount, @vdate) ");
                    cmd.Parameters.Add("@dcno", txtdcno);
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vdate", dispdate);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    vdm.insert(cmd);

                }
                string msg = "Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                double prevmilkvaluetotal = 0;
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        DataTable dtreport = new DataTable();
                        dtreport.Columns.Add("Sno");
                        dtreport.Columns.Add("DATE");
                        dtreport.Columns.Add("KGS");
                        dtreport.Columns.Add("LTRS");
                        dtreport.Columns.Add("FAT");
                        dtreport.Columns.Add("SNF");
                        dtreport.Columns.Add("CLR");
                        dtreport.Columns.Add("KG FAT RATE");
                        dtreport.Columns.Add("KG FAT");
                        dtreport.Columns.Add("KG SNF");
                        dtreport.Columns.Add("M VALUE");
                        dtreport.Columns.Add("OH");
                        dtreport.Columns.Add("SNF9");
                        dtreport.Columns.Add("MILK VALUE");
                        dtreport.Columns.Add("Transaction No");
                        dtreport.Columns.Add("DC No");
                        dtreport.Columns.Add("CC Name");
                        dtreport.Columns.Add("TANKER NO");
                        cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.partydcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchase.p_snfpluscost, directsales_purchase.transport_on, directsales_purchase.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purchserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                        cmd.Parameters.Add("@sectionid", sno);
                        DataTable dtprevDispatch = vdm.SelectQuery(cmd).Tables[0];

                        if (dtprevDispatch.Rows.Count > 0)
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;

                            int k = 1;
                            foreach (DataRow dr in dtprevDispatch.Rows)
                            {
                                DataRow newrow = dtreport.NewRow();
                                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                string date = dtdoe.ToString("dd/MM/yyyy");
                                newrow["DATE"] = date;
                                newrow["KGS"] = dr["qty_kgs"].ToString();
                                double qty_ltr = 0;
                                double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                newrow["LTRS"] = dr["qty_ltr"].ToString();
                                double FAT = 0;
                                double.TryParse(dr["fat"].ToString(), out FAT);
                                FAT = Math.Round(FAT, 2);
                                newrow["FAT"] = FAT;
                                double SNF = 0;
                                double.TryParse(dr["snf"].ToString(), out SNF);
                                newrow["SNF"] = SNF;
                                newrow["CLR"] = dr["clr"].ToString();
                                string Rateon = dr["rate_on"].ToString();


                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;

                                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                Ltrstotal += ltrs;

                                double Kgs = 0;
                                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                kgstotal += Kgs;

                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {

                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dr["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dr["cost"].ToString(), out cost);
                                newrow["KG FAT RATE"] = cost;
                                KGFAT = Math.Round(KGFAT, 2);

                                newrow["KG FAT"] = KGFAT;
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                newrow["KG SNF"] = KGSNF;
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                //MValue = MValue / 100;
                                MValue = Math.Round(MValue, 2);
                                newrow["M VALUE"] = MValue;
                                mvaluetotal += MValue;
                                string OverheadOn = dr["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                newrow["OH"] = OHcost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                newrow["SNF9"] = DiffSNFCost;
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                newrow["MILK VALUE"] = OHandMvalue;
                                prevmilkvaluetotal += OHandMvalue;
                                newrow["Transaction No"] = dr["dcno"].ToString();
                                newrow["DC No"] = dr["partydcno"].ToString();
                                newrow["CC Name"] = dr["vendorname"].ToString();
                                newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                dtreport.Rows.Add(newrow);
                            }
                        }

                        cmd = new SqlCommand("update directsales_purchase set transid=@transid, dcno=@dcno, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update directsales_purchaselogs set purchaserefno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where purchaserefno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("SELECT directsales_purchase.dcno, directsales_purchase.inwardno AS InwardNo, directsales_purchase.dcno, directsales_purchase.vehicleno, directsales_purchase.doe, directsales_purchase.transtype, directsales_purchase.qty_ltr, directsales_purchase.qty_kgs, directsales_purchase.percentageon, directsales_purchase.snf, directsales_purchase.fat, directsales_purchase.clr, directsales_purchaselogs.milktype, directsales_purchaselogs.rate_on, directsales_purchaselogs.cost, directsales_purchaselogs.calc_on, directsales_purchaselogs.overheadon, directsales_purchaselogs.overheadcost, directsales_purchaselogs.m_std_snf, directsales_purchaselogs.p_std_snf, directsales_purchaselogs.snfplus_on, directsales_purchaselogs.m_snfpluscost, directsales_purchaselogs.p_snfpluscost, directsales_purchaselogs.transport_on, directsales_purchaselogs.transportcost, directsales_purchaselogs.transport, vendors.vendorname FROM directsales_purchase INNER JOIN directsales_purchaselogs ON directsales_purchase.sno = directsales_purchaselogs.purchaserefno INNER JOIN vendors ON directsales_purchase.sectionid = vendors.sno WHERE directsales_purchase.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", sno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);

                    }
                    double variationval = 0;
                    if (milkvaluetotal > prevmilkvaluetotal)
                    {
                        variationval = milkvaluetotal - prevmilkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }
                    else
                    {
                        variationval = prevmilkvaluetotal - milkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }

                    string msg = "Transaction updated successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_inward_milktransactions_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string txtdcno = obj.dcno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string transportvalue = obj.transportvalue;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string strdate = obj.dispdate;
            DateTime dispdate = Convert.ToDateTime(strdate);
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";

            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into milktransactions (transid, dcno, transtype,sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,acidity,partydcno,entrydate,ot,status, transportvalue) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@acidity,@partydcno,@entrydate,@ot, 'pending',@transportvalue)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@partydcno", obj.partydcno);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);

                            double m_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_fat"].ToString(), out m_std_fat);
                            double p_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_fat"].ToString(), out p_std_fat);
                            string fatpluson = dtVendorlogs.Rows[0]["fatplus_on"].ToString();
                            double m_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_fatpluscost"].ToString(), out m_fatpluscost);
                            double p_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_fatpluscost"].ToString(), out p_fatpluscost);
                            cmd = new SqlCommand("insert into  milktransaction_logs (milktransaction_sno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            cmd.Parameters.Add("@fatplus_on", fatpluson);
                            cmd.Parameters.Add("@m_fatpluscost", m_fatpluscost);
                            cmd.Parameters.Add("@p_fatpluscost", p_fatpluscost);
                            cmd.Parameters.Add("@m_std_fat", m_std_fat);
                            cmd.Parameters.Add("@p_std_fat", p_std_fat);
                            vdm.insert(cmd);
                        }

                        double tfat = 0;
                        double tsnf = 0;
                        double cowfat = 0;
                        double cowsnf = 0;
                        double buffat = 0;
                        double bufsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Cow" && cmbstatus == "Kgs")
                        {
                            cowfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowfat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowfat", cowfat);
                            cmd.Parameters.Add("@productid", "3");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@cowfat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowfat", cowfat);
                                cmd.Parameters.Add("@productid", "3");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            cowsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowsnf", cowsnf);
                            cmd.Parameters.Add("@productid", "4");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert into fat_snf_inventory (remaining,productid,sectionid ) values(@cowsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowsnf", cowsnf);
                                cmd.Parameters.Add("@productid", "4");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Buffalo" && cmbstatus == "Kgs")
                        {
                            buffat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@buffat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@buffat", buffat);
                            cmd.Parameters.Add("@productid", "5");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining, productid,sectionid ) values (@buffat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@buffat", buffat);
                                cmd.Parameters.Add("@productid", "5");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            bufsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@bufsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@bufsnf", bufsnf);
                            cmd.Parameters.Add("@productid", "6");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@bufsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@bufsnf", bufsnf);
                                cmd.Parameters.Add("@productid", "6");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }

                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("Select  MAX(sno) as TransNo from milktransactions");
                DataTable inwordamount = vdm.SelectQuery(cmd).Tables[0];
                string inwordno = inwordamount.Rows[0]["TransNo"].ToString();
                cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", inwordno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Sno"] = k++.ToString();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();

                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);
                    }

                    //vender_account update quary .... Query Changed Ravindra....04/13/2016

                    cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                        cmd.Parameters.Add("@amount", milkvaluetotal);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        vdm.insert(cmd);
                    }
                    cmd = new SqlCommand("insert into inwordamountdetails (vendorid, dcno, amount, doe) values(@vendorid, @dcno, @amount, @vdate) ");
                    cmd.Parameters.Add("@dcno", txtdcno);
                    cmd.Parameters.Add("@amount", milkvaluetotal);
                    cmd.Parameters.Add("@vdate", dispdate);
                    cmd.Parameters.Add("@vendorid", VendorID);
                    vdm.insert(cmd);
                }
                string msg = "Inward Milk Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                double prevmilkvaluetotal = 0;
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        DataTable dtreport = new DataTable();
                        dtreport.Columns.Add("Sno");
                        dtreport.Columns.Add("DATE");
                        dtreport.Columns.Add("KGS");
                        dtreport.Columns.Add("LTRS");
                        dtreport.Columns.Add("FAT");
                        dtreport.Columns.Add("SNF");
                        dtreport.Columns.Add("CLR");
                        dtreport.Columns.Add("KG FAT RATE");
                        dtreport.Columns.Add("KG FAT");
                        dtreport.Columns.Add("KG SNF");
                        dtreport.Columns.Add("M VALUE");
                        dtreport.Columns.Add("OH");
                        dtreport.Columns.Add("SNF9");
                        dtreport.Columns.Add("MILK VALUE");
                        dtreport.Columns.Add("Transaction No");
                        dtreport.Columns.Add("DC No");
                        dtreport.Columns.Add("CC Name");
                        dtreport.Columns.Add("TANKER NO");
                        cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                        cmd.Parameters.Add("@sectionid", sno);
                        DataTable dtprevDispatch = vdm.SelectQuery(cmd).Tables[0];

                        if (dtprevDispatch.Rows.Count > 0)
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;

                            int k = 1;
                            foreach (DataRow dr in dtprevDispatch.Rows)
                            {
                                DataRow newrow = dtreport.NewRow();
                                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                string date = dtdoe.ToString("dd/MM/yyyy");
                                newrow["DATE"] = date;
                                newrow["KGS"] = dr["qty_kgs"].ToString();
                                double qty_ltr = 0;
                                double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                newrow["LTRS"] = dr["qty_ltr"].ToString();
                                double FAT = 0;
                                double.TryParse(dr["fat"].ToString(), out FAT);
                                FAT = Math.Round(FAT, 2);
                                newrow["FAT"] = FAT;
                                double SNF = 0;
                                double.TryParse(dr["snf"].ToString(), out SNF);
                                newrow["SNF"] = SNF;
                                newrow["CLR"] = dr["clr"].ToString();
                                string Rateon = dr["rate_on"].ToString();


                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;

                                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                Ltrstotal += ltrs;

                                double Kgs = 0;
                                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                kgstotal += Kgs;

                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {

                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dr["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dr["cost"].ToString(), out cost);
                                newrow["KG FAT RATE"] = cost;
                                KGFAT = Math.Round(KGFAT, 2);

                                newrow["KG FAT"] = KGFAT;
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                newrow["KG SNF"] = KGSNF;
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                //MValue = MValue / 100;
                                MValue = Math.Round(MValue, 2);
                                newrow["M VALUE"] = MValue;
                                mvaluetotal += MValue;
                                string OverheadOn = dr["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                newrow["OH"] = OHcost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                newrow["SNF9"] = DiffSNFCost;
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                newrow["MILK VALUE"] = OHandMvalue;
                                prevmilkvaluetotal += OHandMvalue;
                                newrow["Transaction No"] = dr["dcno"].ToString();
                                newrow["DC No"] = dr["partydcno"].ToString();

                                newrow["CC Name"] = dr["vendorname"].ToString();
                                newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                dtreport.Rows.Add(newrow);
                            }
                        }

                        cmd = new SqlCommand("update milktransactions set transid=@transid, dcno=@dcno, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity,transportvalue=@transportvalue where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update milktransaction_logs set milktransaction_sno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where milktransaction_sno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                    }
                }
                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE milktransactions.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", sno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();


                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);

                    }
                    double variationval = 0;
                    if (milkvaluetotal > prevmilkvaluetotal)
                    {
                        variationval = milkvaluetotal - prevmilkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount+@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }
                    else
                    {
                        variationval = prevmilkvaluetotal - milkvaluetotal;
                        cmd = new SqlCommand("update vendor_accounts set amount=amount-@amount where vendorid=@vendorid");
                        cmd.Parameters.Add("@amount", variationval);
                        cmd.Parameters.Add("@vendorid", VendorID);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into vendor_accounts (vendorid, amount) values(@vendorid,@amount) ");
                            cmd.Parameters.Add("@amount", variationval);
                            cmd.Parameters.Add("@vendorid", VendorID);
                            vdm.insert(cmd);
                        }
                    }

                    string msg = "Inward Milk Transaction updated successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_audit_milktransactions_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string txtdcno = obj.dcno;
            string txtInwardno = obj.inwardno;
            string txtvehicleNo = obj.vehicleno;
            string txtdate = obj.dispdate;
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string VendorID = obj.sourceid;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string transportvalue = obj.transportvalue;

            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string strdate = obj.dispdate;
            DateTime dispdate = Convert.ToDateTime(strdate);
            string CCname = obj.plantname + "\r\n";
            string dcno = obj.dcno + "\r\n";
            string vehicleno = obj.vehicleno + "\r\n";
            string Cell1 = "";
            string Cell2 = "";

            string Cell3 = "";
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        cmd = new SqlCommand("insert into auditmilktransactions (transid, dcno, transtype,sectionid,  qty_ltr, qty_kgs, percentageon, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, inwardno, vehicleno, temp, doe, branchid, operatedby,cellno,milktype,mbrt,acidity,partydcno,entrydate,ot,status, transportvalue) values(@transid, @dcno, @transtype, @sectionid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @inwardno, @vehicleno, @temp, @doe, @branchid, @operatedby,@cellno,@milktype,@mbrt,@acidity,@partydcno,@entrydate,@ot, 'pending',@transportvalue)");
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@partydcno", obj.partydcno);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        //long TransNo = vdm.insertScalar(cmd);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("Select  MAX(sno) as TransNo from auditmilktransactions");
                        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
                        string TransNo = dtVendor.Rows[0]["TransNo"].ToString();
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);

                            double m_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_fat"].ToString(), out m_std_fat);
                            double p_std_fat = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_fat"].ToString(), out p_std_fat);
                            string fatpluson = dtVendorlogs.Rows[0]["fatplus_on"].ToString();
                            double m_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_fatpluscost"].ToString(), out m_fatpluscost);
                            double p_fatpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_fatpluscost"].ToString(), out p_fatpluscost);
                            cmd = new SqlCommand("insert into  auditmilktransaction_logs (milktransaction_sno, milktype, rate_on, calc_on, cost, overheadon, overheadcost, m_std_snf,p_std_snf, snfplus_on, m_snfpluscost,p_snfpluscost, transport_on, transportcost, transport,fatplus_on,m_fatpluscost,p_fatpluscost,m_std_fat,p_std_fat) values (@milktransaction_sno, @milktype, @rate_on, @calc_on, @cost, @overheadon,@overheadcost, @m_std_snf,@p_std_snf, @snfplus_on, @m_snfpluscost,@p_snfpluscost, @transport_on, @transportcost, @transport,@fatplus_on,@m_fatpluscost,@p_fatpluscost,@m_std_fat,@p_std_fat)");
                            cmd.Parameters.Add("@milktransaction_sno", TransNo);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            cmd.Parameters.Add("@fatplus_on", fatpluson);
                            cmd.Parameters.Add("@m_fatpluscost", m_fatpluscost);
                            cmd.Parameters.Add("@p_fatpluscost", p_fatpluscost);
                            cmd.Parameters.Add("@m_std_fat", m_std_fat);
                            cmd.Parameters.Add("@p_std_fat", p_std_fat);
                            vdm.insert(cmd);
                        }

                        double tfat = 0;
                        double tsnf = 0;
                        double cowfat = 0;
                        double cowsnf = 0;
                        double buffat = 0;
                        double bufsnf = 0;
                        if (cmbstatus == "Ltrs")
                        {
                            tfat = (txtqtyltrs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtyltrs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (cmbstatus == "Kgs")
                        {
                            tfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tfat);
                            cmd.Parameters.Add("@productid", "1");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@remaining", tfat);
                                cmd.Parameters.Add("@productid", "1");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            tsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@remaining where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@remaining", tsnf);
                            cmd.Parameters.Add("@productid", "2");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@remaining,@productid ,@sectionid)");
                                cmd.Parameters.Add("@remaining", tsnf);
                                cmd.Parameters.Add("@productid", "2");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Cow" && cmbstatus == "Kgs")
                        {
                            cowfat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowfat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowfat", cowfat);
                            cmd.Parameters.Add("@productid", "3");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@cowfat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowfat", cowfat);
                                cmd.Parameters.Add("@productid", "3");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            cowsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@cowsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@cowsnf", cowsnf);
                            cmd.Parameters.Add("@productid", "4");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert into fat_snf_inventory (remaining,productid,sectionid ) values(@cowsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@cowsnf", cowsnf);
                                cmd.Parameters.Add("@productid", "4");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        if (milk_type == "Buffalo" && cmbstatus == "Kgs")
                        {
                            buffat = (txtqtykgs * txtfat) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@buffat where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@buffat", buffat);
                            cmd.Parameters.Add("@productid", "5");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining, productid,sectionid ) values (@buffat,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@buffat", buffat);
                                cmd.Parameters.Add("@productid", "5");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                            bufsnf = (txtqtykgs * txtsnf) / 100;
                            cmd = new SqlCommand("update  fat_snf_inventory set remaining=remaining+@bufsnf where productid=@productid and sectionid=@sectionid ");
                            cmd.Parameters.Add("@bufsnf", bufsnf);
                            cmd.Parameters.Add("@productid", "6");
                            cmd.Parameters.Add("@sectionid", DeptID);
                            if (vdm.Update(cmd) == 0)
                            {
                                cmd = new SqlCommand("insert  into fat_snf_inventory (remaining,productid,sectionid ) values(@bufsnf,@productid ,@sectionid) ");
                                cmd.Parameters.Add("@bufsnf", bufsnf);
                                cmd.Parameters.Add("@productid", "6");
                                cmd.Parameters.Add("@sectionid", DeptID);
                                vdm.insert(cmd);
                            }
                        }
                        string cell = o.CellName + "\r\n";
                        string Qtyltr = o.Qtyltr + "\r\n";
                        string Qtykg = o.Qtykg + "\r\n";
                        string fat = o.fat + "\r\n";
                        string snf = o.snf + "\r\n";
                        string temp = o.temp + "\r\n";
                        string acidity = o.acidity + "\r\n";
                        string clr = o.clr + "\r\n";
                        if (i == 1)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 2)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        if (i == 3)
                        {
                            if (Qtykg == "\r\n")
                            {
                            }
                            else
                            {
                                Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                            }
                        }
                        i++;
                    }
                }

                DataTable Report = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("DATE");
                Report.Columns.Add("KGS");
                Report.Columns.Add("LTRS");
                Report.Columns.Add("FAT");
                Report.Columns.Add("SNF");
                Report.Columns.Add("CLR");
                Report.Columns.Add("KG FAT RATE");
                Report.Columns.Add("KG FAT");
                Report.Columns.Add("KG SNF");
                Report.Columns.Add("M VALUE");
                Report.Columns.Add("OH");
                Report.Columns.Add("SNF9");
                Report.Columns.Add("MILK VALUE");
                Report.Columns.Add("Transaction No");
                Report.Columns.Add("DC No");
                Report.Columns.Add("CC Name");
                Report.Columns.Add("TANKER NO");
                cmd = new SqlCommand("Select  MAX(sno) as TransNo from auditmilktransactions");
                DataTable inwordamount = vdm.SelectQuery(cmd).Tables[0];
                string inwordno = inwordamount.Rows[0]["TransNo"].ToString();
                cmd = new SqlCommand("SELECT auditmilktransactions.dcno, auditmilktransactions.inwardno AS InwardNo, auditmilktransactions.partydcno, auditmilktransactions.vehicleno, auditmilktransactions.doe, auditmilktransactions.transtype, auditmilktransactions.qty_ltr, auditmilktransactions.qty_kgs, auditmilktransactions.percentageon, auditmilktransactions.snf, auditmilktransactions.fat, auditmilktransactions.clr, auditmilktransaction_logs.milktype, auditmilktransaction_logs.rate_on, auditmilktransaction_logs.cost, auditmilktransaction_logs.calc_on, auditmilktransaction_logs.overheadon, auditmilktransaction_logs.overheadcost, auditmilktransaction_logs.m_std_snf, auditmilktransaction_logs.p_std_snf, auditmilktransaction_logs.snfplus_on, auditmilktransaction_logs.m_snfpluscost, auditmilktransaction_logs.p_snfpluscost, auditmilktransaction_logs.transport_on, auditmilktransaction_logs.transportcost, auditmilktransaction_logs.transport, vendors.vendorname FROM auditmilktransactions INNER JOIN auditmilktransaction_logs ON auditmilktransactions.sno = auditmilktransaction_logs.milktransaction_sno INNER JOIN vendors ON auditmilktransactions.sectionid = vendors.sno WHERE auditmilktransactions.sno=@sectionid");
                cmd.Parameters.Add("@sectionid", inwordno);
                DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtDispatch.Rows.Count > 0)
                {
                    double kgfattotal = 0;
                    double kgsnftotal = 0;
                    double kgstotal = 0;
                    double Ltrstotal = 0;
                    double TStotal = 0;
                    double mvaluetotal = 0;
                    double ohtotal = 0;
                    double snf9total = 0;
                    double milkvaluetotal = 0;
                    int k = 1;
                    foreach (DataRow dr in dtDispatch.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Sno"] = k++.ToString();
                        DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                        string date = dtdoe.ToString("dd/MM/yyyy");
                        newrow["DATE"] = date;
                        newrow["KGS"] = dr["qty_kgs"].ToString();
                        double qty_ltr = 0;
                        double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                        newrow["LTRS"] = dr["qty_ltr"].ToString();
                        double FAT = 0;
                        double.TryParse(dr["fat"].ToString(), out FAT);
                        FAT = Math.Round(FAT, 2);
                        newrow["FAT"] = FAT;
                        double SNF = 0;
                        double.TryParse(dr["snf"].ToString(), out SNF);
                        newrow["SNF"] = SNF;
                        newrow["CLR"] = dr["clr"].ToString();
                        string Rateon = dr["rate_on"].ToString();

                        double weight = 0;
                        double KGFAT = 0;
                        double KGSNF = 0;
                        double ltrs = 0;

                        double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                        Ltrstotal += ltrs;

                        double Kgs = 0;
                        double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                        kgstotal += Kgs;

                        double tstotal = 0;
                        tstotal = FAT + SNF;
                        if (Rateon == "TS")
                        {

                            double TS = 0;
                            TS = FAT + SNF;
                            weight = (TS * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "KGFAT")
                        {
                            weight = (FAT * Kgs) / 100;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                        else if (Rateon == "PerLtr" || Rateon == "PerKg")
                        {
                            string CalOn = dr["calc_on"].ToString();
                            if (CalOn == "Ltrs")
                            {
                                weight = ltrs;
                                KGFAT = (FAT * ltrs) / 100;
                                KGSNF = (SNF * ltrs) / 100;
                            }
                            else
                            {
                                weight = Kgs;
                                KGFAT = (FAT * Kgs) / 100;
                                KGSNF = (SNF * Kgs) / 100;
                            }
                        }
                        double cost = 0;
                        double.TryParse(dr["cost"].ToString(), out cost);
                        newrow["KG FAT RATE"] = cost;
                        KGFAT = Math.Round(KGFAT, 2);

                        newrow["KG FAT"] = KGFAT;
                        kgfattotal += KGFAT;
                        KGSNF = Math.Round(KGSNF, 2);
                        newrow["KG SNF"] = KGSNF;
                        kgsnftotal += KGSNF;
                        double MValue = 0;
                        MValue = KGFAT * cost;
                        //MValue = MValue / 100;
                        MValue = Math.Round(MValue, 2);
                        newrow["M VALUE"] = MValue;
                        mvaluetotal += MValue;
                        string OverheadOn = dr["overheadon"].ToString();
                        double OHcost = 0;
                        double overheadcost = 0;
                        double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                        if (OverheadOn == "Ltrs")
                        {
                            OHcost = overheadcost * ltrs;
                        }
                        else
                        {
                            OHcost = overheadcost * Kgs;
                        }
                        double MSnf = 0;
                        double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                        double m_snfpluscost = 0;
                        double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                        double DiffSNFCost = 0;
                        if (SNF < MSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            diffSNF = Math.Round(diffSNF, 2);
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                            }
                        }
                        double p_snfpluscost = 0;
                        double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                        double PSnf = 0;
                        double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                        if (SNF > PSnf)
                        {
                            string SNFOn = dr["snfplus_on"].ToString();
                            double diffSNF = 0;
                            diffSNF = SNF - MSnf;
                            if (SNFOn == "Ltrs")
                            {
                                DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                            }
                            else
                            {
                                DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                            }
                        }

                        double OHandMvalue = 0;
                        OHandMvalue = MValue + OHcost + DiffSNFCost;
                        newrow["OH"] = OHcost;
                        ohtotal += OHcost;
                        DiffSNFCost = Math.Round(DiffSNFCost, 2);
                        newrow["SNF9"] = DiffSNFCost;
                        snf9total += DiffSNFCost;
                        OHandMvalue = Math.Round(OHandMvalue, 2);
                        newrow["MILK VALUE"] = OHandMvalue;
                        milkvaluetotal += OHandMvalue;
                        newrow["Transaction No"] = dr["dcno"].ToString();
                        newrow["DC No"] = dr["partydcno"].ToString();

                        newrow["CC Name"] = dr["vendorname"].ToString();
                        newrow["TANKER NO"] = dr["vehicleno"].ToString();
                        Report.Rows.Add(newrow);
                    }

                    //vender_account update quary .... Query Changed Ravindra....04/13/2016


                }
                string msg = "Audit Milk Transaction Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                double prevmilkvaluetotal = 0;
                foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        string milk_type = o.milktype;
                        string strdispdate = obj.dispdate;
                        DateTime dtdispdate = Convert.ToDateTime(strdispdate);
                        DataTable dtreport = new DataTable();
                        dtreport.Columns.Add("Sno");
                        dtreport.Columns.Add("DATE");
                        dtreport.Columns.Add("KGS");
                        dtreport.Columns.Add("LTRS");
                        dtreport.Columns.Add("FAT");
                        dtreport.Columns.Add("SNF");
                        dtreport.Columns.Add("CLR");
                        dtreport.Columns.Add("KG FAT RATE");
                        dtreport.Columns.Add("KG FAT");
                        dtreport.Columns.Add("KG SNF");
                        dtreport.Columns.Add("M VALUE");
                        dtreport.Columns.Add("OH");
                        dtreport.Columns.Add("SNF9");
                        dtreport.Columns.Add("MILK VALUE");
                        dtreport.Columns.Add("Transaction No");
                        dtreport.Columns.Add("DC No");
                        dtreport.Columns.Add("CC Name");
                        dtreport.Columns.Add("TANKER NO");
                        cmd = new SqlCommand("SELECT auditmilktransactions.dcno, auditmilktransactions.inwardno AS InwardNo, auditmilktransactions.partydcno, auditmilktransactions.vehicleno, auditmilktransactions.doe, auditmilktransactions.transtype, auditmilktransactions.qty_ltr, auditmilktransactions.qty_kgs, auditmilktransactions.percentageon, auditmilktransactions.snf, auditmilktransactions.fat, auditmilktransactions.clr, auditmilktransaction_logs.milktype, auditmilktransaction_logs.rate_on, auditmilktransaction_logs.cost, auditmilktransaction_logs.calc_on, auditmilktransaction_logs.overheadon, auditmilktransaction_logs.overheadcost, auditmilktransaction_logs.m_std_snf, auditmilktransaction_logs.p_std_snf, auditmilktransaction_logs.snfplus_on, auditmilktransaction_logs.m_snfpluscost, auditmilktransaction_logs.p_snfpluscost, auditmilktransaction_logs.transport_on, auditmilktransaction_logs.transportcost, auditmilktransaction_logs.transport, vendors.vendorname FROM auditmilktransactions INNER JOIN auditmilktransaction_logs ON auditmilktransactions.sno = auditmilktransaction_logs.milktransaction_sno INNER JOIN vendors ON auditmilktransactions.sectionid = vendors.sno WHERE auditmilktransactions.sno=@sectionid");
                        cmd.Parameters.Add("@sectionid", sno);
                        DataTable dtprevDispatch = vdm.SelectQuery(cmd).Tables[0];

                        if (dtprevDispatch.Rows.Count > 0)
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;

                            int k = 1;
                            foreach (DataRow dr in dtprevDispatch.Rows)
                            {
                                DataRow newrow = dtreport.NewRow();
                                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                string date = dtdoe.ToString("dd/MM/yyyy");
                                newrow["DATE"] = date;
                                newrow["KGS"] = dr["qty_kgs"].ToString();
                                double qty_ltr = 0;
                                double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                newrow["LTRS"] = dr["qty_ltr"].ToString();
                                double FAT = 0;
                                double.TryParse(dr["fat"].ToString(), out FAT);
                                FAT = Math.Round(FAT, 2);
                                newrow["FAT"] = FAT;
                                double SNF = 0;
                                double.TryParse(dr["snf"].ToString(), out SNF);
                                newrow["SNF"] = SNF;
                                newrow["CLR"] = dr["clr"].ToString();
                                string Rateon = dr["rate_on"].ToString();


                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;

                                double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                Ltrstotal += ltrs;

                                double Kgs = 0;
                                double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                kgstotal += Kgs;

                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {

                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dr["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dr["cost"].ToString(), out cost);
                                newrow["KG FAT RATE"] = cost;
                                KGFAT = Math.Round(KGFAT, 2);

                                newrow["KG FAT"] = KGFAT;
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                newrow["KG SNF"] = KGSNF;
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                //MValue = MValue / 100;
                                MValue = Math.Round(MValue, 2);
                                newrow["M VALUE"] = MValue;
                                mvaluetotal += MValue;
                                string OverheadOn = dr["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dr["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                newrow["OH"] = OHcost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                newrow["SNF9"] = DiffSNFCost;
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                newrow["MILK VALUE"] = OHandMvalue;
                                prevmilkvaluetotal += OHandMvalue;
                                newrow["Transaction No"] = dr["dcno"].ToString();
                                newrow["DC No"] = dr["partydcno"].ToString();

                                newrow["CC Name"] = dr["vendorname"].ToString();
                                newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                dtreport.Rows.Add(newrow);
                            }
                        }

                        cmd = new SqlCommand("update auditmilktransactions set transid=@transid, dcno=@dcno, transtype=@transtype,sectionid=@sectionid,  qty_ltr=@qty_ltr, qty_kgs=@qty_kgs, percentageon=@percentageon, snf=@snf, fat=@fat, clr=@clr, cob1=@cob, hs=@hs, phosps1=@phosps, alcohol=@alcohol, remarks=@remarks, chemist=@chemist, qco=@qco, inwardno=@inwardno, vehicleno=@vehicleno, temp=@temp, doe=@doe, branchid=@branchid, operatedby=@operatedby,cellno=@cellno,milktype=@milktype,mbrt=@mbrt,acidity=@acidity,transportvalue=@transportvalue where sno=@sno");
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@transid", DeptID);
                        cmd.Parameters.Add("@dcno", txtdcno);
                        cmd.Parameters.Add("@transtype", "in");
                        cmd.Parameters.Add("@sectionid", VendorID);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@inwardno", txtInwardno);
                        cmd.Parameters.Add("@vehicleno", txtvehicleNo);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@doe", dtdispdate);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@cellno", o.CellName);
                        cmd.Parameters.Add("@milktype", milk_type);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                        cmd.Parameters.Add("@MilkType", milk_type);
                        cmd.Parameters.Add("@VendorSno", VendorID);
                        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                        if (dtVendorlogs.Rows.Count > 0)
                        {
                            string rateon = dtVendorlogs.Rows[0]["rate_on"].ToString();
                            string calcon = dtVendorlogs.Rows[0]["calc_on"].ToString();
                            double cost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["cost"].ToString(), out cost);
                            string overheadon = dtVendorlogs.Rows[0]["overheadon"].ToString();
                            double overheadcost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["overheadcost"].ToString(), out overheadcost);
                            double m_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_std_snf"].ToString(), out m_std_snf);
                            double p_std_snf = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_std_snf"].ToString(), out p_std_snf);
                            string snfpluson = dtVendorlogs.Rows[0]["snfplus_on"].ToString();
                            double m_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["m_snfpluscost"].ToString(), out m_snfpluscost);
                            double p_snfpluscost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["p_snfpluscost"].ToString(), out p_snfpluscost);
                            string transporton = dtVendorlogs.Rows[0]["transport_on"].ToString();
                            double KmCost = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transportcost"].ToString(), out KmCost);
                            double transport = 0;
                            double.TryParse(dtVendorlogs.Rows[0]["transport"].ToString(), out transport);
                            cmd = new SqlCommand("update auditmilktransaction_logs set milktransaction_sno=@milktransaction_sno, milktype=@milktype, rate_on=@rate_on, calc_on=@calc_on, cost=@cost, overheadon=@overheadon, overheadcost=@overheadcost, m_std_snf=@m_std_snf,p_std_snf=@p_std_snf, snfplus_on=@snfplus_on, m_snfpluscost=@m_snfpluscost,p_snfpluscost=@p_snfpluscost, transport_on=@transport_on, transportcost=@transportcost, transport=@transport where milktransaction_sno=@milktransaction_sno");
                            cmd.Parameters.Add("@milktransaction_sno", sno);
                            cmd.Parameters.Add("@milktype", milk_type);
                            cmd.Parameters.Add("@rate_on", rateon);
                            cmd.Parameters.Add("@calc_on", calcon);
                            cmd.Parameters.Add("@cost", cost);
                            cmd.Parameters.Add("@overheadon", overheadon);
                            cmd.Parameters.Add("@overheadcost", overheadcost);
                            cmd.Parameters.Add("@m_std_snf", m_std_snf);
                            cmd.Parameters.Add("@p_std_snf", p_std_snf);
                            cmd.Parameters.Add("@snfplus_on", snfpluson);
                            cmd.Parameters.Add("@m_snfpluscost", m_snfpluscost);
                            cmd.Parameters.Add("@p_snfpluscost", p_snfpluscost);
                            cmd.Parameters.Add("@transport_on", transporton);
                            cmd.Parameters.Add("@transportcost", KmCost);
                            cmd.Parameters.Add("@transport", transport);
                            vdm.Update(cmd);
                        }
                        double tfat = 0;
                        double tsnf = 0;
                    }
                }

                string msg = "Inward Milk Transaction updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_batch_wise_qualitytesting_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            qualitytesting obj = js.Deserialize<qualitytesting>(title1);
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string batchid = obj.sourceid;
            string sample = obj.sample;
            string sno = obj.sno;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = obj.btnvalue;
            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (qualitytestingDetails o in obj.MilkqualityDetailsarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        cmd = new SqlCommand("insert into qualitytesting_details (sampleno, batchid, qty_ltrs, qty_kgs, percentage_on, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, temp, doe, branchid, createdby, mbrt, acidity, createdon, ot, status) values(@sample, @batchid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @temp, @doe, @branchid, @operatedby, @mbrt, @acidity, @entrydate, @ot, 'P')");
                        cmd.Parameters.Add("@sample", sample);
                        cmd.Parameters.Add("@batchid", batchid);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@doe", dtdate);
                        vdm.insert(cmd);
                    }
                }
            }
            string msg = "batch wise quality test successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_silo_wise_qualitytesting_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            qualitytesting obj = js.Deserialize<qualitytesting>(title1);
            string cmbstatus = "Kgs";
            string txtqco = obj.qco;
            string txtRemarks = obj.remarks;
            string txtChemist = obj.chemist;
            string sample = obj.sample;
            string sno = obj.sno;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = obj.btnvalue;
            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (siloqualitytestingDetails o in obj.MilksiloqualityDetailsarray)
                {
                    if (o.Qtyltr == null || o.Qtyltr == "")
                    {
                    }
                    else
                    {
                        string siloid = o.siloid;
                        double txtqtyltrs = 0;
                        double.TryParse(o.Qtyltr, out txtqtyltrs);
                        double txtqtykgs = 0;
                        double.TryParse(o.Qtykg, out txtqtykgs);
                        double txtsnf = 0;
                        double.TryParse(o.snf, out txtsnf);
                        double txtfat = 0;
                        double.TryParse(o.fat, out txtfat);
                        double txtclr = 0;
                        double.TryParse(o.clr, out txtclr);
                        double txths = 0;
                        double.TryParse(o.hs, out txths);
                        double txtAlcohol = 0;
                        double.TryParse(o.alcohol, out txtAlcohol);
                        double txttemp = 0;
                        double.TryParse(o.temp, out txttemp);
                        cmd = new SqlCommand("insert into qualitytesting_details (sampleno, siloid, qty_ltrs, qty_kgs, percentage_on, snf, fat, clr, cob1, hs, phosps1, alcohol, remarks, chemist, qco, temp, doe, branchid, createdby, mbrt, acidity, createdon, ot, status) values(@sample, @siloid, @qty_ltr, @qty_kgs, @percentageon, @snf, @fat, @clr, @cob, @hs, @phosps, @alcohol, @remarks, @chemist, @qco, @temp, @doe, @branchid, @operatedby, @mbrt, @acidity, @entrydate, @ot, 'P')");
                        cmd.Parameters.Add("@sample", sample);
                        cmd.Parameters.Add("@siloid", siloid);
                        cmd.Parameters.Add("@qty_ltr", txtqtyltrs);
                        cmd.Parameters.Add("@qty_kgs", txtqtykgs);
                        cmd.Parameters.Add("@percentageon", cmbstatus);
                        cmd.Parameters.Add("@snf", txtsnf);
                        cmd.Parameters.Add("@fat", txtfat);
                        cmd.Parameters.Add("@clr", txtclr);
                        cmd.Parameters.Add("@cob", o.cob);
                        cmd.Parameters.Add("@hs", txths);
                        cmd.Parameters.Add("@phosps", o.phosps);
                        cmd.Parameters.Add("@alcohol", txtAlcohol);
                        cmd.Parameters.Add("@remarks", txtRemarks);
                        cmd.Parameters.Add("@chemist", txtChemist);
                        cmd.Parameters.Add("@qco", txtqco);
                        cmd.Parameters.Add("@temp", txttemp);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@operatedby", UserID);
                        cmd.Parameters.Add("@ot", o.ot);
                        cmd.Parameters.Add("@mbrt", o.mbrt);
                        cmd.Parameters.Add("@acidity", o.acidity);
                        cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@doe", dtdate);
                        vdm.insert(cmd);
                    }
                }
            }
            string msg = "Silo Wise Quality Testing Successfully Saved";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    
    private void get_tankerqualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT bwq.sno, b.batch, bwq.time, bwq.sampleno, bwq.batchid, bwq.qty_ltrs, bwq.qty_kgs, bwq.percentageon, bwq.snf, bwq.fat, bwq.clr, bwq.hs, bwq.alcohol, bwq.remarks, bwq.chemist, bwq.qco, bwq.temp, bwq.doe, bwq.branchid, bwq.createdby, bwq.cob1, bwq.phosps1, bwq.mbrt,  bwq.acidity, bwq.ot, bwq.neutralizers, bwq.createdon, bwq.status FROM  qualitytesting_details bwq INNER JOIN batchmaster b on b.batchid= bwq.batchid WHERE (bwq.doe BETWEEN @d1 AND @d2) AND (bwq.branchid=@branchid) AND (bwq.batchid='45') ORDER BY bwq.doe DESC");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.clr = dr["clr"].ToString();
                SiloMonitar.hs = dr["hs"].ToString();
                SiloMonitar.alcohol = dr["alcohol"].ToString();
                //SiloMonitar.doe = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                SiloMonitar.doe = dtdoe.ToString("dd/MM/yyyy");
                SiloMonitar.transno = dr["sno"].ToString();
                SiloMonitar.batchname = dr["batch"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_auditqualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT bwq.sno, b.batch, bwq.time, bwq.sampleno, bwq.batchid, bwq.qty_ltrs, bwq.qty_kgs, bwq.percentageon, bwq.snf, bwq.fat, bwq.clr, bwq.hs, bwq.alcohol, bwq.remarks, bwq.chemist, bwq.qco, bwq.temp, bwq.doe, bwq.branchid, bwq.createdby, bwq.cob1, bwq.phosps1, bwq.mbrt,  bwq.acidity, bwq.ot, bwq.neutralizers, bwq.createdon, bwq.status FROM  qualitytesting_details bwq INNER JOIN batchmaster b on b.batchid= bwq.batchid WHERE (bwq.doe BETWEEN @d1 AND @d2) AND (bwq.branchid=@branchid) AND (bwq.batchid='46') ORDER BY bwq.doe DESC");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.clr = dr["clr"].ToString();
                SiloMonitar.hs = dr["hs"].ToString();
                SiloMonitar.alcohol = dr["alcohol"].ToString();
                //SiloMonitar.doe = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                SiloMonitar.doe = dtdoe.ToString("dd/MM/yyyy");
                SiloMonitar.transno = dr["sno"].ToString();
                SiloMonitar.batchname = dr["batch"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_batchqualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT bwq.sno, b.batch, bwq.time, bwq.sampleno, bwq.batchid, bwq.qty_ltrs, bwq.qty_kgs, bwq.percentageon, bwq.snf, bwq.fat, bwq.clr, bwq.hs, bwq.alcohol, bwq.remarks, bwq.chemist, bwq.qco, bwq.temp, bwq.doe, bwq.branchid, bwq.createdby, bwq.cob1, bwq.phosps1, bwq.mbrt,  bwq.acidity, bwq.ot, bwq.neutralizers, bwq.createdon, bwq.status FROM  qualitytesting_details bwq INNER JOIN batchmaster b on b.batchid= bwq.batchid WHERE (bwq.doe BETWEEN @d1 AND @d2) AND (bwq.branchid=@branchid) ORDER BY bwq.doe DESC");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.clr = dr["clr"].ToString();
                SiloMonitar.hs = dr["hs"].ToString();
                SiloMonitar.alcohol = dr["alcohol"].ToString();
                //SiloMonitar.doe = dr["doe"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                SiloMonitar.doe = dtdoe.ToString("dd/MM/yyyy");
                SiloMonitar.transno = dr["sno"].ToString();
                SiloMonitar.batchname = dr["batch"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_siloqualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sqt.sno,   sqt.sampleno, sqt.siloid, sqt.qty_ltrs, sqt.qty_kgs, sqt.percentageon, sqt.snf, sqt.fat, sqt.clr, sqt.hs, sqt.alcohol, sqt.remarks, sqt.chemist, sqt.qco, sqt.temp, sqt.createdon, sqt.branchid, sqt.cob1, sqt.phosps1, sqt.mbrt,  sqt.acidity, sqt.ot, sqt.neutralizers, sqt.doe, sqt.status, sm.SiloName FROM  qualitytesting_details sqt INNER JOIN silomaster sm on sm.SiloId = sqt.siloid WHERE sqt.branchid=@branchid AND sqt.doe between @d1 and @d2");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-2));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.Quantity = dr["qty_kgs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.doe = dr["doe"].ToString();
                SiloMonitar.transno = dr["sno"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_smp_silotransaction_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime date = Convert.ToDateTime(context.Request["date"]);

            double recivedqty = 0;
            double.TryParse(context.Request["recived"], out recivedqty);

            double openingbalance = 0;
            double.TryParse(context.Request["ob"], out openingbalance);

            double consumptionQuantitykgs = 0;
            double.TryParse(context.Request["Qtykgs"], out consumptionQuantitykgs);

            double stocktranfor = 0;
            string stocktransfor = context.Request["stocktransfor"];
            if (stocktransfor != "")
            {
                double.TryParse(context.Request["stocktransfor"], out stocktranfor);
            }
            double close = consumptionQuantitykgs + stocktranfor;
            double cb = openingbalance - close;
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];

            string clr = "0";
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string enterby = context.Session["Employ_Sno"].ToString();

            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into smp_details (qty_kgs, ob, recivedqty, fat, snf, clr, date, cb, branchid, enterby, stocktransfor) values (@Quantitykgs, @ob, @recivedqty,  @fat, @snf, @clr, @date, @cb, @branchid, @enterby, @stocktransfor)");
                cmd.Parameters.Add("@date", date);
                cmd.Parameters.Add("@Quantitykgs", consumptionQuantitykgs);
                cmd.Parameters.Add("@recivedqty", recivedqty);
                cmd.Parameters.Add("@ob", openingbalance);
                cmd.Parameters.Add("@cb", cb);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                cmd.Parameters.Add("@stocktransfor", stocktransfor);
                vdm.insert(cmd);
                string msg = "Transaction saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string transno = context.Request["sno"];
                cmd = new SqlCommand("update smp_details set qty_kgs = @Quantitykgs, recivedqty=@recivedqty, ob=@ob, cb=@cb, fat =@fat, snf = @snf, clr=@clr, date=@date, enterby=@enterby, stocktransfor=@stocktransfor where sno=@transno");
                cmd.Parameters.Add("@date", date);
                cmd.Parameters.Add("@Quantitykgs", consumptionQuantitykgs);
                cmd.Parameters.Add("@recivedqty", recivedqty);
                cmd.Parameters.Add("@ob", openingbalance);
                cmd.Parameters.Add("@cb", cb);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                cmd.Parameters.Add("@transno", transno);
                cmd.Parameters.Add("@stocktransfor", stocktransfor);
                vdm.Update(cmd);
                string msg = "Transaction update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_smp_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno, qty_kgs, fat, snf, date, branchid,CONVERT(varchar, date, 126) AS datetime, enterby, stocktransfor FROM  smp_details where (branchid=@branchid) AND (date  between @d1 and @d2) order by sno desc");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.doe = dr["date"].ToString();
                SiloMonitar.transno = dr["sno"].ToString();
                SiloMonitar.stocktransfor = dr["stocktransfor"].ToString();
                SiloMonitar.datetime = dr["datetime"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_inword_silotransaction_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string dat = context.Request["date"];
            DateTime date = Convert.ToDateTime(dat);
            string dcno = context.Request["dcno"];
            string otherparty = context.Request["otherparty"];
            if (otherparty == "")
            {

            }
            if (dcno == "")
            {
                dcno = "0";
            }
            double Quantitykgs = 0;
            double.TryParse(context.Request["Qtykgs"], out Quantitykgs);
            double Quantityltrs = 0; ;
            double.TryParse(context.Request["Qtyltrs"], out Quantityltrs);
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string cell = context.Request["Cell"];
            string silo = context.Request["Siloname"];
            string btnval = context.Request["btnval"];
            string vendorname = context.Request["vendorname"];
            string branchid = context.Session["Branch_ID"].ToString();
            string enterby = context.Session["Employ_Sno"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, otherpartyname, branchid, enterby,ccid) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @otherpartyname, @branchid, @enterby,@ccid)");
                cmd.Parameters.Add("@date", date);
                cmd.Parameters.Add("@dcno", dcno);
                cmd.Parameters.Add("@Quantitykgs", Quantitykgs);
                cmd.Parameters.Add("@Quantityltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@cell", cell);
                cmd.Parameters.Add("@silo", silo);
                cmd.Parameters.Add("@otherpartyname", otherparty);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                cmd.Parameters.Add("@ccid", vendorname);
                vdm.insert(cmd);

                cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                cmd.Parameters.Add("@Quantity", Quantityltrs);
                cmd.Parameters.Add("@SiloId", silo);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);

                string msg = "Transaction saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string transno = context.Request["transsno"];

                cmd = new SqlCommand("SELECT  sno,  qty_ltrs   FROM  silo_inward_transaction WHERE   (branchid = @branchid) AND (sno = @sno)");
                cmd.Parameters.Add("@sno", transno);
                cmd.Parameters.Add("@branchid", branchid);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                double SiloQuantity = Convert.ToDouble(routes.Rows[0]["qty_ltrs"].ToString());

                cmd = new SqlCommand("update silo_inward_transaction set qty_kgs = @Quantitykgs, qty_ltrs = @Quantityltrs, fat =@fat, snf = @snf, clr=@clr, otherpartyname=@otherpartyname, date=@date, enterby=@enterby,ccid=@ccid where sno=@transno");
                cmd.Parameters.Add("@date", date);
                cmd.Parameters.Add("@dcno", dcno);
                cmd.Parameters.Add("@Quantitykgs", Quantitykgs);
                cmd.Parameters.Add("@Quantityltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@cell", cell);
                cmd.Parameters.Add("@silo", silo);
                cmd.Parameters.Add("@otherpartyname", otherparty);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                cmd.Parameters.Add("@transno", transno);
                cmd.Parameters.Add("@ccid", vendorname);
                vdm.Update(cmd);

                if (branchid == "1" || branchid == "22")
                {

                }
                else
                {
                    if (SiloQuantity > Quantityltrs)
                    {
                        double qty = (Quantityltrs - SiloQuantity);
                        cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", silo);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        double qty = (SiloQuantity - Quantityltrs);
                        cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                        cmd.Parameters.Add("@Quantity", qty);
                        cmd.Parameters.Add("@SiloId", silo);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                string msg = "Transaction update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_outword_silo_transaction_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string Quantitykgs = context.Request["Qtykgs"];
            string Quantityltrs = context.Request["Qtyltrs"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string transno = context.Request["transsno"];
            double qtyltrs = 0;
            double.TryParse(Quantityltrs, out qtyltrs);
            double qty = 0;
            double.TryParse(Quantitykgs, out qty);
            string Department = context.Request["Department"];
            string batchid = context.Request["product"];
            string silo = context.Request["Siloname"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string enterby = context.Session["Employ_Sno"].ToString();
            string date = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(date);
            string obcream = context.Request["obcream"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into silo_outward_transaction (siloid, departmentid, productid, branchid, qty_kgs, qty_ltrs, fat,snf,clr, date, createdby) values (@silo, @cell, @product,  @branchid, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @enterby)");
                cmd.Parameters.Add("@date", dtdate);
                cmd.Parameters.Add("@Quantitykgs", Quantitykgs);
                cmd.Parameters.Add("@Quantityltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@cell", Department);
                cmd.Parameters.Add("@silo", silo);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@product", batchid);
                cmd.Parameters.Add("@enterby", enterby);
                vdm.insert(cmd);
                cmd = new SqlCommand("select quantity from silomonitar where siloid=@SiloId and branchId=@branchid");
                cmd.Parameters.Add("@SiloId", silo);
                cmd.Parameters.Add("@branchid", branchid);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                double quantity = 0;
                foreach (DataRow dr in routes.Rows)
                {
                    quantity = Convert.ToDouble(dr["quantity"].ToString());
                }
                cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                cmd.Parameters.Add("@Quantity", qtyltrs);
                cmd.Parameters.Add("@SiloId", silo);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);

                cmd = new SqlCommand("update processingdepartments set quantity = Quantity+@Quantity  where departmentid=@Department and branchid=@branchid");
                cmd.Parameters.Add("@Quantity", qtyltrs);
                cmd.Parameters.Add("@Department", Department);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.Update(cmd);

                if (Department == "3" || Department == "10")
                {
                    cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", qtyltrs);
                    cmd.Parameters.Add("@productid", "1217");
                    cmd.Parameters.Add("@branchid", branchid);
                    vdm.Update(cmd);
                }
                else if (Department == "4")
                {
                    if (batchid == "12" || batchid == "38" || batchid == "39")
                    {
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qtyltrs);
                        cmd.Parameters.Add("@productid", "1217");
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                string response = GetJson("Silo Outward Transaction Successfully Saved");
                context.Response.Write(response);
            }
            else
            {
                string transsno = context.Request["transsno"];
                cmd = new SqlCommand("SELECT  qty_ltrs, siloid FROM  silo_outward_transaction WHERE  (sno = @transno)");
                cmd.Parameters.Add("@transno", transno);
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                string prvqty = "";
                string prvsoid = "";
                if (dt.Rows.Count > 0)
                {
                    prvqty = dt.Rows[0]["qty_ltrs"].ToString();
                    prvsoid = dt.Rows[0]["siloid"].ToString();
                }
                //if (dt.Rows.Count > 0)
                //{
                //    cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                //    cmd.Parameters.Add("@Quantity", qtyltrs);
                //    cmd.Parameters.Add("@SiloId", silo);
                //    cmd.Parameters.Add("@branchid", branchid);
                //    vdm.Update(cmd);
                //    cmd = new SqlCommand("update processingdepartments set quantity = Quantity-@Quantity where departmentid=@Department AND branchid=@branchid");
                //    cmd.Parameters.Add("@Quantity", qtyltrs);
                //    cmd.Parameters.Add("@Department", Department);
                //    cmd.Parameters.Add("@branchid", branchid);
                //    vdm.Update(cmd);
                //}
                cmd = new SqlCommand("update silo_outward_transaction set  qty_kgs = @Quantitykgs,siloid=@silo, qty_ltrs = @Quantityltrs, fat= @fat, snf =@snf, clr=@clr, date=@date, departmentid=@departmentid, createdby=@enterby, productid=@productid where sno=@sno");
                cmd.Parameters.Add("@sno", transsno);
                cmd.Parameters.Add("@departmentid", Department);
                cmd.Parameters.Add("@date", dtdate);
                cmd.Parameters.Add("@Quantitykgs", Quantitykgs);
                cmd.Parameters.Add("@Quantityltrs", Quantityltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@productid", batchid);
                cmd.Parameters.Add("@silo", silo);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@enterby", enterby);
                vdm.Update(cmd);
                double dprvqty = Convert.ToDouble(prvqty);
                double dQuantityltrs = Convert.ToDouble(Quantityltrs);
                if (prvsoid == silo)
                {
                    if (dprvqty > dQuantityltrs)
                    {
                        double qtys = dQuantityltrs - dprvqty;
                        cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                        cmd.Parameters.Add("@Quantity", qtys);
                        cmd.Parameters.Add("@SiloId", silo);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        double qtys = dQuantityltrs - dprvqty;
                        cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                        cmd.Parameters.Add("@Quantity", qtys);
                        cmd.Parameters.Add("@SiloId", silo);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                else
                {
                    double qtys = dQuantityltrs;
                    cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                    cmd.Parameters.Add("@Quantity", qtys);
                    cmd.Parameters.Add("@SiloId", silo);
                    cmd.Parameters.Add("@branchid", branchid);
                    vdm.Update(cmd);

                    double dqtys = dprvqty;
                    cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                    cmd.Parameters.Add("@Quantity", dqtys);
                    cmd.Parameters.Add("@SiloId", prvsoid);
                    cmd.Parameters.Add("@branchid", branchid);
                    vdm.Update(cmd);
                }
                if (Department == "3" || Department == "10")
                {
                    if (dprvqty > dQuantityltrs)
                    {
                        double qtys = dQuantityltrs - dprvqty;
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qty);
                        cmd.Parameters.Add("@productid", "1217");
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        double qtys = dQuantityltrs - dprvqty;
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qty);
                        cmd.Parameters.Add("@productid", "1217");
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                else if (Department == "4")
                {
                    if (batchid == "12" || batchid == "38" || batchid == "39")
                    {
                        if (dprvqty > dQuantityltrs)
                        {
                            double qtys = dQuantityltrs - dprvqty;
                            cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                            cmd.Parameters.Add("@quantity", qty);
                            cmd.Parameters.Add("@productid", "1217");
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            double qtys = dQuantityltrs - dprvqty;
                            cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                            cmd.Parameters.Add("@quantity", qty);
                            cmd.Parameters.Add("@productid", "1217");
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                    }
                }
                //cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                //cmd.Parameters.Add("@Quantity", qtyltrs);
                //cmd.Parameters.Add("@SiloId", silo);
                //cmd.Parameters.Add("@branchid", branchid);
                //vdm.Update(cmd);
                //cmd = new SqlCommand("update processingdepartments set quantity = Quantity+@Quantity where departmentid=@Department AND branchid=@branchid ");
                //cmd.Parameters.Add("@Quantity", qtyltrs);
                //cmd.Parameters.Add("@Department", Department);
                //cmd.Parameters.Add("@branchid", branchid);
                //vdm.Update(cmd);
                string response = GetJson("Silo Outward Transaction Successfully Modified");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_myInward_silo_transaction(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string date = context.Request["getdatadate"].ToString();
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT SIT.otherpartyname, SIT.date,CONVERT(varchar, SIT.date, 126) AS datetime, SIT.siloid, SIT.dcno, SIT.cellname,SIT.qty_kgs,SIT.qty_ltrs,SIT.fat,SIT.snf,SIT.clr, SIT.enterby,S.SiloName, bi.branchname, SIT.branchid,SIT.sno as transno FROM silo_inward_transaction SIT INNER JOIN SiloMaster S on S.SiloId = SIT.siloid inner join branch_info bi on bi.sno = SIT.branchid where (SIT.date between @d1 and @d2) AND SIT.branchid=@branchid");
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.SiloId = dr["siloid"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitar.branchname = dr["branchname"].ToString();
                SiloMonitar.CellName = dr["cellname"].ToString();
                SiloMonitar.DCNo = dr["dcno"].ToString();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.OutwordQuantityltrs = dr["qty_ltrs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.clr = dr["clr"].ToString();
                SiloMonitar.transno = dr["transno"].ToString();
                SiloMonitar.doe = ((DateTime)dr["date"]).ToString("yyyy-MM-dd");
                SiloMonitar.otherpartyname = dr["otherpartyname"].ToString();
                SiloMonitar.datetime = dr["datetime"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_outward_silo_transaction(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string date = context.Request["getdatadate"].ToString();
            DateTime dtdates = Convert.ToDateTime(date);
            cmd = new SqlCommand("SELECT SOT.siloid, SOT.departmentid, SD.departmentname, S.SiloName, bi.branchname, SOT.branchid, SOT.qty_kgs,SOT.qty_ltrs,SOT.fat,SOT.snf,SOT.clr, SOT.date,CONVERT(varchar, SOT.date, 126) AS datetime, SOT.productid, SOT.sno as transno FROM silo_outward_transaction SOT INNER JOIN silomaster S on S.SiloId = SOT.siloid inner join branch_info bi on bi.sno = SOT.branchid INNER JOIN processingdepartments SD ON SD.departmentid = SOT.departmentid where (SOT.date between @d1 and @d2) AND SOT.branchid=@branchid order by SOT.date desc");
            cmd.Parameters.Add("@d1", GetLowDate(dtdates));
            cmd.Parameters.Add("@d2", GetHighDate(dtdates));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar SiloMonitar = new SiloMonitar();
                SiloMonitar.SiloId = dr["SiloId"].ToString();
                SiloMonitar.SiloName = dr["SiloName"].ToString();
                SiloMonitar.branchname = dr["branchname"].ToString();
                SiloMonitar.BranchId = dr["branchid"].ToString();
                SiloMonitar.departmentid = dr["departmentid"].ToString();
                SiloMonitar.Deportment = dr["departmentname"].ToString();
                SiloMonitar.OutwordQuantitykgs = dr["qty_kgs"].ToString();
                SiloMonitar.OutwordQuantityltrs = dr["qty_ltrs"].ToString();
                SiloMonitar.fat = dr["fat"].ToString();
                SiloMonitar.snf = dr["snf"].ToString();
                SiloMonitar.clr = dr["clr"].ToString();
                SiloMonitar.productid = dr["productid"].ToString();
                DateTime dtdate = Convert.ToDateTime(dr["date"].ToString());
                SiloMonitar.doe = dtdate.ToString("dd/MM/yyyy");
                SiloMonitar.transno = dr["transno"].ToString();
                SiloMonitar.datetime = dr["datetime"].ToString();
                SiloMonitarlst.Add(SiloMonitar);
            }
            string response = GetJson(SiloMonitarlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void silo_Quantitycheck_transaction(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string siloid = context.Request["siloid"];
            string branchid = context.Session["Branch_ID"].ToString();
            if (siloid != "Select Silo")
            {
                cmd = new SqlCommand("SELECT Quantity from SiloMonitar where SiloId='" + siloid + "' and BranchId = '" + branchid + "'");
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                List<SiloMonitar> SiloMonitarlst = new List<SiloMonitar>();
                foreach (DataRow dr in routes.Rows)
                {
                    SiloMonitar SiloMonitar = new SiloMonitar();
                    SiloMonitar.OutwordQuantitykgs = dr["Quantity"].ToString();
                    // SiloMonitar.OutwordQuantityltrs = dr["OutwordQuantityltrs"].ToString();
                    SiloMonitarlst.Add(SiloMonitar);
                }
                string response = GetJson(SiloMonitarlst);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }

    private void get_outworddispatch_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT de.sno, de.dc_no, de.cc_id, de.branchid, de.doe, de.entry_by, de.chemist, de.remarks, de.vehciecleno, de.qco, de.status, de.desp_time, de.trans_type, ds.desp_refno, ds.cellname, ds.milktype, ds.fat, ds.snf, ds.qty_ltr, ds.qty_kgs, ds.percentageon, ds.clr, ds.hs, ds.alcohol, ds.temp, ds.cob1, ds.phosps1, ds.mbrt, ds.ot, ds.sealno FROM despatch_entry AS de INNER JOIN despatch_sub AS ds ON de.sno = ds.desp_refno where de.trans_type='Out' AND de.branchid=@BranchID");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtDispathentrydetails = view.ToTable(true, "sno", "dc_no", "cc_id", "doe", "entry_by", "chemist", "remarks", "vehciecleno", "qco", "desp_time", "trans_type");
            DataTable dtDispathsubdetails_subdetails = view.ToTable(true, "desp_refno", "cellname", "milktype", "fat", "snf", "qty_ltr", "qty_kgs", "percentageon", "clr", "hs", "alcohol", "temp", "cob1", "phosps1", "mbrt", "ot", "sealno");
            List<get_DispathDetails> getDispathDetails = new List<get_DispathDetails>();
            List<Dispathentrydetails> Dispathentrydetails = new List<Dispathentrydetails>();
            List<Dispathsubdetails> Dispathsubdetails = new List<Dispathsubdetails>();
            foreach (DataRow dr in dtDispathentrydetails.Rows)
            {
                Dispathentrydetails dispentry = new Dispathentrydetails();
                dispentry.sno = dr["sno"].ToString();
                dispentry.dcno = dr["dc_no"].ToString();
                dispentry.ccid = dr["cc_id"].ToString();
                dispentry.date = dr["doe"].ToString();
                dispentry.entryby = dr["entry_by"].ToString();
                dispentry.Chemist = dr["chemist"].ToString();
                dispentry.Remarks = dr["remarks"].ToString();
                dispentry.vehicalno = dr["vehciecleno"].ToString();
                dispentry.Qco = dr["qco"].ToString();
                dispentry.transtype = dr["trans_type"].ToString();
                Dispathentrydetails.Add(dispentry);
            }
            foreach (DataRow dr in dtDispathsubdetails_subdetails.Rows)
            {
                Dispathsubdetails objdispsubdetails = new Dispathsubdetails();
                objdispsubdetails.desprefno = dr["desp_refno"].ToString();
                objdispsubdetails.cellname = dr["cellname"].ToString();
                objdispsubdetails.milktype = dr["milktype"].ToString();
                objdispsubdetails.fat = dr["fat"].ToString();
                objdispsubdetails.snf = dr["snf"].ToString();
                objdispsubdetails.qtyltr = dr["qty_ltr"].ToString();
                objdispsubdetails.qtykgs = dr["qty_kgs"].ToString();
                objdispsubdetails.percentageon = dr["percentageon"].ToString();
                objdispsubdetails.clr = dr["clr"].ToString();
                objdispsubdetails.hs = dr["hs"].ToString();
                objdispsubdetails.alcohol = dr["alcohol"].ToString();
                objdispsubdetails.temp = dr["temp"].ToString();
                objdispsubdetails.cob1 = dr["cob1"].ToString();
                objdispsubdetails.phosps1 = dr["phosps1"].ToString();
                objdispsubdetails.mbrt = dr["mbrt"].ToString();
                objdispsubdetails.ot = dr["ot"].ToString();
                objdispsubdetails.sealno = dr["sealno"].ToString();
                Dispathsubdetails.Add(objdispsubdetails);
            }
            get_DispathDetails get_DispathDetails = new get_DispathDetails();
            get_DispathDetails.Dispathentrydetails = Dispathentrydetails;
            get_DispathDetails.Dispathsubdetails = Dispathsubdetails;
            getDispathDetails.Add(get_DispathDetails);
            string response = GetJson(getDispathDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void get_inward_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe,CONVERT(varchar, m.doe, 126) AS datetime, m.branchid,m.transportvalue, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2) order by m.entrydate desc");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-10));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtmilktransaction_subdetails = view.ToTable(true, "sno", "transid", "transtype", "qty_ltr", "qty_kgs", "percentageon", "snf", "fat", "clr", "hs", "alcohol", "temp", "branchid", "operatedby", "cellno", "milktype", "cob1", "phosps1", "mbrt", "acidity", "ot", "neutralizers");
            DataTable dtmilktransactiondetails = view.ToTable(true, "sno", "inwardno", "partydcno", "vehicleno", "remarks", "chemist", "qco", "dcno", "doe", "sectionid", "vendorname", "transportvalue", "datetime");
            List<get_milktransactiondetails> getmilkinwordtransactiondetails = new List<get_milktransactiondetails>();
            List<milktransactiondetails> transactiondetails = new List<milktransactiondetails>();
            List<milktransactionsubdetails> transactionsubdetails = new List<milktransactionsubdetails>();

            foreach (DataRow dr in dtmilktransactiondetails.Rows)
            {
                milktransactionsubdetails milktrnsubdetails = new milktransactionsubdetails();
                milktrnsubdetails.milktransactonno = dr["sno"].ToString();
                milktrnsubdetails.remarks = dr["remarks"].ToString();
                milktrnsubdetails.chemist = dr["chemist"].ToString();
                milktrnsubdetails.qco = dr["qco"].ToString();
                milktrnsubdetails.dcno = dr["dcno"].ToString();
                milktrnsubdetails.vendorname = dr["vendorname"].ToString();
                milktrnsubdetails.partydcno = dr["partydcno"].ToString();
                milktrnsubdetails.inwardno = dr["inwardno"].ToString();
                milktrnsubdetails.vehicleno = dr["vehicleno"].ToString();
                milktrnsubdetails.sectionid = dr["sectionid"].ToString();
                milktrnsubdetails.transportvalue = dr["transportvalue"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string date = dtdoe.ToString("dd/MM/yyyy");
                milktrnsubdetails.doe = date;
                //milktrnsubdetails.doe = dr["doe"].ToString();
                milktrnsubdetails.datetime = dr["datetime"].ToString();
                transactionsubdetails.Add(milktrnsubdetails);
            }
            foreach (DataRow dr in dtmilktransaction_subdetails.Rows)
            {
                milktransactiondetails objmilkdetails = new milktransactiondetails();
                objmilkdetails.sno = dr["sno"].ToString();
                objmilkdetails.CellName = dr["cellno"].ToString();
                objmilkdetails.transid = dr["transid"].ToString();
                objmilkdetails.transtype = dr["transtype"].ToString();
                objmilkdetails.qtyltr = dr["qty_ltr"].ToString();
                objmilkdetails.qtykgs = dr["qty_kgs"].ToString();
                objmilkdetails.perecentageon = dr["percentageon"].ToString();
                objmilkdetails.fat = dr["fat"].ToString();
                objmilkdetails.snf = dr["snf"].ToString();
                objmilkdetails.clr = dr["clr"].ToString();
                objmilkdetails.hs = dr["hs"].ToString();
                objmilkdetails.alcohol = dr["alcohol"].ToString();
                objmilkdetails.temp = dr["temp"].ToString();
                objmilkdetails.branchid = dr["branchid"].ToString();
                objmilkdetails.operatedby = dr["operatedby"].ToString();
                objmilkdetails.cellno = dr["cellno"].ToString();
                objmilkdetails.milktype = dr["milktype"].ToString();
                objmilkdetails.cob = dr["cob1"].ToString();
                objmilkdetails.phosps = dr["phosps1"].ToString();
                objmilkdetails.mbrt = dr["mbrt"].ToString();
                objmilkdetails.ot = dr["ot"].ToString();
                objmilkdetails.acidity = dr["acidity"].ToString();
                objmilkdetails.neutralizers = dr["neutralizers"].ToString();
                transactiondetails.Add(objmilkdetails);
            }
            get_milktransactiondetails getmilk_details = new get_milktransactiondetails();
            getmilk_details.transactiondetails = transactiondetails;
            getmilk_details.transactionsubdetails = transactionsubdetails;
            getmilkinwordtransactiondetails.Add(getmilk_details);
            string response = GetJson(getmilkinwordtransactiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private void get_outward_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT m.sno, m.transid, m.dcno, m.transtype, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe,CONVERT(varchar, m.doe, 126) AS datetime, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.doe between @d1 and @d2) and (m.transtype = 'Out') order by m.doe desc");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtmilktransaction_subdetails = view.ToTable(true, "sno", "transid", "transtype", "qty_ltr", "qty_kgs", "percentageon", "snf", "fat", "clr", "hs", "alcohol", "temp", "branchid", "operatedby", "cellno", "milktype", "cob1", "phosps1", "mbrt", "acidity", "ot", "neutralizers");
            DataTable dtmilktransactiondetails = view.ToTable(true, "sno", "inwardno", "vehicleno", "remarks", "chemist", "qco", "dcno", "doe", "sectionid", "vendorname", "datetime");
            List<get_milktransactiondetails> getmilkinwordtransactiondetails = new List<get_milktransactiondetails>();
            List<milktransactiondetails> transactiondetails = new List<milktransactiondetails>();
            List<milktransactionsubdetails> transactionsubdetails = new List<milktransactionsubdetails>();

            foreach (DataRow dr in dtmilktransactiondetails.Rows)
            {
                milktransactionsubdetails milktrnsubdetails = new milktransactionsubdetails();
                milktrnsubdetails.milktransactonno = dr["sno"].ToString();
                milktrnsubdetails.remarks = dr["remarks"].ToString();
                milktrnsubdetails.chemist = dr["chemist"].ToString();
                milktrnsubdetails.qco = dr["qco"].ToString();
                milktrnsubdetails.dcno = dr["dcno"].ToString();
                milktrnsubdetails.vendorname = dr["vendorname"].ToString();

                milktrnsubdetails.inwardno = dr["inwardno"].ToString();
                milktrnsubdetails.vehicleno = dr["vehicleno"].ToString();
                milktrnsubdetails.sectionid = dr["sectionid"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string date = dtdoe.ToString("dd/MM/yyyy");
                milktrnsubdetails.doe = date;
                milktrnsubdetails.datetime = dr["datetime"].ToString();
                transactionsubdetails.Add(milktrnsubdetails);
            }
            foreach (DataRow dr in dtmilktransaction_subdetails.Rows)
            {
                milktransactiondetails objmilkdetails = new milktransactiondetails();
                objmilkdetails.sno = dr["sno"].ToString();
                objmilkdetails.CellName = dr["cellno"].ToString();
                objmilkdetails.transid = dr["transid"].ToString();
                objmilkdetails.transtype = dr["transtype"].ToString();
                objmilkdetails.qtyltr = dr["qty_ltr"].ToString();
                objmilkdetails.qtykgs = dr["qty_kgs"].ToString();
                objmilkdetails.perecentageon = dr["percentageon"].ToString();
                objmilkdetails.fat = dr["fat"].ToString();
                objmilkdetails.snf = dr["snf"].ToString();
                objmilkdetails.clr = dr["clr"].ToString();
                objmilkdetails.hs = dr["hs"].ToString();
                objmilkdetails.alcohol = dr["alcohol"].ToString();
                objmilkdetails.temp = dr["temp"].ToString();
                objmilkdetails.branchid = dr["branchid"].ToString();
                objmilkdetails.operatedby = dr["operatedby"].ToString();
                objmilkdetails.cellno = dr["cellno"].ToString();
                objmilkdetails.milktype = dr["milktype"].ToString();
                objmilkdetails.cob = dr["cob1"].ToString();
                objmilkdetails.phosps = dr["phosps1"].ToString();
                objmilkdetails.mbrt = dr["mbrt"].ToString();
                objmilkdetails.ot = dr["ot"].ToString();
                objmilkdetails.acidity = dr["acidity"].ToString();
                objmilkdetails.neutralizers = dr["neutralizers"].ToString();
                transactiondetails.Add(objmilkdetails);
            }
            get_milktransactiondetails getmilk_details = new get_milktransactiondetails();
            getmilk_details.transactiondetails = transactiondetails;
            getmilk_details.transactionsubdetails = transactionsubdetails;
            getmilkinwordtransactiondetails.Add(getmilk_details);
            string response = GetJson(getmilkinwordtransactiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public class gheedetails
    {
        public string sno { get; set; }
        public string receivedqty { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string doe { get; set; }
        public string qtykgs { get; set; }
        public string branchname { get; set; }
    }
    public class departmentwiseqtyclosingdetails
    {
        public string deptclosingid { get; set; }
        public string departmentname { get; set; }
        public string usingquantitykgs { get; set; }
        public string usingquantityltrs { get; set; }
        public string batchname { get; set; }
        public string closingqtyltrs { get; set; }

    }

    public class returnmilkdetails
    {
        public string deptid { get; set; }
        public string departmentname { get; set; }
        public string siloid { get; set; }
        public string siloname { get; set; }
        public string qty_kg { get; set; }
        public string milktype { get; set; }
        public string qty_ltr { get; set; }
        public string returnmilkid { get; set; }
        public string status { get; set; }
        public string doe { get; set; }
        public string departmentid { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
    }

    public class batchdetails
    {
        public string batchid { get; set; }
        public string batchtype { get; set; }
        public string code { get; set; }
        public string snf { get; set; }
        public string fat { get; set; }
        public string qtykgs { get; set; }
        public string qtyltrs { get; set; }
        public string sno { get; set; }
        public string fromsilo { get; set; }
        public string tosilo { get; set; }
        public string ccid { get; set; }
        public string type { get; set; }
        public string departmentid { get; set; }
        public string clr { get; set; }
        public string smp { get; set; }
        public string doe { get; set; }
        public string empname { get; set; }
        public string datetime { get; set; }
    }
    private void for_save_edit_batch_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string dept = context.Request["dept"];
            string batchtype = context.Request["batch"];
            string batchcode = context.Request["batchcode"];
            string batchid = context.Request["batchid"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into batchmaster (departmentid, batch, batchcode, branchid) values (@departmentid, @batchtype, @batchcode, @branchid)");
                cmd.Parameters.Add("@departmentid", dept);
                cmd.Parameters.Add("@batchtype", batchtype);
                cmd.Parameters.Add("@batchcode", batchcode);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
                string response = GetJson("OK");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update batchmaster set batch=@batch, batchcode=@batchcode,departmentid=@departmentid where batchid=@batchid");
                cmd.Parameters.Add("@departmentid", dept);
                cmd.Parameters.Add("@batch", batchtype);
                cmd.Parameters.Add("@batchcode", batchcode);
                cmd.Parameters.Add("@batchid", batchid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void get_batch_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT batchid, batch, batchcode, departmentid FROM batchmaster");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<batchdetails> batchdetails = new List<batchdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                batchdetails getbatchdetails = new batchdetails();
                getbatchdetails.batchid = dr["batchid"].ToString();
                getbatchdetails.batchtype = dr["batch"].ToString();
                getbatchdetails.code = dr["batchcode"].ToString();
                getbatchdetails.departmentid = dr["departmentid"].ToString();
                batchdetails.Add(getbatchdetails);
            }
            string response = GetJson(batchdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class milktransactionsubdetails_sms
    {
        public string sno { get; set; }
        public string transid { get; set; }
        public string transtype { get; set; }
        public string dcno { get; set; }
        public string qtyltr { get; set; }
        public string qtykgs { get; set; }
        public string perecentageon { get; set; }
        public string branchid { get; set; }
        public string operatedby { get; set; }
        public string cellno { get; set; }
        public string milktype { get; set; }
        public string CellName { get; set; }
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string dispdate { get; set; }
        public string plantname { get; set; }
        public string mobno { get; set; }
        public string fatcalon { get; set; }
        public string btnvalue { get; set; }
        public string sourceid { get; set; }
        public string milktransactonno { get; set; }
        public string rateon { get; set; }
        public string calcon { get; set; }
        public string cost { get; set; }
        public string overhidden { get; set; }
        public string mstdsnf { get; set; }
        public string pstdsnf { get; set; }
        public string snfpluson { get; set; }
        public string snfpluscost { get; set; }
        public string transporton { get; set; }
        public string transportcost { get; set; }
        public string transport { get; set; }
        public string entryby { get; set; }
        public string msnfpluscost { get; set; }
        public string vendorname { get; set; }
        public string sectionid { get; set; }
        public string qco { get; set; }
        public string remarks { get; set; }
        public string chemist { get; set; }
        public string vehicleno { get; set; }
        public string inwardno { get; set; }
        public string doe { get; set; }
    }
    public class milktransactiondetails_sms
    {

        public string milktransactonno { get; set; }
        public string rateon { get; set; }
        public string calcon { get; set; }
        public string cost { get; set; }
        public string overhidden { get; set; }
        public string mstdsnf { get; set; }
        public string pstdsnf { get; set; }
        public string snfpluson { get; set; }
        public string snfpluscost { get; set; }
        public string transporton { get; set; }
        public string transportcost { get; set; }
        public string transport { get; set; }
        public string entryby { get; set; }
        public string msnfpluscost { get; set; }
        public string vendorname { get; set; }
        public string sectionid { get; set; }
        public string qco { get; set; }
        public string remarks { get; set; }
        public string chemist { get; set; }
        public string vehicleno { get; set; }
        public string dcno { get; set; }
        public string inwardno { get; set; }
        public string doe { get; set; }
        public string sno { get; set; }
        public string transid { get; set; }
        public string transtype { get; set; }
        public string qtyltr { get; set; }
        public string qtykgs { get; set; }
        public string perecentageon { get; set; }
        public string branchid { get; set; }
        public string operatedby { get; set; }
        public string cellno { get; set; }
        public string milktype { get; set; }
        public string CellName { get; set; }
        public string Qtykg { get; set; }
        public string Qtyltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string clr { get; set; }
        public string cob { get; set; }
        public string ot { get; set; }
        public string hs { get; set; }
        public string phosps { get; set; }
        public string alcohol { get; set; }
        public string neutralizers { get; set; }
        public string mbrt { get; set; }
        public string sealno { get; set; }
        public string dispdate { get; set; }
        public string plantname { get; set; }
        public string mobno { get; set; }
        public string fatcalon { get; set; }
        public string btnvalue { get; set; }
        public string sourceid { get; set; }
        public string partydcno { get; set; }
        public string datetime { get; set; }
        public List<milktransactionsubdetails_sms> milktransactionsubdetailsarray { get; set; }
    }
    public class get_milktransactiondetails_sms
    {
        public List<milktransactiondetails_sms> transactiondetails { get; set; }
        public List<milktransactionsubdetails_sms> transactionsubdetails { get; set; }
    }
    private void get_approval_sms_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string entrydate = context.Request["entrydate"];
            DateTime dtentrydate = Convert.ToDateTime(entrydate);
            //DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT m.sno, m.transid, m.dcno, m.partydcno, m.transtype, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe,CONVERT(varchar, m.doe, 126) AS datetime, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.doe between @d1 and @d2)  and (m.transtype = 'In') and (m.status = 'pending')order by m.entrydate desc");
            cmd.Parameters.Add("@d1", GetLowDate(dtentrydate));
            cmd.Parameters.Add("@d2", GetHighDate(dtentrydate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtmilktransaction_subdetails = view.ToTable(true, "inwardno", "sno", "transid", "sectionid", "transtype", "qty_ltr", "qty_kgs", "percentageon", "snf", "fat", "clr", "hs", "alcohol", "temp", "branchid", "operatedby", "cellno", "milktype", "cob1", "phosps1", "mbrt", "acidity", "ot", "neutralizers");
            DataTable dtmilktransactiondetails = view.ToTable(true, "inwardno", "partydcno", "vehicleno", "remarks", "chemist", "qco", "doe", "datetime", "sectionid", "vendorname");
            List<get_milktransactiondetails_sms> getmilkinwordtransactiondetails = new List<get_milktransactiondetails_sms>();
            List<milktransactiondetails_sms> transactiondetails = new List<milktransactiondetails_sms>();
            List<milktransactionsubdetails_sms> transactionsubdetails = new List<milktransactionsubdetails_sms>();

            foreach (DataRow dr in dtmilktransactiondetails.Rows)
            {
                milktransactiondetails_sms milktrndetails = new milktransactiondetails_sms();
                //milktrndetails.milktransactonno = dr["sno"].ToString();
                milktrndetails.remarks = dr["remarks"].ToString();
                milktrndetails.chemist = dr["chemist"].ToString();
                milktrndetails.qco = dr["qco"].ToString();
                milktrndetails.dcno = dr["sectionid"].ToString();
                milktrndetails.vendorname = dr["vendorname"].ToString();
                milktrndetails.inwardno = dr["inwardno"].ToString();
                milktrndetails.vehicleno = dr["vehicleno"].ToString();
                milktrndetails.sectionid = dr["sectionid"].ToString();
                milktrndetails.partydcno = dr["partydcno"].ToString();
                DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                string date = dtdoe.ToString("dd/MM/yyyy");
                milktrndetails.doe = date;
                milktrndetails.datetime = dr["datetime"].ToString();
                transactiondetails.Add(milktrndetails);
            }
            foreach (DataRow dr in dtmilktransaction_subdetails.Rows)
            {
                milktransactionsubdetails_sms milktrnsubdetails = new milktransactionsubdetails_sms();
                milktrnsubdetails.dcno = dr["sectionid"].ToString();
                milktrnsubdetails.sno = dr["sno"].ToString();
                milktrnsubdetails.inwardno = dr["inwardno"].ToString();
                milktrnsubdetails.CellName = dr["cellno"].ToString();
                milktrnsubdetails.transid = dr["transid"].ToString();
                milktrnsubdetails.transtype = dr["transtype"].ToString();
                milktrnsubdetails.qtyltr = dr["qty_ltr"].ToString();
                milktrnsubdetails.qtykgs = dr["qty_kgs"].ToString();
                milktrnsubdetails.perecentageon = dr["percentageon"].ToString();
                milktrnsubdetails.fat = dr["fat"].ToString();
                milktrnsubdetails.snf = dr["snf"].ToString();
                milktrnsubdetails.clr = dr["clr"].ToString();
                milktrnsubdetails.hs = dr["hs"].ToString();
                milktrnsubdetails.alcohol = dr["alcohol"].ToString();
                milktrnsubdetails.temp = dr["temp"].ToString();
                milktrnsubdetails.branchid = dr["branchid"].ToString();
                milktrnsubdetails.operatedby = dr["operatedby"].ToString();
                milktrnsubdetails.cellno = dr["cellno"].ToString();
                milktrnsubdetails.milktype = dr["milktype"].ToString();
                milktrnsubdetails.cob = dr["cob1"].ToString();
                milktrnsubdetails.phosps = dr["phosps1"].ToString();
                milktrnsubdetails.mbrt = dr["mbrt"].ToString();
                milktrnsubdetails.ot = dr["ot"].ToString();
                milktrnsubdetails.acidity = dr["acidity"].ToString();
                milktrnsubdetails.neutralizers = dr["neutralizers"].ToString();
                transactionsubdetails.Add(milktrnsubdetails);
            }
            get_milktransactiondetails_sms getmilk_details = new get_milktransactiondetails_sms();
            getmilk_details.transactiondetails = transactiondetails;
            getmilk_details.transactionsubdetails = transactionsubdetails;
            getmilkinwordtransactiondetails.Add(getmilk_details);
            string response = GetJson(getmilkinwordtransactiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void save_approvalsms_click(HttpContext context)
    {

        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        string UserID = context.Session["Employ_Sno"].ToString();
        var js = new JavaScriptSerializer();
        var title1 = context.Request.Params[1];
        WebClient client = new WebClient();
        MilkDetails obj = js.Deserialize<MilkDetails>(title1);
        string txtdcno = obj.dcno;
        string txtInwardno = obj.inwardno;
        string txtvehicleNo = obj.vehicleno;
        string txtdate = obj.dispdate;
        string cmbstatus = "Kgs";
        string txtqco = obj.qco;
        string txtRemarks = obj.remarks;
        string txtChemist = obj.chemist;
        string VendorID = obj.sourceid;
        string sno = obj.sno;
        string btnvalue = obj.btnvalue;
        string pdcno = obj.pdcno;

        string DeptID = context.Session["DeptID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        string strdate = obj.dispdate;

        DateTime dispdate = Convert.ToDateTime(strdate);
        string CCname = obj.plantname + "\r\n";
        string dcno = obj.pdcno + "\r\n";
        string vehicleno = obj.vehicleno + "\r\n";
        string Cell1 = "";
        string Cell2 = "";
        string Cell3 = "";
        int i = 1;

        foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
        {
            if (o.Qtyltr == null || o.Qtyltr == "")
            {
            }
            else
            {
                double tfat = 0;
                double tsnf = 0;
                string cell = o.CellName + "\r\n";
                string Qtyltr = o.Qtyltr + "\r\n";
                string Qtykg = o.Qtykg + "\r\n";
                string fat = o.fat + "\r\n";
                string snf = o.snf + "\r\n";
                string temp = o.temp + "\r\n";
                string acidity = o.acidity + "\r\n";
                string clr = o.clr + "\r\n";
                if (i == 1)
                {
                    if (Qtykg == "\r\n")
                    {
                    }
                    else
                    {
                        Cell1 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                    }
                }
                if (i == 2)
                {
                    if (Qtykg == "\r\n")
                    {
                    }
                    else
                    {
                        Cell2 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                    }
                }
                if (i == 3)
                {
                    if (Qtykg == "\r\n")
                    {
                    }
                    else
                    {
                        Cell3 = "Cell ->" + cell + "Qtykg ->" + Qtykg + "Qtyltr ->" + Qtyltr + "Fat ->" + fat + "snf ->" + snf + "temp ->" + temp + "acidity ->" + acidity + "clr ->" + clr + "\r\n";
                    }
                }
                i++;
            }
        }

        string despatchentrytime = "";
        string Inwardtime = "";
        cmd = new SqlCommand("update milktransactions set status='Approved' where partydcno=@pdcno");
        cmd.Parameters.Add("@pdcno", Convert.ToInt32(dcno));
        vdm.Update(cmd);
        cmd = new SqlCommand("SELECT MAX(sno) as TransNo FROM despatch_entry where cc_id=@sectionid");
        cmd.Parameters.Add("@sectionid", VendorID);
        DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
        string Transsno = "";
        if (dtVendor.Rows.Count > 0)
        {
            Transsno = dtVendor.Rows[0]["TransNo"].ToString();
        }
        cmd = new SqlCommand("SELECT doe,desp_time FROM despatch_entry where sno = @sno");
        cmd.Parameters.Add("@sno", Transsno);
        DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
        if (dtVendorlogs.Rows.Count > 0)
        {
            despatchentrytime = dtVendorlogs.Rows[0]["doe"].ToString();
            Inwardtime = dtVendorlogs.Rows[0]["desp_time"].ToString();
        }
        cmd = new SqlCommand("SELECT sno, vendorcode, vendorname, vendortype, email, mobno, mobno2, panno, doe, branchid, address FROM vendors WHERE  (sno = @VendorID)");
        cmd.Parameters.Add("@VendorID", obj.sourceid);
        DataTable dtvendorinfo = vdm.SelectQuery(cmd).Tables[0];
        if (dtvendorinfo.Rows.Count > 0)
        {
            string MobNo = dtvendorinfo.Rows[0]["mobno"].ToString();
            string vendorname = dtvendorinfo.Rows[0]["vendorname"].ToString();
            if (MobNo.Length == 10)
            {
                string rdate = "DC Raised date->" + despatchentrytime + "\r\n";
                string details = "CC Name->" + vendorname + "DCNo ->" + dcno + "\r\n";
                string vehicle = "Vehcile ->" + vehicleno + "Tanker Received Time At Plant ->" + Inwardtime + "\r\n";
                string ccdet = rdate + details + vehicle;
                string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + MobNo + "&msg=" + totaldetails + "&type=1 ";
                //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();

                cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                cmd.Parameters.Add("@venorid", VendorID);
                DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                string branchvendorid = "";
                if (dtbvid.Rows.Count > 0)
                {
                    branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                }
                cmd = new SqlCommand("SELECT  sno FROM  employee_erp WHERE (phoneno = @MobNo)");
                cmd.Parameters.Add("@MobNo", MobNo);
                DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                string HRMS_EmpId = "";
                if (dtmobid.Rows.Count > 0)
                {
                    HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                }
                else
                {
                    HRMS_EmpId = branchvendorid;
                }
                cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                cmd.Parameters.Add("@empid", HRMS_EmpId);
                cmd.Parameters.Add("@mainbranch", BranchID);
                cmd.Parameters.Add("@branchid", branchvendorid);
                cmd.Parameters.Add("@msg", totaldetails);
                cmd.Parameters.Add("@mobileno", MobNo);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
            }

            cmd = new SqlCommand("SELECT sno, name, mobno, email FROM personalinfo WHERE (msgtype = 'Inward') AND (branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtMobno = vdm.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtMobno.Rows)
            {
                string PhoneNo = dr["mobno"].ToString();
                // string PhoneNo = "9092691491";
                if (PhoneNo.Length == 10)
                {
                    string rdate = "DC Raised date->" + despatchentrytime + "\r\n";
                    string details = "CC Name->" + vendorname + "DCNo ->" + dcno + "\r\n";
                    string vehicle = "Vehcile ->" + vehicleno + "Tanker Received Time At Plant ->" + Inwardtime + "\r\n";
                    string ccdet = rdate + details + vehicle;
                    string totaldetails = ccdet + Cell1 + Cell2 + Cell3;
                    string baseurl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + PhoneNo + "&msg=" + totaldetails + "&type=1 ";
                    //string baseurl = "http://123.63.33.43/blank/sms/user/urlsms.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=" + totaldetails + "&response=Y";
                    //string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + PhoneNo + "&message=%20" + totaldetails + "&source=VYSAKG&message";
                    // string baseurl = "http://103.225.76.43/blank/sms/user/urlsms.php?username=AsnTech&pass=kap@user!23&senderid=VYSAKG&dest_mobileno=" + MobNo + "&message=%20" + totaldetails + ";&response=N";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();

                    cmd = new SqlCommand("SELECT  sno, venorid FROM branch_info WHERE  (venorid = @venorid)");
                    cmd.Parameters.Add("@venorid", VendorID);
                    DataTable dtbvid = vdm.SelectQuery(cmd).Tables[0];
                    string branchvendorid = "";
                    if (dtbvid.Rows.Count > 0)
                    {
                        branchvendorid = dtbvid.Rows[0]["sno"].ToString();
                    }
                    cmd = new SqlCommand("SELECT   sno,phoneno,otpstatus FROM  employee_erp WHERE  (phoneno = @MobNo)");
                    cmd.Parameters.Add("@phoneno", MobNo);
                    DataTable dtmobid = vdm.SelectQuery(cmd).Tables[0];
                    string HRMS_EmpId = "";
                    if (dtmobid.Rows.Count > 0)
                    {
                        HRMS_EmpId = dtmobid.Rows[0]["sno"].ToString();
                    }
                    else
                    {
                        HRMS_EmpId = branchvendorid;
                    }
                    cmd = new SqlCommand("INSERT INTO smsinfo (empid, mainbranch, branchid, msg, mobileno,doe) VALUES (@empid,@mainbranch,@branchid,@msg,@mobileno,@doe)");
                    cmd.Parameters.Add("@empid", HRMS_EmpId);
                    cmd.Parameters.Add("@mainbranch", BranchID);
                    cmd.Parameters.Add("@branchid", branchvendorid);
                    cmd.Parameters.Add("@msg", totaldetails);
                    cmd.Parameters.Add("@mobileno", PhoneNo);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    vdm.insert(cmd);
                }
            }
        }
        string msg = "Approval SMS sended successfully";
        string response = GetJson(msg);
        context.Response.Write(response);
    }
    private void save_batchentrydetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string dt = context.Request["doe"];
            DateTime date = Convert.ToDateTime(dt);
            string batchtype = context.Request["batch"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string Qtykgs = context.Request["Qtykgs"];
            string Qtyltrs = context.Request["Qtyltrs"];
            string type = context.Request["type"];
            string source = context.Request["source"];
            string rate = context.Request["rate"];
            if (rate != "")
            {
                rate = context.Request["rate"];
            }
            else
            {
                rate = "0";
            }
            string dcno = context.Request["dcno"];
            if (dcno == "" || dcno == null || dcno == "undefined")
            {
                dcno = "0";
            }
            string smp = context.Request["smp"];
            string destinationsilo = context.Request["destinationsilo"];
            string clr = context.Request["clr"];
            string siloqty = context.Request["siloqty"];
            string btnval = context.Request["btnval"];
            string creamopbal = context.Request["creamopbal"];
            string BranchID = context.Session["Branch_ID"].ToString();
            string enterby = context.Session["Employ_Sno"].ToString();
            string cell = "Tanker";
            string cellmilk = "Condensed";
            string status = "A";
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("SELECT { fn IFNULL(MAX(batchcode), 0) } + 1 AS batchcode FROM batchentrydetails WHERE  (branchid = @branchid) and (batchid=@batchid)");
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@batchid", batchtype);
                DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];
                string batchcode = dtbatch.Rows[0]["batchcode"].ToString();

                if (type == "From SILO")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (batchid, fat, snf, clr, qty_kgs, qty_ltrs, type, fromsiloid,tosiloid,doe, smp, siloqty, branchid, perltrrate, createdby,batchcode) values (@batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs,@type,@source, @destinationsilo,@doe,@smp,@siloqty,@branchid, @perltrrate, @createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@perltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    //intra silo transfer
                    cmd = new SqlCommand("insert into intra_silo_transactions ( fromsiloid, tosiloid, qty_ltrs, qty_kgs, costperltr, fat, snf, clr, branchid, operatedby, doe, smp) values (@fromsiloid, @tosiloid, @qty_ltrs, @qty_kgs, @costperltr, @fat, @snf, @clr, @branchid, @operatedby, @doe, @smp)");
                    cmd.Parameters.Add("@fromsiloid", source);
                    cmd.Parameters.Add("@tosiloid", destinationsilo);
                    cmd.Parameters.Add("@qty_ltrs", Qtyltrs);
                    cmd.Parameters.Add("@qty_kgs", Qtykgs);
                    cmd.Parameters.Add("@costperltr", rate);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@operatedby", enterby);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                    cmd.Parameters.Add("@Quantity", Qtyltrs);
                    cmd.Parameters.Add("@SiloId", source);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                if (type == "From CC")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromccid, tosiloid,doe,smp,type,siloqty,branchid,perltrrate, createdby,batchcode) values (@batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @source, @destinationsilo, @doe,@smp,@type,@siloqty,@branchid,@ltrrate, @createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, ccid, branchid, enterby) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @ccid, @branchid, @enterby)");
                    cmd.Parameters.Add("@date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@dcno", dcno);
                    cmd.Parameters.Add("@Quantitykgs", Qtykgs);
                    cmd.Parameters.Add("@Quantityltrs", Qtyltrs);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@cell", cell);
                    cmd.Parameters.Add("@silo", destinationsilo);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@enterby", enterby);
                    cmd.Parameters.Add("@ccid", source);
                    vdm.insert(cmd);
                }
                if (type == "Return Milk")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (perltrrate,batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromdeptid, tosiloid,doe,smp,type,siloqty,branchid,createdby,batchcode) values (@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("insert into returnmilk_details (departmentid, siloid, quantity, createdby, branchid, doe, fat, snf, clr, qty_ltr, milktype,status) values (@departmentid, @siloid, @quantity, @UserID, @BranchID, @doe, @fat, @snf, @clr, @qty_ltr, @milktype, @status)");
                    cmd.Parameters.Add("@departmentid", source);
                    cmd.Parameters.Add("@siloid", destinationsilo);
                    cmd.Parameters.Add("@quantity", Qtykgs);
                    cmd.Parameters.Add("@UserID", enterby);
                    cmd.Parameters.Add("@BranchID", BranchID);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@milktype", "returnmilk");
                    cmd.Parameters.Add("@qty_ltr", Qtyltrs);
                    cmd.Parameters.Add("@status", status);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, deptid, branchid, enterby) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @ccid, @branchid, @enterby)");
                    cmd.Parameters.Add("@date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@dcno", dcno);
                    cmd.Parameters.Add("@Quantitykgs", Qtykgs);
                    cmd.Parameters.Add("@Quantityltrs", Qtyltrs);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@cell", cell);
                    cmd.Parameters.Add("@silo", destinationsilo);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@enterby", enterby);
                    cmd.Parameters.Add("@ccid", source);
                    vdm.insert(cmd);
                }
                if (type == "Condensed milk")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (perltrrate,batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromdeptid, tosiloid,doe,smp,type,siloqty,branchid,createdby,batchcode) values (@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, deptid, branchid, enterby) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @ccid, @branchid, @enterby)");
                    cmd.Parameters.Add("@date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@dcno", dcno);
                    cmd.Parameters.Add("@Quantitykgs", Qtykgs);
                    cmd.Parameters.Add("@Quantityltrs", Qtyltrs);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@cell", cellmilk);
                    cmd.Parameters.Add("@silo", destinationsilo);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@enterby", enterby);
                    cmd.Parameters.Add("@ccid", source);
                    vdm.insert(cmd);
                }
                if (type == "Mixed Milk")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (perltrrate,batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromdeptid, tosiloid,doe,smp,type,siloqty,branchid,createdby,batchcode) values (@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);
                }
                if (type == "Cutting Milk")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (perltrrate,batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromdeptid, tosiloid,doe,smp,type,siloqty, branchid, createdby,batchcode) values (@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);
                }
                if (type == "RCM Water")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (perltrrate,batchid,fat,snf, clr, qty_kgs, qty_ltrs, fromdeptid, tosiloid,doe,smp,type,siloqty,branchid, createdby,batchcode) values (@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, deptid, branchid, enterby) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @ccid, @branchid, @enterby)");
                    cmd.Parameters.Add("@date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@dcno", dcno);
                    cmd.Parameters.Add("@Quantitykgs", Qtykgs);
                    cmd.Parameters.Add("@Quantityltrs", Qtyltrs);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@cell", cell);
                    cmd.Parameters.Add("@silo", destinationsilo);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@enterby", enterby);
                    cmd.Parameters.Add("@ccid", source);
                    vdm.insert(cmd);
                }
                if (type == "Cream")
                {
                    cmd = new SqlCommand("insert into batchentrydetails (batchid, fat, snf, clr, qty_kgs, qty_ltrs, type, fromsiloid,tosiloid,doe, smp, siloqty, branchid, perltrrate, createdby,batchcode) values (@batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs,@type,@source, @destinationsilo,@doe,@smp,@siloqty,@branchid, @perltrrate, @createdby,@batchcode)");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@perltrrate", rate);
                    cmd.Parameters.Add("@createdby", enterby);
                    cmd.Parameters.Add("@batchcode", batchcode);
                    vdm.insert(cmd);

                    cmd = new SqlCommand("update  silomonitar set quantity = quantity-@Quantity where siloid=@SiloId and branchId=@branchid");
                    cmd.Parameters.Add("@Quantity", Qtyltrs);
                    cmd.Parameters.Add("@SiloId", source);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);

                    cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", Qtyltrs);
                    cmd.Parameters.Add("@productid", "1217");
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                cmd.Parameters.Add("@Quantity", Qtyltrs);
                cmd.Parameters.Add("@SiloId", destinationsilo);
                cmd.Parameters.Add("@branchid", BranchID);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert  into  silomonitar (SiloId, BranchId, Quantity) values(@SiloId, @BranchId, @Quantity) ");
                    cmd.Parameters.Add("@SiloId", destinationsilo);
                    cmd.Parameters.Add("@BranchId", BranchID);
                    cmd.Parameters.Add("@Quantity", Qtyltrs);
                    vdm.insert(cmd);
                }
                string msg = "Successfully Saved batch entry details";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                string oldqty = context.Request["oldqty"];
                double oqty = Convert.ToDouble(oldqty);
                double nqty = Convert.ToDouble(Qtyltrs);
                double finalqty = 0;
                if (nqty > oqty)
                {
                    finalqty = nqty - oqty;
                }
                else
                {
                    finalqty = oqty - nqty;
                }
                if (type == "From SILO")
                {
                    cmd = new SqlCommand("update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromsiloid=@source,tosiloid=@destinationsilo, doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    //cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);

                }
                if (type == "From CC")
                {
                    cmd = new SqlCommand("update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromccid=@source, tosiloid=@destinationsilo,doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    //cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                if (type == "Return Milk")
                {
                    cmd = new SqlCommand(" update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromdeptid=@source, tosiloid=@destinationsilo,doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    // cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                if (type == "Mixed Milk")
                {
                    cmd = new SqlCommand(" update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromdeptid=@source, tosiloid=@destinationsilo,doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", "mixedmilk");
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    // cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                if (type == "Cutting Milk")
                {
                    cmd = new SqlCommand("update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromdeptid=@source, tosiloid=@destinationsilo,doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", "cuttingmilk");
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    // cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                //sai
                if (type == "Condensed milk")
                {
                    cmd = new SqlCommand("update batchentrydetails set perltrrate=@ltrrate,batchid=@batchtype,fat=@fat,snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, fromdeptid=@fromdeptid, tosiloid=@destinationsilo,doe=@doe,smp=@smp,type=@type where batchentryid=@sno ");
                    //@ltrrate, @batchtype, @fat, @snf, @clr, @Qtykgs, @Qtyltrs, @fromdeptid, @destinationsilo,@doe,@smp,@type,@siloqty,@branchid,@createdby
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@fromdeptid", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    //cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                if (type == "Cream")
                {
                    cmd = new SqlCommand("SELECT  qty_kgs, qty_ltrs FROM batchentrydetails WHERE  (batchentryid = @batchentryid)");
                    cmd.Parameters.Add("@batchentryid", sno);
                    DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                    string qty_ltrs = routes.Rows[0]["qty_ltrs"].ToString();
                    double prevqty_ltrs = Convert.ToDouble(qty_ltrs);

                    cmd = new SqlCommand("update batchentrydetails set batchid=@batchtype, perltrrate=@ltrrate, fat=@fat, snf=@snf, clr=@clr, qty_kgs=@Qtykgs, qty_ltrs=@Qtyltrs, type=@type, fromsiloid=@source,tosiloid=@destinationsilo, doe=@doe, smp=@smp where batchentryid=@sno");
                    cmd.Parameters.Add("@batchtype", batchtype);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@clr", clr);
                    cmd.Parameters.Add("@Qtykgs", Qtykgs);
                    cmd.Parameters.Add("@Qtyltrs", Qtyltrs);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@destinationsilo", destinationsilo);
                    cmd.Parameters.Add("@doe", date);
                    cmd.Parameters.Add("@smp", smp);
                    //cmd.Parameters.Add("@siloqty", siloqty);
                    cmd.Parameters.Add("@ltrrate", rate);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);

                    double Qtyltrss = Convert.ToDouble(Qtyltrs);
                    if (prevqty_ltrs > Qtyltrss)
                    {
                        double qty = prevqty_ltrs - Qtyltrss;
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qty);
                        cmd.Parameters.Add("@productid", "1217");
                        cmd.Parameters.Add("@branchid", BranchID);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        double qty = prevqty_ltrs - Qtyltrss;
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qty);
                        cmd.Parameters.Add("@productid", "1217");
                        cmd.Parameters.Add("@branchid", BranchID);
                        vdm.Update(cmd);
                    }
                }

                //cmd = new SqlCommand("update  silomonitar set quantity = quantity+@Quantity where siloid=@SiloId and branchId=@branchid");
                //cmd.Parameters.Add("@Quantity", finalqty);
                //cmd.Parameters.Add("@SiloId", destinationsilo);
                //cmd.Parameters.Add("@branchid", BranchID);
                //vdm.Update(cmd);
                string msg = "Successfully Updated batch entry details";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_batchentrydetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string date = context.Request["getdatadate"].ToString();
            DateTime dttdate = Convert.ToDateTime(date);
            cmd = new SqlCommand("SELECT be.batchentryid, be.clr, be.smp, be.doe,CONVERT(varchar, be.doe, 126) AS datetime, be.batchid, b.batch, b.batchcode, be.snf, be.fat, be.qty_kgs, be.qty_ltrs, be.type, be.fromsiloid, be.fromccid, be.tosiloid, employee_erp.empname FROM batchentrydetails be inner join batchmaster b on b.batchid = be.batchid LEFT OUTER JOIN employee_erp ON employee_erp.sno=be.createdby  where be.doe between @d1 and @d2  and be.branchid = @branchid order by be.doe desc");
            cmd.Parameters.Add("@d1", GetLowDate(dttdate));
            cmd.Parameters.Add("@d2", GetHighDate(dttdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<batchdetails> batchdetails = new List<batchdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                batchdetails getbatchdetails = new batchdetails();
                getbatchdetails.batchid = dr["batchid"].ToString();
                getbatchdetails.batchtype = dr["batch"].ToString();
                getbatchdetails.snf = dr["snf"].ToString();
                getbatchdetails.fat = dr["fat"].ToString();
                getbatchdetails.qtykgs = dr["qty_kgs"].ToString();
                getbatchdetails.qtyltrs = dr["qty_ltrs"].ToString();
                getbatchdetails.sno = dr["batchentryid"].ToString();
                getbatchdetails.fromsilo = dr["fromsiloid"].ToString();
                getbatchdetails.ccid = dr["fromccid"].ToString();
                getbatchdetails.tosilo = dr["tosiloid"].ToString();
                getbatchdetails.type = dr["type"].ToString();
                getbatchdetails.clr = dr["clr"].ToString();
                getbatchdetails.smp = dr["smp"].ToString();
                getbatchdetails.empname = dr["empname"].ToString();
                DateTime dtdate = Convert.ToDateTime(dr["doe"].ToString());
                getbatchdetails.doe = dtdate.ToString("dd/MMM/yyyy");
                getbatchdetails.datetime = dr["datetime"].ToString();
                batchdetails.Add(getbatchdetails);
            }
            string response = GetJson(batchdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_department_wise_qty_details_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string departmentid = context.Request["Department"];
            string usingquantitykgs = context.Request["Qtykgs"];
            string usingquantityltrs = context.Request["Qtyltrs"];
            string batchname = context.Request["BatchName"];
            string closingqtyltrs = context.Request["Closingqty"];
            double qtykgs = 0;
            double.TryParse(usingquantitykgs, out qtykgs);
            double closingqty = 0;
            double.TryParse(closingqtyltrs, out closingqty);
            double Rqty = 0;
            Rqty = qtykgs - closingqty;

            cmd = new SqlCommand("insert into departmentwise_qtydetails (departmentid, usingquantity_kgs,usingquantity_ltrs, batchname, closingqty_ltrs) values (@departmentid, @usingquantitykgs,@usingquantityltrs,@batchname,@closingqtyltrs)");
            cmd.Parameters.Add("@departmentid", departmentid);
            cmd.Parameters.Add("@usingquantitykgs", usingquantitykgs);
            cmd.Parameters.Add("@usingquantityltrs", usingquantityltrs);
            cmd.Parameters.Add("@batchname", batchname);
            cmd.Parameters.Add("@closingqtyltrs", closingqtyltrs);
            vdm.insert(cmd);

            cmd = new SqlCommand("update processingdepartments set quantity = @quantity where departmentid = @departmentid");
            cmd.Parameters.Add("@quantity", Rqty);
            cmd.Parameters.Add("@departmentid", departmentid);
            vdm.Update(cmd);

            string msg = "successfully inserted quantity details";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_department_wise_qty_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("Select dq.deptclosingid, dq.departmentid, pd.departmentname, dq.usingquantity_kgs,dq.usingquantity_ltrs, dq.batchname, dq.closingqty_ltrs from departmentwise_qtydetails dq inner join processingdepartments pd on pd.departmentid = dq.departmentid WHERE pd.branchid=@branchid");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<departmentwiseqtyclosingdetails> deptqtydetails = new List<departmentwiseqtyclosingdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                departmentwiseqtyclosingdetails qtydetails = new departmentwiseqtyclosingdetails();
                qtydetails.deptclosingid = dr["deptclosingid"].ToString();
                qtydetails.departmentname = dr["departmentname"].ToString();
                qtydetails.usingquantitykgs = dr["usingquantity_kgs"].ToString();
                qtydetails.usingquantityltrs = dr["usingquantity_ltrs"].ToString();
                qtydetails.batchname = dr["batchname"].ToString();
                qtydetails.closingqtyltrs = dr["closingqty_ltrs"].ToString();
                deptqtydetails.Add(qtydetails);
            }
            string response = GetJson(deptqtydetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_processingdeptqty(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string deptid = context.Request["Department"];
            cmd = new SqlCommand("Select quantity from processingdepartments where departmentid = @deptid ");
            cmd.Parameters.Add("@deptid", deptid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<departmentwiseqtyclosingdetails> deptqtydetails = new List<departmentwiseqtyclosingdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                departmentwiseqtyclosingdetails qtydetails = new departmentwiseqtyclosingdetails();
                qtydetails.usingquantitykgs = dr["quantity"].ToString();
                deptqtydetails.Add(qtydetails);
            }
            string response = GetJson(deptqtydetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_returnmilkdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string departmentid = context.Request["Department"];
            string silo = context.Request["silo"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string milktype = context.Request["milktype"];
            string qtyltrs = context.Request["qtyltrs"];
            string sno = context.Request["sno"];
            string date = context.Request["date"];
            DateTime ddate = Convert.ToDateTime(date);
            string btnval = context.Request["btnval"];
            string status = "P";
            double quantity = 0;
            double.TryParse(context.Request["Qtykgs"], out quantity);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into returnmilk_details (departmentid, siloid, quantity, createdby, branchid, doe, fat, snf, clr, qty_ltr, milktype,status) values (@departmentid, @siloid, @quantity, @UserID, @BranchID, @doe, @fat, @snf, @clr, @qty_ltr, @milktype, @status)");
                cmd.Parameters.Add("@departmentid", departmentid);
                cmd.Parameters.Add("@siloid", silo);
                cmd.Parameters.Add("@quantity", quantity);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@doe", ddate);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@qty_ltr", qtyltrs);
                cmd.Parameters.Add("@status", status);
                vdm.insert(cmd);
                string msg = "Retun milk details successfully saved ";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("update  returnmilk_details set departmentid=@departmentid, siloid=@siloid, quantity=@quantity,fat=@fat, snf=@snf, clr=@clr, qty_ltr=@qty_ltr, milktype=@milktype,doe=@doe where returnmilkid=@sno");
                cmd.Parameters.Add("@departmentid", departmentid);
                cmd.Parameters.Add("@siloid", silo);
                cmd.Parameters.Add("@quantity", quantity);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@doe", ddate);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@qty_ltr", qtyltrs);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Retun milk details successfully updated";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_returnmilk_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select rm.returnmilkid, rm.doe, rm.siloid, pd.departmentname, rm.departmentid, rm.fat, rm.clr, rm.snf, s.SiloName, rm.quantity, rm.status, rm.qty_ltr, rm.milktype from returnmilk_details rm inner join processingdepartments pd on pd.departmentid = rm.departmentid inner join silomaster S on S.SiloId = rm.siloid WHERE (rm.branchid = @branchid) AND (rm.doe between @d1 and @d2) order by returnmilkid desc");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-15));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<returnmilkdetails> returnmilkdetails = new List<returnmilkdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                returnmilkdetails qtydetails = new returnmilkdetails();
                qtydetails.departmentname = dr["departmentname"].ToString();
                qtydetails.siloname = dr["SiloName"].ToString();
                qtydetails.qty_kg = dr["quantity"].ToString();
                qtydetails.qty_ltr = dr["qty_ltr"].ToString();
                qtydetails.milktype = dr["milktype"].ToString();
                qtydetails.status = dr["status"].ToString();
                qtydetails.doe = dr["doe"].ToString();
                qtydetails.siloid = dr["siloid"].ToString();
                qtydetails.returnmilkid = dr["returnmilkid"].ToString();
                qtydetails.departmentid = dr["departmentid"].ToString();
                qtydetails.fat = dr["fat"].ToString();
                qtydetails.snf = dr["snf"].ToString();
                qtydetails.clr = dr["clr"].ToString();
                returnmilkdetails.Add(qtydetails);
            }
            string response = GetJson(returnmilkdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void approve_returnmilk_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string returnmilkid = context.Request["returnmilkid"];
            string siloid = context.Request["siloid"];
            string qtyltrs = context.Request["qtyltrs"];
            string status = "A";
            string departmentname = context.Request["departmentname"];
            string siloname = context.Request["siloname"];
            string qtykgs = context.Request["qty_kg"];
            string milktype = context.Request["milktype"];
            string departmentid = context.Request["departmentid"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string doe = context.Request["doe"];
            string dcno = "0";
            string celltype = "";
            if (departmentid == "9")
            {
                celltype = "Condensed";
            }
            else
            {
                celltype = "Tanker";
            }
            DateTime dtdate = Convert.ToDateTime(doe);

            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("update  returnmilk_details set status = @status where returnmilkid=@returnmilkid and branchId=@branchid");
            cmd.Parameters.Add("@status", status);
            cmd.Parameters.Add("@returnmilkid", returnmilkid);
            cmd.Parameters.Add("@branchid", BranchID);
            vdm.Update(cmd);

            cmd = new SqlCommand("insert into silo_inward_transaction (dcno, cellname, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, deptid, branchid, enterby) values (@dcno, @cell, @silo, @Quantitykgs, @Quantityltrs, @fat, @snf, @clr, @date, @deptid, @branchid, @enterby)");
            cmd.Parameters.Add("@date", dtdate);
            cmd.Parameters.Add("@dcno", dcno);
            cmd.Parameters.Add("@Quantitykgs", qtykgs);
            cmd.Parameters.Add("@Quantityltrs", qtyltrs);
            cmd.Parameters.Add("@fat", fat);
            cmd.Parameters.Add("@snf", snf);
            cmd.Parameters.Add("@clr", clr);
            cmd.Parameters.Add("@cell", celltype);
            cmd.Parameters.Add("@silo", siloid);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@enterby", UserID);
            cmd.Parameters.Add("@deptid", departmentid);
            vdm.insert(cmd);

            cmd = new SqlCommand("update silomonitar set Quantity=Quantity+@qty where SiloId=@siloid and Branchid=@bid");
            cmd.Parameters.Add("@qty", qtyltrs);
            cmd.Parameters.Add("@siloid", siloid);
            cmd.Parameters.Add("@bid", BranchID);
            vdm.Update(cmd);

            string msg = "Retun milk details successfully Approved ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class chemical
    {
        public string sno { get; set; }
        public string chemicaltype { get; set; }
        public string doe { get; set; }
        public string ob { get; set; }
        public string receipts { get; set; }
        public string total { get; set; }
        public string phe { get; set; }
        public string cb { get; set; }
        public string used { get; set; }
        public string remarks { get; set; }
        public string branchname { get; set; }
        public string chemicalid { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string productid { get; set; }
        public string quantity { get; set; }
        public string production { get; set; }
        public string productname { get; set; }
        public string sales { get; set; }
        public string consumption { get; set; }
        public string recived { get; set; }
        public string aproveproduction { get; set; }
        public string wastage { get; set; }
        public string biproductsshortname { get; set; }
        public string qty_ltr { get; set; }
        public string datetime { get; set; }
        public string lossqty { get; set; }
        public string cuttingqty { get; set; }
        public string returnqty { get; set; }
        public string damageqty { get; set; }
    }
    private void get_chemical_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  productmaster.sno,productmaster.batchid, productmaster.departmentid, productmaster.productname, batchmaster.batch FROM productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid INNER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE (productmaster.batchid = '13') AND (productmonitar.branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                //getproduct.departmentname = dr["departmentname"].ToString(); 
                getproduct.batch = dr["batch"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void for_save_edit_chemical_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string chemicaltype = context.Request["chemical"];
            string btnvalue = context.Request["btnval"];
            string sno = context.Request["sno"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into chemicalmaster (chemicaltype, createdby, branchid, doe) values (@chemicaltype, @UserID, @BranchID, @doe)");
                cmd.Parameters.Add("@chemicaltype", chemicaltype);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string msg = "OK";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_curd_section_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string chemicaltype = context.Request["chemicalid"];
            string receipts = context.Request["receipts"];
            string ob = context.Request["ob"];
            string total = context.Request["total"];
            string cb = context.Request["cb"];
            string phe = context.Request["phe"];
            string used = context.Request["used"];
            string remarks = context.Request["remarks"];
            string sno = context.Request["sno"];
            string btnvalue = context.Request["btnvalue"];
            string date = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into chemicalconsumptiondetails (chemicalid, receipts, ob, total, cb, phe, used, remarks, branchid, doe) values (@chemicaltype, @receipts, @ob, @total, @cb, @phe, @used, @remarks, @BranchID, @doe)");
                cmd.Parameters.Add("@chemicaltype", chemicaltype);
                cmd.Parameters.Add("@receipts", receipts);
                cmd.Parameters.Add("@ob", ob);
                cmd.Parameters.Add("@total", total);
                cmd.Parameters.Add("@cb", cb);
                cmd.Parameters.Add("@phe", phe);
                cmd.Parameters.Add("@used", used);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@doe", dtdate);
                vdm.insert(cmd);
                cmd = new SqlCommand("update productmonitar set quantity= @quantity where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@quantity", cb);
                cmd.Parameters.Add("@productid", chemicaltype);
                cmd.Parameters.Add("@branchid", BranchID);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert  into productmonitar (productid, quantity,branchid) values(@productid,@quantity,@branchid) ");
                    cmd.Parameters.Add("@productid", chemicaltype);
                    cmd.Parameters.Add("@quantity", total);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.insert(cmd);
                }
                string msg = "consumption details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE chemicalconsumptiondetails SET chemicalid=@chemicaltype, receipts=@receipts, ob=@ob, total=@total, cb=@cb, phe=@phe, used=@used, remarks=@remarks, doe=@doe where sno=@sno and branchid=@Branchid");
                cmd.Parameters.Add("@chemicaltype", chemicaltype);
                cmd.Parameters.Add("@receipts", receipts);
                cmd.Parameters.Add("@ob", ob);
                cmd.Parameters.Add("@total", total);
                cmd.Parameters.Add("@cb", cb);
                cmd.Parameters.Add("@phe", phe);
                cmd.Parameters.Add("@used", used);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@doe", dtdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "consumption details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_chemicalconsumption_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            DateTime dtdate = ServerDateCurrentdate.AddDays(-5);
            cmd = new SqlCommand("Select ccd.sno, cm.sno as productid, cm.productname, bi.branchname, ccd.ob, ccd.receipts, ccd.total, ccd.phe, ccd.cb, ccd.used, ccd.remarks, ccd.doe from chemicalconsumptiondetails ccd INNER JOIN productmaster cm ON cm.sno = ccd.chemicalid INNER JOIN branch_info bi on bi.sno = ccd.branchid where ccd.branchid=@branchid AND (ccd.doe between @d1 and @d2) ORDER BY ccd.sno DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", dtdate);
            cmd.Parameters.Add("@d2", ServerDateCurrentdate);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            foreach (DataRow dr in routes.Rows)
            {
                chemical chmdetails = new chemical();
                chmdetails.chemicaltype = dr["productname"].ToString();
                chmdetails.sno = dr["sno"].ToString();
                chmdetails.doe = dr["doe"].ToString();
                chmdetails.ob = dr["ob"].ToString();
                chmdetails.receipts = dr["receipts"].ToString();
                chmdetails.total = dr["total"].ToString();
                chmdetails.phe = dr["phe"].ToString();
                chmdetails.cb = dr["cb"].ToString();
                chmdetails.used = dr["used"].ToString();
                chmdetails.remarks = dr["remarks"].ToString();
                chmdetails.chemicalid = dr["productid"].ToString();
                chmdetails.branchname = dr["branchname"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class curdproduction
    {
        public string sno { get; set; }
        public string remarks { get; set; }
        public string biproducttype { get; set; }
        public string producttype { get; set; }
        public string btnvalue { get; set; }
        public string pqty { get; set; }
        public string date { get; set; }
        public List<curdproductiondetails> curd_production_details { get; set; }
    }

    public class curdproductiondetails
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string recive_qty { get; set; }
        public string production { get; set; }
        public string sales { get; set; }
        public string curdsalerate { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string lossqty { get; set; }
        public string cuttingqty { get; set; }
        public string returnqty { get; set; }
        public string damageqty { get; set; }
    }

    public class curdpacking
    {
        public string sno { get; set; }
        public string remarks { get; set; }
        public string btnvalue { get; set; }
        public string pqty { get; set; }
        public string date { get; set; }
        public List<curdpackingdetails> curd_packing_details { get; set; }
    }

    public class curdpackingdetails
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string recive_qty { get; set; }
        public string consumption { get; set; }
        public string production { get; set; }
        public string aproduction { get; set; }
        public string wastage { get; set; }
        public string recivedqtymilk { get; set; }
    }
    private void save_curd_production_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            curdproduction obj = js.Deserialize<curdproduction>(title1);
            string btnvalue = obj.btnvalue;
            string remarks = obj.remarks;
            string biproducttype = obj.biproducttype;
            string producttype = obj.producttype;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string pqty = obj.pqty;
            string deptid = "1";
            if (btnvalue == "Save")
            {
                foreach (curdproductiondetails o in obj.curd_production_details)
                {
                    double quantity = 0;
                    cmd = new SqlCommand("select quantity from productmonitar where productid=@pid and branchid=@branchid");
                    cmd.Parameters.Add("@pid", o.productid);
                    cmd.Parameters.Add("@branchid", branchid);
                    DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                    if (dtroutes.Rows.Count > 0)
                    {
                        quantity = Convert.ToDouble(dtroutes.Rows[0]["quantity"].ToString());
                    }
                    if (quantity < 0)
                    {
                        quantity = 0;
                    }
                    string recive_qty = o.recive_qty;
                    if (recive_qty == "")
                    {
                        recive_qty = "0";
                    }
                    double reciveqty = Convert.ToDouble(recive_qty);
                    string productions = o.production;
                    if (productions == "")
                    {
                        productions = "0";
                    }
                    double production = Convert.ToDouble(productions);
                    double total = quantity + production;
                    string sales = o.sales;
                    if (sales == "")
                    {
                        sales = "0";
                    }
                    double sale = Convert.ToDouble(sales);
                    string lossqtys = o.lossqty;
                    if (lossqtys == "")
                    {
                        lossqtys = "0";
                    }
                    double lossqty = Convert.ToDouble(lossqtys);
                    string cuttingqtys = o.cuttingqty;
                    if (cuttingqtys == "")
                    {
                        cuttingqtys = "0";
                    }
                    double cuttingqty = Convert.ToDouble(cuttingqtys);
                    string returnqtys = o.returnqty;
                    if (returnqtys == "")
                    {
                        returnqtys = "0";
                    }
                    double returnqty = Convert.ToDouble(returnqtys);
                    string damageqty = o.damageqty;
                    if (damageqty == "")
                    {
                        damageqty = "0";
                    }
                    double damageqtys = Convert.ToDouble(damageqty);
                    double cb = 0;
                    if (branchid == "26" || branchid == "115")
                    {
                        cb = total - sale;
                        cb = cb - cuttingqty;
                        cb = cb + returnqty;
                        cb = cb - lossqty;
                        cb = cb - damageqtys;
                        //cb = total - sale - cuttingqty + returnqty - lossqty - damageqtys;
                    }
                    else
                    {
                        cb = total + returnqty;
                        cb = cb - sale;
                        cb = cb - cuttingqty;
                        //  cb = total - sale - cuttingqty + returnqty;
                    }
                    cmd = new SqlCommand("insert into plant_production_details (productid, qty_kgs, fat, snf, ob, productionqty, total, remarks, sales, createdby, branchid, doe, createdon,deptid,lossqty,cuttingqty,returnqty,damageqty) values  (@productid, @qty, @fat, @snf, @ob, @production, @total, @remarks, @sales, @UserID, @BranchID, @doe, @entrydate,@deptid,@lossqty,@cuttingqty,@returnqty,@damageqty)");
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@qty", o.recive_qty);
                    cmd.Parameters.Add("@fat", o.fat);
                    cmd.Parameters.Add("@snf", o.snf);
                    cmd.Parameters.Add("@ob", quantity);
                    cmd.Parameters.Add("@production", o.production);
                    cmd.Parameters.Add("@total", total);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@sales", o.sales);
                    cmd.Parameters.Add("@salesrate", o.curdsalerate);
                    cmd.Parameters.Add("@BranchID", branchid);
                    cmd.Parameters.Add("@UserID", UserID);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@entrydate", dtdate);
                    cmd.Parameters.Add("@deptid", deptid);
                    cmd.Parameters.Add("@lossqty", lossqty);
                    cmd.Parameters.Add("@cuttingqty", cuttingqty);
                    cmd.Parameters.Add("@returnqty", returnqty);
                    cmd.Parameters.Add("@damageqty", damageqtys);
                    vdm.insert(cmd);
                    cmd = new SqlCommand("update productmonitar set quantity= @quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", cb);
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@branchid", branchid);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into productmonitar (productid, quantity,branchid) values(@productid,@quantity,@branchid) ");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@quantity", cb);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                    }
                    if (producttype == "1")
                    {
                        cmd = new SqlCommand("update productmonitar set quantity = quantity-@production where productid=@bpid and branchid=@branchid");
                        cmd.Parameters.Add("@production", production);
                        cmd.Parameters.Add("@bpid", biproducttype);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into productmonitar (productid, quantity,branchid) values(@productid,@quantity,@branchid) ");
                            cmd.Parameters.Add("@productid", biproducttype);
                            cmd.Parameters.Add("@quantity", production);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Production details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (curdproductiondetails o in obj.curd_production_details)
                {
                    string sno = obj.sno;
                    double quantity = 0;
                    double quantitydetails;
                    cmd = new SqlCommand("select quantity from productmonitar where productid=@pid and branchid=@branchid");
                    cmd.Parameters.Add("@pid", o.productid);
                    cmd.Parameters.Add("@branchid", branchid);
                    DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                    if (dtroutes.Rows.Count > 0)
                    {
                        quantity = Convert.ToDouble(dtroutes.Rows[0]["quantity"].ToString());
                    }
                    if (quantity < 0)
                    {
                        quantity = 0;
                    }
                    string productions = o.production;
                    if (productions == "")
                    {
                        productions = "0";
                    }
                    string sales = o.sales;
                    if (sales == "")
                    {
                        sales = "0";
                    }
                    string lossqtys = o.lossqty;
                    if (lossqtys == "")
                    {
                        lossqtys = "0";
                    }
                    string cuttingqtys = o.cuttingqty;
                    if (cuttingqtys == "")
                    {
                        cuttingqtys = "0";
                    }
                    string returnqtys = o.returnqty;
                    if (returnqtys == "")
                    {
                        returnqtys = "0";
                    }
                    string damageqtys = o.damageqty;
                    if (damageqtys == "")
                    {
                        damageqtys = "0";
                    }
                    double production = Convert.ToDouble(productions);
                    double sale = Convert.ToDouble(sales);
                    double lossqty = Convert.ToDouble(lossqtys);
                    double cuttingqty = Convert.ToDouble(cuttingqtys);
                    double returnqty = Convert.ToDouble(returnqtys);
                    double damageqty = Convert.ToDouble(damageqtys);
                    cmd = new SqlCommand("Select productionqty as production,sales,lossqty,cuttingqty,returnqty, damageqty from plant_production_details where sno = @sno");
                    cmd.Parameters.Add("@sno", sno);
                    DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                    double dtquantity = Convert.ToDouble(routes.Rows[0]["production"].ToString());
                    double dtsales = Convert.ToDouble(routes.Rows[0]["sales"].ToString());
                    double dtcuttingqty = Convert.ToDouble(routes.Rows[0]["cuttingqty"].ToString());
                    double dreturnqty = Convert.ToDouble(routes.Rows[0]["returnqty"].ToString());
                    double ddamageqty = Convert.ToDouble(routes.Rows[0]["damageqty"].ToString());
                    double dlossqty = Convert.ToDouble(routes.Rows[0]["lossqty"].ToString());
                    //production
                    if (dtquantity > Convert.ToDouble(production))
                    {
                        quantitydetails = dtquantity - Convert.ToDouble(production);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(production) - dtquantity;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    if (biproducttype == "93" || biproducttype == "92" || biproducttype == "1211" || biproducttype == "1213")
                    {
                        if (dtquantity > Convert.ToDouble(production))
                        {
                            quantitydetails = dtquantity - Convert.ToDouble(production);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", biproducttype);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(production) - dtquantity;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", biproducttype);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                    }
                    // Sale
                    if (dtsales > Convert.ToDouble(sale))
                    {
                        quantitydetails = dtsales - Convert.ToDouble(sale);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(sale) - dtsales;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    // Cutting Qty
                    if (dtcuttingqty > Convert.ToDouble(cuttingqty))
                    {
                        quantitydetails = dtcuttingqty - Convert.ToDouble(cuttingqty);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(cuttingqty) - dtcuttingqty;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    if (branchid == "26" || branchid == "115")
                    {
                        // Damage Qty
                        if (ddamageqty > Convert.ToDouble(damageqty))
                        {
                            quantitydetails = ddamageqty - Convert.ToDouble(damageqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(damageqty) - ddamageqty;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        // Loss Qty
                        if (dlossqty > Convert.ToDouble(lossqty))
                        {
                            quantitydetails = dlossqty - Convert.ToDouble(lossqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(lossqty) - dlossqty;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                    }
                    // Return Milk
                    if (dreturnqty > Convert.ToDouble(returnqty))
                    {
                        quantitydetails = dreturnqty - Convert.ToDouble(returnqty);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(returnqty) - dreturnqty;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    if (o.recive_qty == "" || o.recive_qty == null)
                    {
                        o.recive_qty = "0";
                    }
                    else
                    {
                        o.recive_qty = o.recive_qty;
                    }
                    double reciveqty = Convert.ToDouble(o.recive_qty);
                    double total = quantity + production;
                    double cb = 0;
                    if (branchid == "26" || branchid == "15")
                    {
                        cb = total - sale - cuttingqty + returnqty - lossqty - damageqty;
                    }
                    else
                    {
                        cb = total - sale - cuttingqty + returnqty;
                    }
                    cmd = new SqlCommand("UPDATE plant_production_details SET productid=@productid, qty_kgs=@qty, productionqty=@production, total=@total, remarks=@remarks, sales=@sales, createdon=@doe,lossqty=@lossqty,cuttingqty=@cuttingqty, returnqty=@returnqty, damageqty=@damageqty where sno=@sno and branchid=@Branchid");
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@qty", o.recive_qty);
                    //cmd.Parameters.Add("@ob", quantity);
                    cmd.Parameters.Add("@production", o.production);
                    cmd.Parameters.Add("@total", total);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@sales", o.sales);
                    cmd.Parameters.Add("@BranchID", branchid);
                    cmd.Parameters.Add("@UserID", UserID);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@lossqty", lossqty);
                    cmd.Parameters.Add("@sno", sno);
                    cmd.Parameters.Add("@cuttingqty", cuttingqty);
                    cmd.Parameters.Add("@returnqty", returnqty);
                    cmd.Parameters.Add("@damageqty", damageqty);
                    vdm.Update(cmd);
                    string msg = "Curd Production details modified successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_curdproduction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string date = context.Request["getdatadate"].ToString();
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT cpd.sno, cpd.productid, cpd.cuttingqty,cpd.fat, cpd.snf, cpd.qty_kgs, cpd.ob,cpd.productionqty as production, cpd.total, cpd.remarks, cpd.sales, cpd.branchid, cpd.createdon, CONVERT(varchar, cpd.createdon, 126)  AS datetime, pm.productname, pm.biproductsshortname,cpd.createdon as doe,cpd.lossqty, cpd.returnqty,cpd.damageqty FROM   plant_production_details AS cpd LEFT OUTER JOIN productmaster AS pm ON pm.sno = cpd.productid WHERE  (cpd.branchid = @branchid) AND (cpd.createdon BETWEEN @d1 AND @d2) AND (cpd.deptid = 1)  ORDER BY cpd.createdon DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            foreach (DataRow dr in routes.Rows)
            {
                chemical chmdetails = new chemical();
                chmdetails.sno = dr["sno"].ToString();
                chmdetails.productid = dr["productid"].ToString();
                chmdetails.fat = dr["fat"].ToString();
                chmdetails.snf = dr["snf"].ToString();
                chmdetails.quantity = dr["qty_kgs"].ToString();
                chmdetails.ob = dr["ob"].ToString();
                chmdetails.production = dr["production"].ToString();
                chmdetails.total = dr["total"].ToString();
                chmdetails.doe = dr["doe"].ToString();
                chmdetails.remarks = dr["remarks"].ToString();
                chmdetails.productname = dr["productname"].ToString();
                chmdetails.sales = dr["sales"].ToString();
                chmdetails.biproductsshortname = dr["biproductsshortname"].ToString();
                chmdetails.datetime = dr["datetime"].ToString();
                chmdetails.lossqty = dr["lossqty"].ToString();
                chmdetails.cuttingqty = dr["cuttingqty"].ToString();
                chmdetails.returnqty = dr["returnqty"].ToString();
                chmdetails.damageqty = dr["damageqty"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void lab_curdproduction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select cpd.sno, cpd.productid, cpd.fat, cpd.snf, cpd.qty_kgs, cpd.ob, cpd.productionqty as production, cpd.total, cpd.remarks, cpd.sales, cpd.createdby, cpd.branchid, cpd.createdon, pm.productname, bi.branchname from plant_production_details cpd INNER JOIN productmaster pm ON pm.sno = cpd.productid INNER JOIN branch_info bi on bi.sno = cpd.branchid  WHERE  (cpd.createdon BETWEEN @d1 AND @d2) AND (cpd.branchid=@branchid) AND (pm.batchid != '16') AND (cpd.deptid = '1')  ORDER BY cpd.createdon");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", BranchID);
            //cmd.Parameters.Add("@doe", ServerDateCurrentdate.AddDays(-1));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            foreach (DataRow dr in routes.Rows)
            {
                chemical chmdetails = new chemical();
                chmdetails.sno = dr["sno"].ToString();
                chmdetails.productid = dr["productid"].ToString();
                chmdetails.fat = dr["fat"].ToString();
                chmdetails.snf = dr["snf"].ToString();
                chmdetails.quantity = dr["qty_kgs"].ToString();
                chmdetails.ob = dr["ob"].ToString();
                chmdetails.production = dr["production"].ToString();
                chmdetails.total = dr["total"].ToString();
                chmdetails.doe = dr["createdon"].ToString();
                chmdetails.remarks = dr["remarks"].ToString();
                chmdetails.branchname = dr["branchname"].ToString();
                chmdetails.productname = dr["productname"].ToString();
                chmdetails.sales = dr["sales"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_productqty_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string productid = context.Request["productid"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select quantity, fat, snf from productmonitar where productid=@productid and branchid=@branchid");
            cmd.Parameters.Add("@productid", productid);
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            foreach (DataRow dr in routes.Rows)
            {
                chemical chmdetails = new chemical();
                chmdetails.quantity = dr["quantity"].ToString();
                chmdetails.fat = dr["fat"].ToString();
                chmdetails.snf = dr["snf"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_siloqty_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string siloname = context.Request["siloname"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select Quantity from silomonitar where siloid=@siloid");
            cmd.Parameters.Add("@siloid", siloname);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            foreach (DataRow dr in routes.Rows)
            {
                chemical chmdetails = new chemical();
                chmdetails.quantity = dr["Quantity"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_culter_details_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string productid = context.Request["productid"];
            string ob = context.Request["ob"];
            string recived = context.Request["recived"];
            string total = context.Request["total"];
            string consumption = context.Request["consumption"];
            string cb = context.Request["cb"];
            string wastage = context.Request["cb"];
            string returnvalue = context.Request["cb"];
            string remarks = context.Request["remarks"];
            string sno = context.Request["sno"];
            string btnvalue = context.Request["btnvalue"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into curd_pakingmaterial (productid, ob, recived, total, consumption,  remarks, enteredby, branchid, doe) values  (@productid, @ob, @recived, @total, @consumption, @remarks, @UserID, @BranchID, @doe)");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@ob", ob);
                cmd.Parameters.Add("@recived", recived);
                cmd.Parameters.Add("@total", total);
                cmd.Parameters.Add("@consumption", consumption);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@remarks", remarks);
                vdm.insert(cmd);
                string msg = "details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE curd_pakingmaterial SET productid=@productid, ob=@ob, recived=@recived, total=@total, remarks=@remarks, consumption=@consumption, enteredby = @UserID, doe=@doe where sno=@sno and branchid=@Branchid");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@ob", ob);
                cmd.Parameters.Add("@recived", recived);
                cmd.Parameters.Add("@total", total);
                cmd.Parameters.Add("@consumption", consumption);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class coldroom
    {
        public string quantity { get; set; }
        public string disp_qty { get; set; }
        public string rootname { get; set; }
        public string cutting { get; set; }
        public string doe { get; set; }
        public string branchname { get; set; }
        public string productid { get; set; }
        public string productname { get; set; }
        public string dispatchquantity { get; set; }
        public string sno { get; set; }
        public string btnvalue { get; set; }
        public string remarks { get; set; }
        public string date { get; set; }
        public string openingbalance { get; set; }
        public string closingbalance { get; set; }
        public string dispatch { get; set; }
        public string transfer { get; set; }
        public List<coldroomstock> cold_room_stock_details { get; set; }
    }

    public class coldroomstock
    {
        public string sno { get; set; }
        public string quantity { get; set; }
        public string disp_qty { get; set; }
        public string rootname { get; set; }
        public string remarks { get; set; }
        public string cutting { get; set; }
        public string doe { get; set; }
        public string branchname { get; set; }
        public string productid { get; set; }
        public string productname { get; set; }
        public string openingbalance { get; set; }
        public string despatch { get; set; }
        public string transfer { get; set; }
        public string closingbalance { get; set; }
    }

    public class cipcleaning
    {
        public string sno { get; set; }
        public string quantity { get; set; }
        public string chemical { get; set; }
        public string startingtime { get; set; }
        public string endingtime { get; set; }
        public string cutting { get; set; }
        public string doe { get; set; }
        public string branchname { get; set; }
        public string siloid { get; set; }
        public string siloname { get; set; }
        public string tempurature { get; set; }
        public string remarks { get; set; }
        public string actualstreangth { get; set; }
    }
    private void save_coldroomstock_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            coldroom obj = js.Deserialize<coldroom>(title1);
            string btnvalue = obj.btnvalue;
            string remarks = obj.remarks;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            if (btnvalue == "Save")
            {
                foreach (coldroomstock o in obj.cold_room_stock_details)
                {
                    double openingbalances = 0;
                    double despatchs = 0;
                    double cuttings = 0;
                    double remaingmilk = 0;
                    double transfers = 0;
                    double closingbalances = 0;
                    if (o.disp_qty != "")
                    {
                        string quantity = "";
                        cmd = new SqlCommand("select quantity from productmonitar where productid=@pid and branchid=@branchid");
                        cmd.Parameters.Add("@pid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                        if (dtroutes.Rows.Count > 0)
                        {
                            quantity = dtroutes.Rows[0]["quantity"].ToString();
                        }
                        string openingbalance = o.openingbalance;
                        if (openingbalance == "" || openingbalance == null)
                        {
                            openingbalance = "0";
                        }
                        openingbalances = Convert.ToDouble(openingbalance);
                        string despatch = o.disp_qty;
                        if (despatch == "" || despatch == null)
                        {
                            despatch = "0";
                        }
                        despatchs = Convert.ToDouble(despatch);
                        string cutting = o.cutting;
                        if (cutting == "" || cutting == null)
                        {
                            cutting = "0";
                        }
                        cuttings = Convert.ToDouble(cutting);
                        string transfer = o.transfer;
                        if (transfer == "" || transfer == null)
                        {
                            transfer = "0";
                        }
                        transfers = Convert.ToDouble(transfer);
                        string closingbalance = o.closingbalance;
                        if (closingbalance == "" || closingbalance == null)
                        {
                            closingbalance = "0";
                        }
                        closingbalances = Convert.ToDouble(closingbalance);
                        remaingmilk = openingbalances - despatchs - cuttings - transfers;
                        cmd = new SqlCommand("insert into coldroomstockdetails ( productid, producttotalquantity, dispatchquantity,  cutting, branchid, userid, doe, remarks, closingbalance,transfer) values  (@productid, @producttotalquantity, @dispatchquantity, @cutting, @branchid, @userid, @doe, @remarks, @closingbalance,@transfer)");
                        //productid, producttotalquantity, dispatchquantity, rootname, cutting, branchid, userid, doe, remarks, closingbalance
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@producttotalquantity", openingbalance);
                        cmd.Parameters.Add("@dispatchquantity", despatch);
                        cmd.Parameters.Add("@cutting", cutting);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@remarks", remarks);
                        cmd.Parameters.Add("@closingbalance", remaingmilk);
                        cmd.Parameters.Add("@transfer", transfer);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("UPDATE productmonitar SET quantity=@updateval where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@updateval", remaingmilk);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                string msg = "Cold Room Stock Details are Successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (coldroomstock o in obj.cold_room_stock_details)
                {
                    cmd = new SqlCommand("UPDATE coldroomstockdetails SET productid=@productid, dispatchquantity=@dispatchquantity,  rootname=@rootname, cutting=@cutting, remarks=@remarks, userid = @UserID, doe=@doe where sno=@sno and branchid=@Branchid");
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@BranchID", branchid);
                    cmd.Parameters.Add("@UserID", UserID);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    //cmd.Parameters.Add("@producttotalquantity", quantity);
                    cmd.Parameters.Add("@dispatchquantity", o.disp_qty);
                    cmd.Parameters.Add("@rootname", o.rootname);
                    cmd.Parameters.Add("@cutting", o.cutting);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@sno", obj.sno);
                    vdm.Update(cmd);
                    string msg = "details modified successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void modify_cold_room_click(HttpContext context)
    {
        double quantity = 0;
        string branchid = context.Session["Branch_ID"].ToString();
        string sno = context.Request["sno"];
        string productid = context.Request["productid"];
        string productname = context.Request["productname"];

        string openingbalnace = context.Request["openingbalnace"];
        string dispatch = context.Request["dispatch"];

        string cutting = context.Request["cutting"];
        string oldcuttinmilk = context.Request["oldcuttinmilk"];
        string oldclosingbalance = context.Request["closingbalance"];

        string transfer = context.Request["transfer"];
        string oldtransfer = context.Request["oldtransfer"];

        string btnvalue = context.Request["btnvalue"];
        if (btnvalue == "Modify")
        {
            double opbal = 0;
            double dispatchs = 0;
            double cuttings = 0;
            double oldcuttings = 0;
            double closings = 0;
            double oldtotal = 0;
            double ocbbal = 0;
            double total = 0;
            double balance = 0;
            double oldtransfers = 0;
            double transfers = 0;
            double remaing = 0;
            double totalcb = 0;
            cmd = new SqlCommand("select quantity from productmonitar where productid=@pid and branchid=@branchid");
            cmd.Parameters.Add("@pid", productid);
            cmd.Parameters.Add("@branchid", branchid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            if (dtroutes.Rows.Count > 0)
            {
                quantity = Convert.ToDouble(dtroutes.Rows[0]["quantity"].ToString());
            }
            if (quantity < 0)
            {
                quantity = 0;
            }
            if (openingbalnace == "" || openingbalnace == null)
            {
                openingbalnace = "0";
            }
            opbal = Convert.ToDouble(openingbalnace);
            if (dispatch == "" || dispatch == null)
            {
                dispatch = "0";
            }
            dispatchs = Convert.ToDouble(dispatch);
            if (cutting == "" || cutting == null)
            {
                cutting = "0";
            }
            cuttings = Convert.ToDouble(cutting);
            if (oldcuttinmilk == "" || oldcuttinmilk == null)
            {
                oldcuttinmilk = "0";
            }
            oldcuttings = Convert.ToDouble(oldcuttinmilk);
            if (oldclosingbalance == "" || oldclosingbalance == null)
            {
                oldclosingbalance = "0";
            }
            ocbbal = Convert.ToDouble(oldclosingbalance);
            if (transfer == "" || transfer == null)
            {
                transfer = "0";
            }
            transfers = Convert.ToDouble(transfer);
            if (oldtransfer == "" || oldtransfer == null)
            {
                oldtransfer = "0";
            }
            oldtransfers = Convert.ToDouble(oldtransfer);

            oldtotal = oldcuttings + oldtransfers + dispatchs;
            total = cuttings + transfers + dispatchs;

            if (total < oldtotal)
            {
                remaing = oldtotal - total;
            }
            else if (total > oldtotal)
            {
                remaing = oldtotal - total;
            }
            totalcb = ocbbal + remaing;

            cmd = new SqlCommand("UPDATE coldroomstockdetails SET  cutting=@cutting,transfer=@transfer,closingbalance=@closingbalance where sno=@sno and branchid=@branchid and productid=@productid");
            cmd.Parameters.Add("@cutting", cutting);
            cmd.Parameters.Add("@transfer", transfer);
            cmd.Parameters.Add("@closingbalance", totalcb);
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@productid", productid);
            vdm.Update(cmd);

            if (total > oldtotal)
            {
                balance = oldtotal - total;
                cmd = new SqlCommand("update productmonitar set quantity= quantity+@quantity where productid=@productid and branchid=@branchid");
            }
            else
            {
                balance = total - oldtotal;
                cmd = new SqlCommand("update productmonitar set quantity= quantity-@quantity where productid=@productid and branchid=@branchid");
            }

            // cmd = new SqlCommand("update productmonitar set quantity= @quantity where productid=@productid");
            cmd.Parameters.Add("@quantity", balance);
            cmd.Parameters.Add("@productid", productid);
            cmd.Parameters.Add("@branchid", branchid);
            if (vdm.Update(cmd) == 0)
            {
                cmd = new SqlCommand("insert  into productmonitar (productid, quantity,branchid) values (@productid,@quantity,@branchid) ");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@quantity", total);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
            }
            string msg = "production details modified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_coldroomstock_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string date = context.Request["getdatadate"].ToString();
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT cpm.sno, cpm.productid, cpm.dispatchquantity, cpm.cutting,cpm.transfer, cpm.producttotalquantity, cpm.userid, cpm.doe, pm.productname, cpm.closingbalance FROM coldroomstockdetails AS cpm INNER JOIN productmaster AS pm ON pm.sno = cpm.productid INNER JOIN branch_info AS bi ON bi.sno = cpm.branchid WHERE  (cpm.branchid = @branchid) AND (cpm.doe BETWEEN @d1 AND @d2) ORDER BY cpm.productid,cpm.doe");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<coldroom> coldroommdetails = new List<coldroom>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                coldroom crdetails = new coldroom();
                crdetails.sno = dr["sno"].ToString();
                crdetails.productid = dr["productid"].ToString();
                crdetails.productname = dr["productname"].ToString();
                crdetails.openingbalance = dr["producttotalquantity"].ToString();
                crdetails.dispatch = dr["dispatchquantity"].ToString();
                crdetails.cutting = dr["cutting"].ToString();
                crdetails.closingbalance = dr["closingbalance"].ToString();
                crdetails.doe = dr["doe"].ToString();
                crdetails.transfer = dr["transfer"].ToString();
                coldroommdetails.Add(crdetails);
            }
            string response = GetJson(coldroommdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_cipcleaningdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string siloid = context.Request["siloid"];
            string quantity = context.Request["qty"];
            string chemical = context.Request["chemical"];
            string temperature = context.Request["temperature"];
            string starttime = context.Request["starttime"];
            DateTime startingdate = Convert.ToDateTime(starttime);
            string endingtime = context.Request["endingtime"];
            DateTime endingdate = Convert.ToDateTime(endingtime);
            string actualstrength = context.Request["actualstrength"];
            string remarks = context.Request["remarks"];
            string sno = context.Request["sno"];
            string btnvalue = context.Request["btnvalue"];
            string date = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into cipcleaningdetails (siloid, chemicaltype, temperature, quantity, starttime, endingtime, actualstreangth, remarks, userid, branchid, doe) values (@siloid, @chemical, @temperature, @quantity, @starttime, @endingtime, @actualstrength,@remarks, @UserID, @BranchID, @doe)");
                cmd.Parameters.Add("@siloid", siloid);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@doe", dtdate);
                cmd.Parameters.Add("@quantity", quantity);
                cmd.Parameters.Add("@chemical", chemical);
                cmd.Parameters.Add("@temperature", temperature);
                cmd.Parameters.Add("@starttime", startingdate);
                cmd.Parameters.Add("@endingtime", endingdate);
                cmd.Parameters.Add("@actualstrength", actualstrength);
                cmd.Parameters.Add("@remarks", remarks);
                vdm.insert(cmd);
                string msg = "CIP details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE cipcleaningdetails SET siloid=@siloid, chemicaltype=@chemical, temperature=@temperature, quantity=@quantity, starttime=@starttime, endingtime=@endingtime, actualstreangth=@actualstreangth, remarks=@remarks, userid = @UserID, doe=@doe where sno=@sno and branchid=@Branchid");
                cmd.Parameters.Add("@siloid", siloid);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@UserID", UserID);
                cmd.Parameters.Add("@doe", dtdate);
                cmd.Parameters.Add("@quantity", quantity);
                cmd.Parameters.Add("@chemical", chemical);
                cmd.Parameters.Add("@temperature", temperature);
                cmd.Parameters.Add("@starttime", startingdate);
                cmd.Parameters.Add("@endingtime", endingdate);
                cmd.Parameters.Add("@actualstrength", actualstrength);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "CIP details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_cipcleaning_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT cipcleaningdetails.sno, cipcleaningdetails.siloid, cipcleaningdetails.chemicaltype, cipcleaningdetails.temperature, cipcleaningdetails.quantity, cipcleaningdetails.starttime, cipcleaningdetails.endingtime, cipcleaningdetails.actualstreangth, cipcleaningdetails.remarks, cipcleaningdetails.doe, cipcleaningdetails.userid, cipcleaningdetails.branchid, silomaster.SiloName FROM  cipcleaningdetails INNER JOIN silomaster ON cipcleaningdetails.siloid = silomaster.SiloId WHERE (cipcleaningdetails.doe BETWEEN @d1 AND @d2) AND cipcleaningdetails.branchid=@branchid  ORDER BY cipcleaningdetails.sno DESC");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<cipcleaning> cipcleaningdetails = new List<cipcleaning>();
            //string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                cipcleaning cidetails = new cipcleaning();
                cidetails.sno = dr["sno"].ToString();
                cidetails.siloid = dr["siloid"].ToString();
                cidetails.chemical = dr["chemicaltype"].ToString();
                cidetails.tempurature = dr["temperature"].ToString();
                //cidetails.cutting = dr["cutting"].ToString();
                cidetails.doe = dr["doe"].ToString();
                cidetails.remarks = dr["remarks"].ToString();
                //cidetails.branchname = dr["branchname"].ToString();
                cidetails.quantity = dr["quantity"].ToString();
                cidetails.siloname = dr["SiloName"].ToString();
                cidetails.startingtime = dr["starttime"].ToString();
                cidetails.endingtime = dr["endingtime"].ToString();
                cidetails.actualstreangth = dr["actualstreangth"].ToString();
                cipcleaningdetails.Add(cidetails);
            }
            string response = GetJson(cipcleaningdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void save_processing_powercollection_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string transtype = context.Request["transtype"];
            string remarks = context.Request["remarks"];
            string startingtime = context.Request["startingtime"];
            DateTime starttime = Convert.ToDateTime(startingtime);
            string endingtime = context.Request["endingtime"];
            DateTime endtime = Convert.ToDateTime(endingtime);
            string fromsilo = context.Request["fromsilo"];
            string tosilo = context.Request["tosilo"];
            string cctemp = context.Request["cctemp"];
            string chillingtemp = context.Request["chillingtemp"];
            string txtoilpresure = context.Request["txtoilpresure"];
            string txthomopresure = context.Request["txthomopresure"];
            string milktype = context.Request["milktype"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (transtype == "MilkPosteurizer")
            {
                cmd = new SqlCommand("insert into processingpowerconsumption(powertype,startingtime,endingtime,fromsilo,tosilo,cctemprature,chillingtemprature,branchid,userid,status,remarks,doe) values (@powertype,@statingtime,@endingtime,@fromsilo,@tosilo,@cctemprature,@chillingtemprature,@branchid,@entryby,@status,@remarks,@doe)");
                cmd.Parameters.Add("@fromsilo", fromsilo);
                cmd.Parameters.Add("@tosilo", tosilo);
                cmd.Parameters.Add("@cctemprature", cctemp);
                cmd.Parameters.Add("@chillingtemprature", chillingtemp);
            }
            else
            {
                if (transtype == "Homoginizer")
                {
                    cmd = new SqlCommand("insert into processingpowerconsumption(powertype, startingtime, endingtime, oilpresure, homopresure, branchid, userid, status, remarks, doe) values (@powertype, @statingtime,@endingtime, @oilpresure, @homopresuredoe, @branchid, @entryby, @status, @remarks, @doe)");
                    cmd.Parameters.Add("@oilpresure", txtoilpresure);
                    cmd.Parameters.Add("@homopresuredoe", txthomopresure);

                }
                else
                {
                    cmd = new SqlCommand("insert into processingpowerconsumption(powertype, startingtime, endingtime, milktype, branchid, userid,status, remarks, doe) values (@powertype, @statingtime, @endingtime, @milktype, @branchid, @entryby, @status, @remarks, @doe)");
                    cmd.Parameters.Add("@milktype", milktype);
                }
            }
            cmd.Parameters.Add("@powertype", transtype);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@statingtime", starttime);
            cmd.Parameters.Add("@endingtime", endtime);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@entryby", UserID);
            cmd.Parameters.Add("@status", 'P');
            cmd.Parameters.Add("@remarks", remarks);
            vdm.insert(cmd);
            string msg = "Power consumption details saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_butter_production_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            //string btnvalue = context.Request["btnvalue"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string type = obj.type;
            string qty = obj.qty;
            string date = obj.date;
            string deptid = "10";
            string sno = obj.sno;
            double quantitydetails;
            DateTime dtdate = Convert.ToDateTime(date);
            if (btnvalue == "Save")
            {
                foreach (gheeproductionlist o in obj.ghee_production_details)
                {
                    if (o.productionqty != "")
                    {
                        double OB = 0;
                        double.TryParse(o.OB, out OB);
                        double productionqty = 0;
                        double.TryParse(o.productionqty, out productionqty);
                        double convertionfat = 0;
                        double.TryParse(o.convertionfat, out convertionfat);
                        double convertionqty = 0;
                        double.TryParse(o.convertionqty, out convertionqty);
                        double CLOSING = OB + productionqty;
                        if (convertionfat == 0.0)
                        {
                            convertionfat = 0;
                        }
                        cmd = new SqlCommand("insert into plant_production_details(productid, convertionquantity, convertionfat, productionqty, ob, branchid, createdby, remarks, createdon, type, cb, doe,deptid) values (@productid, @convertionqty, @convertionfat, @productionqty, @ob,  @branchid, @userid, @remarks, @createdon, @type, @closingbalance, @doe,@deptid)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@convertionfat", convertionfat);
                        cmd.Parameters.Add("@convertionqty", convertionqty);
                        cmd.Parameters.Add("@productionqty", productionqty);
                        cmd.Parameters.Add("@ob", o.OB);
                        cmd.Parameters.Add("@closingbalance", CLOSING);
                        cmd.Parameters.Add("@createdon", dtdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@type", type);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@deptid", deptid);
                        vdm.insert(cmd);

                        cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", convertionqty);
                        cmd.Parameters.Add("@productid", type);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);

                        cmd = new SqlCommand("update productmonitar set quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", productionqty);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into productmonitar (productid,quantity,branchid) values (@productid, @quantity, @branchid) ");
                            cmd.Parameters.Add("@quantity", productionqty);
                            cmd.Parameters.Add("@productid", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Butter production details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (gheeproductionlist o in obj.ghee_production_details)
                {
                    if (o.productionqty != "")
                    {
                        double OB = 0;
                        double.TryParse(o.OB, out OB);
                        double productionqty = 0;
                        double.TryParse(o.productionqty, out productionqty);
                        double convertionfat = 0;
                        double.TryParse(o.convertionfat, out convertionfat);
                        double convertionqty = 0;
                        double.TryParse(o.convertionqty, out convertionqty);
                        double CLOSING = OB + productionqty;
                        if (convertionfat == 0.0)
                        {
                            convertionfat = 0;
                        }
                        cmd = new SqlCommand("Select convertionquantity,productionqty from  plant_production_details where sno = @sno");
                        cmd.Parameters.Add("@sno", sno);
                        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                        double quantity = Convert.ToDouble(routes.Rows[0]["productionqty"].ToString());
                        double convertionquantity = Convert.ToDouble(routes.Rows[0]["convertionquantity"].ToString());
                        if (convertionquantity > Convert.ToDouble(convertionqty))
                        {
                            quantitydetails = convertionquantity - Convert.ToDouble(convertionqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(convertionqty) - convertionquantity;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        if (quantity > Convert.ToDouble(productionqty))
                        {
                            quantitydetails = quantity - Convert.ToDouble(productionqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(productionqty) - quantity;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        cmd = new SqlCommand("update plant_production_details SET convertionquantity=@convertionquantity, convertionfat=@convertionfat, productionqty=@productionqty, ob=@openingbalance, cb=@closingbalance,createdon=@doe,remarks=@remarks  where sno=@sno and branchid=@branchid");
                        cmd.Parameters.Add("@convertionfat", convertionfat);
                        cmd.Parameters.Add("@convertionquantity", convertionqty);
                        cmd.Parameters.Add("@productionqty", productionqty);
                        cmd.Parameters.Add("@openingbalance", o.OB);
                        cmd.Parameters.Add("@closingbalance", CLOSING);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@sno", sno);
                        vdm.Update(cmd);
                        string msg = "Butter production details modified successfully";
                        string response = GetJson(msg);
                        context.Response.Write(response);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_butter_sales_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string sno = context.Request["sno"];
            //string btnvalue = context.Request["btnvalue"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            double quantitydetails;
            double fat = 0;
            double clr = 0;
            double snfvalue = 0;
            if (btnvalue == "Save")
            {
                foreach (gheesaleslist o in obj.ghee_sales_details)
                {
                    if (o.sales != "")
                    {
                        cmd = new SqlCommand("insert into buttersales(productid, salesquantity, branchid, userid, remarks, doe, dispatchtoghee, buttermilkquantity, buttermilkfat, dispgheefat ) values (@productid, @sales,  @branchid, @userid, @remarks, @doe, @dispatch, @buttermilkquantity, @buttermilkfat, @dispgheefat)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@sales", o.sales);
                        cmd.Parameters.Add("@dispatch", o.dispatchtoghee);
                        cmd.Parameters.Add("@buttermilkquantity", o.buttermilkquantity);
                        cmd.Parameters.Add("@buttermilkfat", o.buttermilkfat);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@dispgheefat", o.dispatchtogheefat);
                        vdm.insert(cmd);
                        double sale = Convert.ToDouble(o.sales);
                        double disp = Convert.ToDouble(o.dispatchtoghee);
                        double qty = sale + disp;
                        cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", qty);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into productmonitar (productid,quantity,branchid) values (@productid, @quantity, @branchid) ");
                            cmd.Parameters.Add("@quantity", qty);
                            cmd.Parameters.Add("@productid", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Butter sales details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_ghee_production_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();

            //string btnvalue = context.Request["btnvalue"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string type = obj.type;
            string qty = obj.qty;
            string date = obj.date;
            string deptid = "3";
            double quantitydetails;
            string sno = obj.sno;
            DateTime dtdate = Convert.ToDateTime(date);
            if (btnvalue == "Save")
            {
                foreach (gheeproductionlist o in obj.ghee_production_details)
                {
                    if (o.convertionqty != "")
                    {

                        double productionqty = 0;
                        double.TryParse(o.productionqty, out productionqty);

                        double convertionqty = 0;
                        double.TryParse(o.convertionqty, out convertionqty);

                        double convertionfat = 0;
                        double.TryParse(o.convertionfat, out convertionfat);

                        double convertionsnf = 0;
                        double.TryParse(o.convertionsnf, out convertionsnf);

                        double lossqty = 0;
                        double.TryParse(o.lossqty, out lossqty);

                        double greciveqty = 0;
                        double.TryParse(o.greciveqty, out greciveqty);

                        if (convertionfat == 0.0)
                        {
                            convertionfat = 0;
                        }
                        if (convertionsnf == 0.0)
                        {
                            convertionsnf = 0;
                        }
                        cmd = new SqlCommand("insert into plant_production_details(productid, convertionquantity, convertionfat, productionqty, ob, branchid, createdby, remarks, doe, type, lossqty, greciveqty, createdon,deptid,snf) values (@productid, @convertionqty, @convertionfat, @productionqty, @ob,  @branchid, @userid, @remarks, @doe, @type, @lossqty, @greciveqty,@entrydate,@deptid,@snf)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@convertionfat", convertionfat);
                        cmd.Parameters.Add("@convertionqty", convertionqty);
                        cmd.Parameters.Add("@productionqty", productionqty);
                        cmd.Parameters.Add("@ob", o.OB);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@type", type);
                        cmd.Parameters.Add("@lossqty", lossqty);
                        cmd.Parameters.Add("@greciveqty", greciveqty);
                        cmd.Parameters.Add("@entrydate", dtdate);
                        cmd.Parameters.Add("@deptid", deptid);
                        cmd.Parameters.Add("@snf", convertionsnf);
                        vdm.insert(cmd);
                        if (type == "90")
                        {
                            cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                            cmd.Parameters.Add("@quantity", convertionqty);
                            cmd.Parameters.Add("@productid", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else if (type == "164")
                        {
                            cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                            cmd.Parameters.Add("@quantity", convertionqty);
                            cmd.Parameters.Add("@productid", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                            cmd.Parameters.Add("@quantity", productionqty);
                            cmd.Parameters.Add("@productid", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        cmd = new SqlCommand("update productmonitar set quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                        if (type == "90")
                        {
                            cmd.Parameters.Add("@quantity", greciveqty);
                        }
                        else if (type == "164")
                        {
                            cmd.Parameters.Add("@quantity", greciveqty);
                        }
                        else
                        {
                            cmd.Parameters.Add("@quantity", productionqty);
                        }
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into productmonitar (productid,quantity,branchid) values (@productid, @quantity, @branchid) ");
                            cmd.Parameters.Add("@quantity", greciveqty);
                            cmd.Parameters.Add("@productid", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "ghee production details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (gheeproductionlist o in obj.ghee_production_details)
                {
                    if (o.convertionqty != "")
                    {
                        double productionqty = 0;
                        double.TryParse(o.productionqty, out productionqty);
                        double convertionqty = 0;
                        double.TryParse(o.convertionqty, out convertionqty);
                        double convertionfat = 0;
                        double.TryParse(o.convertionfat, out convertionfat);
                        double lossqty = 0;
                        double.TryParse(o.lossqty, out lossqty);
                        double greciveqty = 0;
                        double.TryParse(o.greciveqty, out greciveqty);
                        if (convertionfat == 0.0)
                        {
                            convertionfat = 0;
                        }
                        double convertionsnf = 0;
                        double.TryParse(o.convertionsnf, out convertionsnf);
                        if (convertionsnf == 0.0)
                        {
                            convertionsnf = 0;
                        }
                        cmd = new SqlCommand("Select convertionquantity,productionqty from plant_production_details where sno = @sno");
                        cmd.Parameters.Add("@sno", sno);
                        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                        double quantity = Convert.ToDouble(routes.Rows[0]["productionqty"].ToString());
                        double convertionquantity = Convert.ToDouble(routes.Rows[0]["convertionquantity"].ToString());
                        if (convertionquantity > Convert.ToDouble(convertionqty))
                        {
                            quantitydetails = convertionquantity - Convert.ToDouble(convertionqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(convertionqty) - convertionquantity;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", type);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        if (quantity > Convert.ToDouble(productionqty))
                        {
                            quantitydetails = quantity - Convert.ToDouble(productionqty);
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            quantitydetails = Convert.ToDouble(productionqty) - quantity;
                            cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                            cmd.Parameters.Add("@qty", quantitydetails);
                            cmd.Parameters.Add("@product", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.Update(cmd);
                        }
                        cmd = new SqlCommand("update plant_production_details SET  convertionquantity=@convertionquantity, convertionfat=@convertionfat, productionqty=@productionqty, ob=@openingbalance, remarks=@remarks, createdon=@doe, lossqty=@lossqty, greciveqty=@greciveqty,snf=@snf where sno=@sno and branchid=@branchid");
                        cmd.Parameters.Add("@convertionfat", convertionfat);
                        cmd.Parameters.Add("@convertionquantity", convertionqty);
                        cmd.Parameters.Add("@productionqty", productionqty);
                        cmd.Parameters.Add("@openingbalance", o.OB);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@lossqty", lossqty);
                        cmd.Parameters.Add("@greciveqty", greciveqty);
                        cmd.Parameters.Add("@sno", sno);
                        cmd.Parameters.Add("@snf", convertionsnf);
                        vdm.Update(cmd);
                        string msg = "Ghee Production Details modified successfully";
                        string response = GetJson(msg);
                        context.Response.Write(response);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_ghee_sales_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string sno = context.Request["sno"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            double quantitydetails;
            double fat = 0;
            double clr = 0;
            double snfvalue = 0;
            string deptid = "3";
            if (btnvalue == "Save")
            {
                foreach (gheesaleslist o in obj.ghee_sales_details)
                {
                    if (o.sales != "")
                    {
                        cmd = new SqlCommand("insert into gheesales(productid, salesquantity, branchid, userid, remarks, doe) values (@productid, @sales,  @branchid, @userid, @remarks, @doe)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@sales", o.sales);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        vdm.insert(cmd);
                        cmd = new SqlCommand("update productmonitar set quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                        cmd.Parameters.Add("@quantity", o.sales);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert  into productmonitar (productid,quantity,branchid) values (@productid, @quantity, @branchid) ");
                            cmd.Parameters.Add("@quantity", o.sales);
                            cmd.Parameters.Add("@productid", o.productid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "ghee sales details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_ghee_closing_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string sno = context.Request["sno"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string deptid = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            if (btnvalue == "Save")
            {
                foreach (gheeclosinglist o in obj.ghee_closing_details)
                {
                    if (o.quantity != "")
                    {
                        cmd = new SqlCommand("insert into closing_details(productid, qty_kgs, branchid, closedby, remarks, doe, closeddate, type, deptid) values (@productid, @quantity,  @branchid, @userid, @remarks, @doe, @closeddate, @type, @deptid)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@quantity", o.quantity);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@type", "ghee");
                        cmd.Parameters.Add("@closeddate", dtdate);
                        cmd.Parameters.Add("@deptid", deptid);
                        vdm.insert(cmd);
                    }
                }
                string msg = "ghee Closing details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_biproducts_closing_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string sno = context.Request["sno"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string deptid = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            double quantitydetails = 0;
            if (btnvalue == "Save")
            {
                foreach (gheeclosinglist o in obj.ghee_closing_details)
                {
                    if (o.quantity != "")
                    {
                        cmd = new SqlCommand("insert into closing_details(productid, qty_kgs, branchid, closedby, remarks, doe, closeddate, type, deptid) values (@productid, @quantity,  @branchid, @userid, @remarks, @doe, @closeddate, @type, @deptid)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@quantity", o.quantity);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@userid", UserID);
                        cmd.Parameters.Add("@remarks", obj.remarks);
                        cmd.Parameters.Add("@closeddate", dtdate);
                        cmd.Parameters.Add("@type", "BiProducts");
                        cmd.Parameters.Add("@deptid", deptid);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Bi Product Closing details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (gheeclosinglist o in obj.ghee_closing_details)
                {
                    cmd = new SqlCommand("Select qty_kgs from closing_details where sno = @sno");
                    cmd.Parameters.Add("@sno", o.sno);
                    DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                    double quantity = Convert.ToDouble(routes.Rows[0]["qty_kgs"].ToString());
                    if (quantity > Convert.ToDouble(o.quantity))
                    {
                        quantitydetails = quantity - Convert.ToDouble(o.quantity);
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    else
                    {
                        quantitydetails = Convert.ToDouble(o.quantity) - quantity;
                        cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                        cmd.Parameters.Add("@qty", quantitydetails);
                        cmd.Parameters.Add("@product", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                    cmd = new SqlCommand("update closing_details SET  qty_kgs=@quantity, closeddate=@closeddate  where sno=@sno and branchid=@branchid");
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@quantity", o.quantity);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@userid", UserID);
                    cmd.Parameters.Add("@remarks", obj.remarks);
                    cmd.Parameters.Add("@closeddate", dtdate);
                    cmd.Parameters.Add("@type", "BiProducts");
                    cmd.Parameters.Add("@deptid", deptid);
                    cmd.Parameters.Add("@sno", o.sno);
                    vdm.Update(cmd);
                    string msg = "Bi Product Closing  Details modified successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_cream_production_click(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        string UserID = context.Session["Employ_Sno"].ToString();
        string creamtype = context.Request["creamtype"];
        string recive = context.Request["recive"];
        string recivedfat = context.Request["recivedfat"];
        string creamfat = context.Request["creamfat"];
        string total = context.Request["total"];
        string avgfat = context.Request["avgfat"];
        string ob = context.Request["ob"];
        string date = context.Request["doe"];
        DateTime starttime = Convert.ToDateTime(date);
        string btnval = context.Request["btnvalue"];
        string sno = context.Request["sno"];
        string oldreciveqty = context.Request["oldreciveqty"];
        string deptid = "3";
        double quantitydetails;
        string productid = context.Request["creamtype"];
        string receivedtype = context.Request["receivedtype"];
        if (receivedtype == "" || receivedtype == "null" || receivedtype == null)
        {
            receivedtype = "Plant";
        }
        string receivedfrom = context.Request["receivedfrom"];
        if (receivedfrom == "" || receivedfrom == "null" || receivedfrom == null)
        {
            receivedfrom = context.Session["Branch_ID"].ToString();
        }
        if (productid == "Cow")
        {
            productid = "90";
        }
        else
        {
            productid = "164";
        }
        string obcreamsnf = context.Request["obcreamsnf"];
        if (obcreamsnf == "undefined" || obcreamsnf == "" || obcreamsnf == null || obcreamsnf == "null")
        {
            obcreamsnf = "0";
        }
        string recivedsnf = context.Request["recivedsnf"];
        if (recivedsnf == "undefined" || recivedsnf == "" || recivedsnf == null || recivedsnf == "null")
        {
            recivedsnf = "0";
        }
        string avgsnf = context.Request["avgsnf"];
        if (avgsnf == "undefined" || avgsnf == "" || avgsnf == null || avgsnf == "null")
        {
            avgsnf = "0";
        }
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        if (btnval == "Save")
        {
            cmd = new SqlCommand("insert into plant_production_details(creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, branchid, createdby, doe, createdon,deptid,receivedtype, receivedfrom,recivesnf,snf) values (@creamtype, @obalance, @obfat, @recive, @recivedfat, @total, @avgfat, @branchid, @userid, @doe, @createdon,@deptid,@receivedtype,@receivedfrom,@recivesnf,@snf)");
            cmd.Parameters.Add("@creamtype", creamtype);
            cmd.Parameters.Add("@obalance", ob);
            cmd.Parameters.Add("@obfat", creamfat);
            cmd.Parameters.Add("@recive", recive);
            cmd.Parameters.Add("@recivedfat", recivedfat);
            cmd.Parameters.Add("@total", total);
            cmd.Parameters.Add("@avgfat", avgfat);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@userid", UserID);
            cmd.Parameters.Add("@createdon", starttime);
            cmd.Parameters.Add("@deptid", deptid);
            cmd.Parameters.Add("@receivedtype", receivedtype);
            cmd.Parameters.Add("@receivedfrom", receivedfrom);
            cmd.Parameters.Add("@recivesnf", recivedsnf);
            cmd.Parameters.Add("@snf", obcreamsnf);
            vdm.insert(cmd);
            if (BranchID == "26" || BranchID == "115")
            {
                cmd = new SqlCommand("update productmonitar set quantity=quantity+@qty,fat = @fat, snf = @snf where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@qty", recive);
                cmd.Parameters.Add("@fat", avgfat);
                cmd.Parameters.Add("@snf", avgsnf);
                cmd.Parameters.Add("@branchid", BranchID);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert into productmonitar (productid, quantity, branchid,fat, snf) values ( @productid, @qty_ltr, @branchid,@fat, @snf)");
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@qty_ltr", recive);
                    cmd.Parameters.Add("@fat", avgfat);
                    cmd.Parameters.Add("@snf", avgsnf);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.insert(cmd);
                }
            }
            else
            {
                cmd = new SqlCommand("update productmonitar set quantity=quantity+@qty where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@qty", recive);
                cmd.Parameters.Add("@branchid", BranchID);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert into productmonitar (productid, quantity, branchid) values ( @productid, @qty_ltr, @branchid)");
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@qty_ltr", recive);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.insert(cmd);
                }
            }
            string msg = "Ghee cream details saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        else
        {
            cmd = new SqlCommand("Select recivedqty from plant_production_details where sno = @sno");
            cmd.Parameters.Add("@sno", sno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double quantity = Convert.ToDouble(routes.Rows[0]["recivedqty"].ToString());
            if (BranchID == "26" || BranchID == "115")
            {
                if (quantity > Convert.ToDouble(recive))
                {
                    quantitydetails = quantity - Convert.ToDouble(recive);
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty,fat = @fat, snf = @snf where  productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@fat", avgfat);
                    cmd.Parameters.Add("@snf", avgsnf);
                    vdm.Update(cmd);
                }
                else
                {
                    quantitydetails = Convert.ToDouble(recive) - quantity;
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty,fat = @fat, snf = @snf where  productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@fat", avgfat);
                    cmd.Parameters.Add("@snf", avgsnf);
                    vdm.Update(cmd);
                }
            }
            else
            {
                if (quantity > Convert.ToDouble(recive))
                {
                    quantitydetails = quantity - Convert.ToDouble(recive);
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                else
                {
                    quantitydetails = Convert.ToDouble(recive) - quantity;
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
            }
            cmd = new SqlCommand("update plant_production_details SET  creamtype=@creamtype, ob=@obalance, obfat=@obfat, recivedqty=@recive, recivedfat=@recivedfat, totalcreamqty=@totalcreamqty, avgfat=@avgfat, createdon=@doe, receivedtype=@receivedtype,receivedfrom=@receivedfrom,recivesnf=@recivesnf,snf=@snf  where sno=@sno and branchid=@branchid");
            cmd.Parameters.Add("@creamtype", creamtype);
            cmd.Parameters.Add("@obalance", ob);
            cmd.Parameters.Add("@obfat", creamfat);
            cmd.Parameters.Add("@recive", recive);
            cmd.Parameters.Add("@recivedfat", recivedfat);
            cmd.Parameters.Add("@totalcreamqty", total);
            cmd.Parameters.Add("@avgfat", avgfat);
            cmd.Parameters.Add("@doe", starttime);
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@receivedtype", receivedtype);
            cmd.Parameters.Add("@receivedfrom", receivedfrom);
            cmd.Parameters.Add("@recivesnf", recivedsnf);
            cmd.Parameters.Add("@snf", obcreamsnf);
            vdm.Update(cmd);
            string msg = "Ghee Cream Details modified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_buttercream_production_click(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        string UserID = context.Session["Employ_Sno"].ToString();
        string creamtype = context.Request["creamtype"];
        string recive = context.Request["recive"];
        string recivedfat = context.Request["recivedfat"];
        string creamfat = context.Request["creamfat"];
        string total = context.Request["total"];
        string avgfat = context.Request["avgfat"];
        string ob = context.Request["ob"];
        string date = context.Request["doe"];
        DateTime starttime = Convert.ToDateTime(date);
        string btnval = context.Request["btnvalue"];
        string sno = context.Request["sno"];
        string deptid = "10";
        double quantitydetails;
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        if (btnval == "Save")
        {
            cmd = new SqlCommand("insert into plant_production_details(creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, branchid, createdby, createdon, doe,deptid) values (@creamtype, @obalance, @obfat, @recive, @recivedfat, @total, @avgfat, @branchid, @userid, @createdon, @doe,@deptid)");
            cmd.Parameters.Add("@creamtype", creamtype);
            cmd.Parameters.Add("@obalance", ob);
            cmd.Parameters.Add("@obfat", creamfat);
            cmd.Parameters.Add("@recive", recive);
            cmd.Parameters.Add("@recivedfat", recivedfat);
            cmd.Parameters.Add("@total", total);
            cmd.Parameters.Add("@avgfat", avgfat);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@userid", UserID);
            cmd.Parameters.Add("@createdon", starttime);
            cmd.Parameters.Add("@deptid", deptid);
            vdm.insert(cmd);
            cmd = new SqlCommand("update productmonitar set quantity=quantity+@qty where productid=@productid and branchid=@branchid");
            cmd.Parameters.Add("@productid", 96);
            cmd.Parameters.Add("@qty", recive);
            cmd.Parameters.Add("@branchid", BranchID);
            if (vdm.Update(cmd) == 0)
            {
                cmd = new SqlCommand("insert into productmonitar (productid, quantity, branchid) values ( @productid, @qty_ltr, @branchid)");
                cmd.Parameters.Add("@productid", 96);
                cmd.Parameters.Add("@qty_ltr", recive);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.insert(cmd);
            }
            string msg = "Butter cream details saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        else
        {
            cmd = new SqlCommand("Select recivedqty from plant_production_details where sno = @sno");
            cmd.Parameters.Add("@sno", sno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double quantity = Convert.ToDouble(routes.Rows[0]["recivedqty"].ToString());
            if (quantity > Convert.ToDouble(recive))
            {
                quantitydetails = quantity - Convert.ToDouble(recive);
                cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                cmd.Parameters.Add("@qty", quantitydetails);
                cmd.Parameters.Add("@product", 96);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.Update(cmd);
            }
            else
            {
                quantitydetails = Convert.ToDouble(recive) - quantity;
                cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where  productid = @product and branchid=@branchid ");
                cmd.Parameters.Add("@qty", quantitydetails);
                cmd.Parameters.Add("@product", 96);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.Update(cmd);
            }
            cmd = new SqlCommand("update plant_production_details SET  creamtype=@creamtype, ob=@ob, obfat=@obfat, recivedqty=@recivedqty, recivedfat=@recivedfat, totalcreamqty=@totalcreamqty, avgfat=@avgfat, createdon=@doe where sno=@sno and branchid=@branchid");
            cmd.Parameters.Add("@creamtype", creamtype);
            cmd.Parameters.Add("@ob", ob);
            cmd.Parameters.Add("@obfat", creamfat);
            cmd.Parameters.Add("@recivedqty", recive);
            cmd.Parameters.Add("@recivedfat", recivedfat);
            cmd.Parameters.Add("@totalcreamqty", total);
            cmd.Parameters.Add("@avgfat", avgfat);
            cmd.Parameters.Add("@doe", starttime);
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@branchid", BranchID);
            vdm.Update(cmd);
            string msg = "Butter Cream Details modified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }

    }
    private void get_buttercreambinding_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT   sno, creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, CONVERT(varchar, createdon, 126) AS datetime, createdon AS doe, deptid FROM   plant_production_details WHERE (createdon BETWEEN @d1 AND @d2) AND (branchid = @branchid) AND (deptid = 10) AND (creamtype = 'Cow') OR (createdon BETWEEN @d1 AND @d2) AND (branchid = @branchid) AND (deptid = 10) AND (creamtype = 'Buffalo') ORDER BY createdon ");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheecreamdetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.creamtype = dr["creamtype"].ToString();
                gheedetails.recivequnatity = dr["recivedqty"].ToString();
                gheedetails.recivefat = dr["recivedfat"].ToString();
                gheedetails.ob = dr["ob"].ToString();
                gheedetails.obfat = dr["obfat"].ToString();
                gheedetails.totalcreamqty = dr["totalcreamqty"].ToString();
                gheedetails.doe = dr["doe"].ToString();
                gheedetails.avgfat = dr["avgfat"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheecreamdetails.Add(gheedetails);
            }
            string response = GetJson(gheecreamdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void get_butterproductionbinding_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT butterproduction.sno, butterproduction.productid, butterproduction.convertionquantity, butterproduction.convertionfat, butterproduction.productionqty, butterproduction.ob AS openingbalance, butterproduction.cb AS closingbalance, butterproduction.createdon AS doe, CONVERT(varchar, butterproduction.createdon,126) AS datetime, productmaster.productname, butterproduction.creamtype, butterproduction.remarks, butterproduction.type FROM  plant_production_details AS butterproduction INNER JOIN  productmaster ON butterproduction.productid = productmaster.sno WHERE  (butterproduction.createdon BETWEEN @d1 AND @d2) AND (butterproduction.branchid = @branchid) AND (butterproduction.deptid = 10) ORDER BY createdon");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheecreamdetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.productid = dr["productid"].ToString();
                gheedetails.convertionquantity = dr["convertionquantity"].ToString();
                gheedetails.convertionfat = dr["convertionfat"].ToString();
                gheedetails.productionqty = dr["productionqty"].ToString();
                gheedetails.openingbalance = dr["openingbalance"].ToString();
                gheedetails.closingbalance = dr["closingbalance"].ToString();
                gheedetails.doe = dr["doe"].ToString();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.creamtype = dr["creamtype"].ToString();
                gheedetails.remarks = dr["remarks"].ToString();
                gheedetails.type = dr["type"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheecreamdetails.Add(gheedetails);
            }
            string response = GetJson(gheecreamdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_buttersales_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  buttersales.sno, buttersales.productid, buttersales.salesquantity, buttersales.remarks, buttersales.doe,CONVERT(varchar, buttersales.doe, 126) AS datetime, buttersales.dispatchtoghee, buttersales.buttermilkquantity, buttersales.buttermilkfat, buttersales.dispgheefat, productmaster.productname FROM   buttersales INNER JOIN productmaster ON buttersales.productid = productmaster.sno  WHERE  (buttersales.doe BETWEEN @d1 AND @d2) AND (buttersales.branchid = @branchid) order by buttersales.doe");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.productid = dr["productid"].ToString();
                gheedetails.salesquantity = dr["salesquantity"].ToString();
                gheedetails.remarks = dr["remarks"].ToString();
                gheedetails.doe = dr["doe"].ToString();

                gheedetails.dispatchtoghee = dr["dispatchtoghee"].ToString();
                gheedetails.buttermilkquantity = dr["buttermilkquantity"].ToString();
                gheedetails.buttermilkfat = dr["buttermilkfat"].ToString();
                gheedetails.dispgheefat = dr["dispgheefat"].ToString();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    public class gheeproduction
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string creamtype { get; set; }
        public string recivequnatity { get; set; }
        public string recivefat { get; set; }
        public string ob { get; set; }
        public string obfat { get; set; }
        public string totalcreamqty { get; set; }
        public string convertionquantity { get; set; }
        public string convertionfat { get; set; }
        public string openingbalance { get; set; }
        public string closingbalance { get; set; }
        public string branchid { get; set; }
        public string branchname { get; set; }
        public string remarks { get; set; }
        public string btnvalue { get; set; }
        public string doe { get; set; }
        public string productname { get; set; }
        public string date { get; set; }
        public string type { get; set; }
        public string qty { get; set; }
        public string avgfat { get; set; }
        public string productionqty { get; set; }
        public string salesquantity { get; set; }
        public string quaninty { get; set; }
        public string lossqty { get; set; }
        public string dispatchtoghee { get; set; }
        public string buttermilkquantity { get; set; }
        public string buttermilkfat { get; set; }
        public string dispgheefat { get; set; }
        public string datetime { get; set; }
        public string receivedtype { get; set; }
        public string receivedfrom { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string recivesnf { get; set; }
        public string avgsnf { get; set; }


        public List<gheeproductionlist> ghee_production_details { get; set; }
        public List<gheesaleslist> ghee_sales_details { get; set; }
        public List<gheeclosinglist> ghee_closing_details { get; set; }
    }

    public class gheeproductionlist
    {
        public string productid { get; set; }
        public string OB { get; set; }
        public string convertionfat { get; set; }
        public string convertionqty { get; set; }
        public string productionqty { get; set; }
        public string lossqty { get; set; }
        public string greciveqty { get; set; }
        public string convertionsnf { get; set; }
    }
    public class gheesaleslist
    {
        public string productid { get; set; }
        public string sales { get; set; }
        public string dispatchtoghee { get; set; }
        public string dispatchtogheefat { get; set; }
        public string buttermilkfat { get; set; }
        public string buttermilkquantity { get; set; }

        public string ob { get; set; }
        public string obpak { get; set; }
        public string frmkcc { get; set; }
        public string mrkreturn { get; set; }
        public string othreturn { get; set; }
        public string salespck { get; set; }
        public string cutting { get; set; }
        public string cbpak { get; set; }
        public string cb { get; set; }
        public string packetsize { get; set; }
    }
    public class gheeclosinglist
    {
        public string productid { get; set; }
        public string quantity { get; set; }
        public string sno { get; set; }
    }

    private void get_gheecreambinding_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  sno, creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, branchid, createdon AS doe, CONVERT(varchar, createdon, 126) AS datetime FROM  plant_production_details WHERE  (branchid = @branchid) AND (deptid = 3) AND (creamtype = 'Buffalo') AND (createdon BETWEEN @d1 AND @d2) OR (branchid = @branchid) AND (deptid = 3) AND (creamtype = 'Cow') AND (createdon BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheecreamdetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.creamtype = dr["creamtype"].ToString();
                gheedetails.recivequnatity = dr["recivedqty"].ToString();
                gheedetails.recivefat = dr["recivedfat"].ToString();
                gheedetails.ob = dr["ob"].ToString();
                gheedetails.obfat = dr["obfat"].ToString();
                gheedetails.totalcreamqty = dr["totalcreamqty"].ToString();
                gheedetails.doe = dr["doe"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheedetails.avgfat = dr["avgfat"].ToString();
                gheecreamdetails.Add(gheedetails);
            }
            string response = GetJson(gheecreamdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_gheeproduction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT   gp.sno, gp.productid,gp.snf, gp.type, gp.productionqty, gp.greciveqty, gp.createdon AS doe, CONVERT(varchar, gp.createdon, 126) AS datetime, gp.convertionquantity,  gp.convertionfat, gp.lossqty, gp.remarks, gp.ob AS openingbalance, gp.cb AS closingbalance, gp.branchid, bi.branchname, pm.productname FROM   plant_production_details AS gp INNER JOIN productmaster AS pm ON pm.sno = gp.productid INNER JOIN branch_info AS bi ON bi.sno = gp.branchid WHERE   (gp.branchid = @branchid) AND (gp.createdon BETWEEN @d1 AND @d2) AND (gp.deptid = 3)");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.productid = dr["productid"].ToString();
                gheedetails.recivequnatity = dr["greciveqty"].ToString();
                gheedetails.convertionfat = dr["convertionfat"].ToString();
                gheedetails.convertionquantity = dr["convertionquantity"].ToString();
                gheedetails.productionqty = dr["productionqty"].ToString();
                gheedetails.branchname = dr["branchname"].ToString();
                gheedetails.openingbalance = dr["openingbalance"].ToString();
                gheedetails.closingbalance = dr["closingbalance"].ToString();
                gheedetails.doe = dr["doe"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.lossqty = dr["lossqty"].ToString();
                gheedetails.remarks = dr["remarks"].ToString();
                gheedetails.type = dr["type"].ToString();
                gheedetails.snf = dr["snf"].ToString();
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_gheesales_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT gheesales.sno, gheesales.productid, gheesales.salesquantity, gheesales.branchid, gheesales.userid, gheesales.remarks, gheesales.doe, CONVERT(varchar, gheesales.doe, 126) AS datetime, productmaster.productname FROM  gheesales INNER JOIN productmaster ON gheesales.productid = productmaster.sno WHERE (gheesales.doe BETWEEN @d1 AND @d2) AND (gheesales.branchid = @branchid) ORDER BY gheesales.doe");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.productid = dr["productid"].ToString();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.salesquantity = dr["salesquantity"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                DateTime dt = Convert.ToDateTime(dr["doe"].ToString());
                gheedetails.doe = dt.ToString("MM/dd/yyyy");
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_gheecream_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string creamid = "0";
            string productid = context.Request["productid"];
            if (productid == "Cow")
            {
                creamid = "90";
            }
            else
            {
                creamid = "164";
            }
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT    pm.quantity, pdm.productname,pm.fat, pm.snf FROM    productmonitar AS pm INNER JOIN productmaster AS pdm ON pm.productid = pdm.sno WHERE   (pm.productid = @sno) AND (pm.branchid = @branchid)");
            cmd.Parameters.Add("@sno", creamid);
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.creamtype = dr["quantity"].ToString();
                gheedetails.fat = dr["fat"].ToString();
                gheedetails.snf = dr["snf"].ToString();
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_buttercream_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string creamid = "96";
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT    pm.quantity, pdm.productname FROM    productmonitar AS pm INNER JOIN productmaster AS pdm ON pm.productid = pdm.sno WHERE   (pm.productid = @sno) AND (pm.branchid = @branchid)");
            cmd.Parameters.Add("@sno", creamid);
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.productname = dr["productname"].ToString();
                gheedetails.creamtype = dr["quantity"].ToString();
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
        }
    }

    private void btnsave_filim_rate_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string productid = context.Request["productid"];
            string frmdate = context.Request["fromdate"];
            string tdate = context.Request["todate"];
            string Newrate = context.Request["NewRate"];
            string oldrate = context.Request["PrevRate"];
            string Remarks = context.Request["Remarks"];
            DateTime fromdate = DateTime.ParseExact(frmdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            DateTime todate = DateTime.ParseExact(tdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("insert into filmrate_logs (productid, branchid, userid, fromdate, todate, newrate, oldrate, remarks, doe, status) values  (@productid, @BranchID, @userid, @fromdate, @todate, @newrate, @oldrate, @remarks, @doe, @status)");
            cmd.Parameters.Add("@productid", productid);
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@userid", UserID);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@newrate", Newrate);
            cmd.Parameters.Add("@oldrate", oldrate);
            cmd.Parameters.Add("@fromdate", fromdate);
            cmd.Parameters.Add("@todate", todate);
            cmd.Parameters.Add("@status", "P");
            cmd.Parameters.Add("@remarks", Remarks);
            vdm.insert(cmd);


            string msg = "Film Rate Details Added successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    public class filmrate
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string Productname { get; set; }
        public string Newrate { get; set; }
        public string oldrate { get; set; }
        public string branchid { get; set; }
        public string branchname { get; set; }
        public string remarks { get; set; }
        public string doe { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
    }
    private void get_filimrate_logs(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select fl.sno, fl.productid, pm.productname, fl.userid, fl.newrate, fl.oldrate, fl.remarks, fl.fromdate, fl.todate from filmrate_logs fl INNER JOIN productmaster pm on pm.sno = fl.productid WHERE fl.branchid=@branchid AND status=@status");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@status", "P");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<filmrate> filmdetails = new List<filmrate>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                filmrate filimdetails = new filmrate();
                filimdetails.Productname = dr["productname"].ToString();
                filimdetails.fromdate = ((DateTime)dr["fromdate"]).ToString("yyyy-MM-dd");
                filimdetails.todate = ((DateTime)dr["todate"]).ToString("yyyy-MM-dd");
                filimdetails.Newrate = dr["newrate"].ToString();
                filimdetails.oldrate = dr["oldrate"].ToString();
                filimdetails.remarks = dr["remarks"].ToString();
                filimdetails.productid = dr["productid"].ToString();
                filimdetails.sno = dr["sno"].ToString();
                filmdetails.Add(filimdetails);
            }
            string response = GetJson(filmdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void approve_filmrate_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string productid = context.Request["productid"];
            string Newrate = context.Request["NewRate"];
            string oldrate = context.Request["PrevRate"];
            string frmdate = context.Request["fromdate"];
            string tdate = context.Request["todate"];
            string Remarks = context.Request["Remarks"];
            string msg = string.Empty;
            DateTime fromdate = DateTime.ParseExact(frmdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            DateTime todate = DateTime.ParseExact(tdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("select sno, productid from packing_entry where (doe BETWEEN @d1 and @d2) AND productid=@pid");
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(todate));
            cmd.Parameters.Add("@pid", productid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    cmd = new SqlCommand("update packing_entry set filmrate=@newrate where productid=@productid and sno=@sno");
                    cmd.Parameters.Add("@productid", dr["productid"].ToString());
                    cmd.Parameters.Add("@newrate", Newrate);
                    cmd.Parameters.Add("@sno", dr["sno"].ToString());
                    vdm.Update(cmd);
                }
                cmd = new SqlCommand("update filmrate_logs SET status=@status WHERE productid=@productid AND (doe BETWEEN @d1 AND @d2)");
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                cmd.Parameters.Add("@d2", GetHighDate(todate));
                cmd.Parameters.Add("@productid", productid);
                vdm.Update(cmd);
                cmd = new SqlCommand("update productmaster set filimrate=@frate where sno=@productid");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@frate", Newrate);
                vdm.Update(cmd);
                msg = "New Film Rate approved succesfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                msg = "There is no data in bitween two dates";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {

        }
    }

    private void save_ageofmilkdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string qtykgs = context.Request["Qtykgs"];
            string qtyltrs = context.Request["Qtyltrs"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string sessiontype = context.Request["sessiontype"];
            string milktype = context.Request["milktype"];
            string Remarks = context.Request["Remarks"];
            string sno = context.Request["sno"];
            string btnvalue = context.Request["btnval"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into milkdetails (branchid, qty_kgs, qty_ltrs, fat, snf, clr, ageofmilk, milktype, remarks, doe) values  (@BranchID, @qtykgs, @qtyltrs, @fat, @snf, @clr, @milkage, @milktype, @remarks, @doe)");
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@qtykgs", qtykgs);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@milkage", sessiontype);
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@remarks", Remarks);
                vdm.insert(cmd);
                cmd = new SqlCommand("UPDATE ccwisemilkdetails set qty_kgs = qty_kgs+@qtykgs, qty_ltrs = qty_ltrs+@qtyltrs ,milktype=@milktype where branchid=@branchid");
                cmd.Parameters.Add("@qtykgs", qtykgs);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@milktype", milktype);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert into ccwisemilkdetails (branchid, qty_kgs, qty_ltrs,milktype) values  (@branchid, @qtykgs, @qtyltrs,@milktype)");
                    cmd.Parameters.Add("@qtykgs", qtykgs);
                    cmd.Parameters.Add("@qtyltrs", qtyltrs);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@milktype", milktype);
                    vdm.insert(cmd);
                }
                string msg = "details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE milkdetails SET qty_kgs=@qtykgs, qty_ltrs=@qtyltrs, fat=@fat, snf=@snf, clr=@clr, ageofmilk=@milkage, milktype=@milktype, remarks=@remarks, doe=@doe Where sno=@sno and branchid=@branchid");
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@qtykgs", qtykgs);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@milkage", sessiontype);
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "details Modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {

        }
    }

    public class milkdetails
    {
        public string sno { get; set; }
        public string qtykgs { get; set; }
        public string qtyltrs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string milkage { get; set; }
        public string remarks { get; set; }
        public string doe { get; set; }
        public string kgfat { get; set; }
        public string kgsnf { get; set; }
        public string branchname { get; set; }
        public string milktype { get; set; }

    }

    public class vendordashboard
    {
        public string sno { get; set; }
        public string vendorname { get; set; }
        public string amount { get; set; }
        public string vendortype { get; set; }
        public string branchtype { get; set; }
        public string doe { get; set; }
    }

    private void getageofmilkdetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select sno, qty_kgs, qty_ltrs, fat, snf, clr, ageofmilk, remarks, doe From milkdetails where branchid=@branchid");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<milkdetails> filmdetails = new List<milkdetails>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                milkdetails filimdetails = new milkdetails();
                filimdetails.qtykgs = dr["qty_kgs"].ToString();
                filimdetails.qtyltrs = dr["qty_ltrs"].ToString();
                filimdetails.fat = dr["fat"].ToString();
                filimdetails.snf = dr["snf"].ToString();
                filimdetails.clr = dr["clr"].ToString();
                filimdetails.milkage = dr["ageofmilk"].ToString();
                filimdetails.doe = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd");
                filimdetails.remarks = dr["remarks"].ToString();
                filimdetails.sno = dr["sno"].ToString();
                filmdetails.Add(filimdetails);
            }
            string response = GetJson(filmdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void get_milkagedashbord_details(HttpContext context)
    {
        try
        {
            ProcureDBmanager vdm = new ProcureDBmanager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = ProcureDBmanager.GetTime(vdm.conn);
            if (branchid == "1")
            {
                cmd = new SqlCommand("SELECT   SUM(pi.Milk_ltr) AS milkltr, SUM(pi.Milk_kg) AS milkkg, pi.Plant_Code, pm.Plant_Name, pm.Milktype FROM    Procurementimport AS pi INNER JOIN Plant_Master AS pm ON pi.Plant_Code = pm.Plant_Code WHERE  (pi.Prdate BETWEEN @d1 AND @d2) GROUP BY pi.Plant_Code, pm.Plant_Name, pm.Milktype ORDER BY pm.Milktype");
            }
            else
            {

            }
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<milkdetails> milkentrydetails = new List<milkdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                milkdetails getmilkdetails = new milkdetails();
                getmilkdetails.milktype = dr["Milktype"].ToString();
                getmilkdetails.branchname = dr["Plant_Name"].ToString();
                double QtyKgs = 0;
                double.TryParse(dr["milkkg"].ToString(), out QtyKgs);
                QtyKgs = Math.Round(QtyKgs, 2);
                double qtyltr = 0;
                qtyltr = QtyKgs / 1.03;
                qtyltr = Math.Round(qtyltr, 2);
                getmilkdetails.qtykgs = QtyKgs.ToString();
                getmilkdetails.qtyltrs = qtyltr.ToString();
                milkentrydetails.Add(getmilkdetails);
            }
            string response = GetJson(milkentrydetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class milkvariation
    {
        public string sno { get; set; }
        public string qtykgs { get; set; }
        public string qtyltrs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string milkage { get; set; }
        public string remarks { get; set; }
        public string doe { get; set; }
        public string kgfat { get; set; }
        public string kgsnf { get; set; }
        public string branchname { get; set; }
        public string dcno { get; set; }
        public string inwordno { get; set; }
        public string vehicleno { get; set; }
        public string milktype { get; set; }
        public string vendorno { get; set; }
        public string batchid { get; set; }
        public string batch { get; set; }
        public string calcon { get; set; }
        public string overheadon { get; set; }
        public string overheadcost { get; set; }
        public string mstdsnf { get; set; }
        public string pstdsnf { get; set; }
        public string snfpluson { get; set; }
        public string msnfpluson { get; set; }
        public string psnfpluson { get; set; }
        public string transporton { get; set; }
        public string rateon { get; set; }
    }

    private void get_tankeroutworddetails_click(HttpContext context)
    {
        string venderid = context.Request["vendername"].ToString();
        string frmdate = context.Request["fromdate"].ToString();
        string tdate = context.Request["todate"].ToString();
        DateTime fromdate = Convert.ToDateTime(frmdate);
        DateTime todate = Convert.ToDateTime(tdate);
        //DateTime fromdate = DateTime.ParseExact(fromdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        //DateTime todate = DateTime.ParseExact(todate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        cmd = new SqlCommand("  SELECT milktransactions.dcno, milktransactions.sectionid, milktransactions.inwardno AS InwardNo, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.m_std_snf, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE  (milktransactions.doe BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransaction_logs.milktype='Cow') AND (milktransactions.sectionid=@sectionid)");
        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
        cmd.Parameters.Add("@d2", GetHighDate(todate));
        cmd.Parameters.Add("@transtype", "Out");
        cmd.Parameters.Add("@sectionid", venderid);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<milkvariation> milkentrydetails = new List<milkvariation>();
        if (dtroutes.Rows.Count > 0)
        {
            foreach (DataRow dr in dtroutes.Rows)
            {
                milkvariation getmilkdetails = new milkvariation();
                getmilkdetails.dcno = dr["dcno"].ToString();
                getmilkdetails.vendorno = dr["sectionid"].ToString();
                getmilkdetails.inwordno = dr["InwardNo"].ToString();
                getmilkdetails.vehicleno = dr["vehicleno"].ToString();
                getmilkdetails.doe = dr["doe"].ToString();
                getmilkdetails.milktype = dr["milktype"].ToString();
                getmilkdetails.rateon = dr["rate_on"].ToString();
                getmilkdetails.calcon = dr["calc_on"].ToString();
                getmilkdetails.overheadon = dr["overheadon"].ToString();
                getmilkdetails.overheadcost = dr["overheadcost"].ToString();
                getmilkdetails.mstdsnf = dr["m_std_snf"].ToString();
                getmilkdetails.pstdsnf = dr["p_std_snf"].ToString();
                getmilkdetails.snfpluson = dr["snfplus_on"].ToString();
                getmilkdetails.msnfpluson = dr["m_snfpluscost"].ToString();
                getmilkdetails.psnfpluson = dr["p_snfpluscost"].ToString();
                getmilkdetails.transporton = dr["transport_on"].ToString();
                double QtyLtr = 0;
                double.TryParse(dr["qty_ltr"].ToString(), out QtyLtr);
                QtyLtr = Math.Round(QtyLtr, 2);
                getmilkdetails.qtyltrs = QtyLtr.ToString();
                double QtyKgs = 0;
                double.TryParse(dr["qty_kgs"].ToString(), out QtyKgs);
                QtyKgs = Math.Round(QtyKgs, 2);
                getmilkdetails.qtykgs = QtyKgs.ToString();
                double fat = 0;
                double.TryParse(dr["fat"].ToString(), out fat);
                fat = Math.Round(fat, 2);
                getmilkdetails.fat = fat.ToString();
                double snf = 0;
                double.TryParse(dr["snf"].ToString(), out snf);
                snf = Math.Round(snf, 2);
                getmilkdetails.snf = snf.ToString();
                double kgfat = 0;
                kgfat = QtyKgs * fat / 100;
                kgfat = Math.Round(kgfat, 2);
                double kgsnf = 0;
                kgsnf = QtyKgs * snf / 100;
                kgsnf = Math.Round(kgsnf, 2);
                getmilkdetails.kgfat = kgfat.ToString();
                getmilkdetails.kgsnf = kgsnf.ToString();
                milkentrydetails.Add(getmilkdetails);
            }
            string response = GetJson(milkentrydetails);
            context.Response.Write(response);
        }
        else
        {
            string response = GetJson(milkentrydetails);
            context.Response.Write(response);
        }
    }

    private void btnsave_billingvariation_click(HttpContext context)
    {
        try
        {
            if (context.Session["Branch_ID"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                string vendorsno = context.Request["vendorno"];
                string dcno = context.Request["dcno"];
                string vehicleno = context.Request["vehicleno"];
                string milktype = context.Request["milktype"];
                string qtyltrs = context.Request["qtyltrs"];
                string qtykgs = context.Request["qtykgs"];
                string fat = context.Request["fat"];
                string snf = context.Request["snf"];
                string variationqty = context.Request["variationqty"];
                string variationfat = context.Request["variationfat"];
                cmd = new SqlCommand("insert into billingqtyvariationdetails (vendorid, branchid, dcno, vehicleno, milktype, qty_kgs, qty_ltrs, fat, snf, variationqty, variationfat, doe) values (@vendorid, @BranchID,  @dcno, @vehicleno, @milktype,  @qtykgs,  @qtyltrs, @fat, @snf, @variationqty, @variationfat, @doe)");
                cmd.Parameters.Add("@vendorid", vendorsno);
                cmd.Parameters.Add("@BranchID", BranchID);
                cmd.Parameters.Add("@qtykgs", qtykgs);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@qtyltrs", qtyltrs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@dcno", dcno);
                cmd.Parameters.Add("@vehicleno", vehicleno);
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@variationqty", variationqty);
                cmd.Parameters.Add("@variationfat", variationfat);
                vdm.insert(cmd);
                string msg = "details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    public class LineChartValuesclass
    {
        //public List<string> IndentDate { get; set; }
        public List<string> status { get; set; }
        public List<string> quantity { get; set; }
        public string Date { get; set; }
        //public string DeliveryQty { get; set; }
    }

    private void get_Branchwiseinward_milkdetails(HttpContext context)
    {
        string venderid = context.Request["branchid"].ToString();
        string frmdate = context.Request["fromdate"].ToString();
        string tdate = context.Request["todate"].ToString();
        DateTime fromdate = Convert.ToDateTime(frmdate);
        DateTime todate = Convert.ToDateTime(tdate);
        //DateTime fromdate = DateTime.ParseExact(fromdate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        //DateTime todate = DateTime.ParseExact(todate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        cmd = new SqlCommand("SELECT milktransactions.doe, vendors.vendorname, SUM(milktransactions.qty_kgs) AS qtykg FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) GROUP BY milktransactions.doe, vendors.vendorname");
        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
        cmd.Parameters.Add("@d2", GetHighDate(todate));
        cmd.Parameters.Add("@transtype", "in");
        cmd.Parameters.Add("@sectionid", venderid);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        if (dtroutes.Rows.Count > 0)
        {
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> quantitylist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string inDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                string unitQty = dr["qtykg"].ToString();
                double qtykg = 0;
                double.TryParse(dr["qtykg"].ToString(), out qtykg);
                avgSaleQty += qtykg;
                qtykgs += unitQty + ",";
                string inwardDate = dr["doe"].ToString();
                DateTime dtinwardDate = Convert.ToDateTime(inwardDate).AddDays(1);
                string ChangedTime = dtinwardDate.ToString("dd");
                inDate += ChangedTime + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtroutes.Rows)
            {
                string TodayMileage = dr["qtykg"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            inDate = inDate.Substring(0, inDate.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            quantitylist.Add(AvgMileage);
            //Datelist.Add(inDate);
            status.Add("Qty Kgs");
            status.Add("Avg Kgs");
            getLineChart.quantity = quantitylist;
            getLineChart.Date = inDate;
            getLineChart.status = status;
            LineChartValuelist.Add(getLineChart);
        }
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }

    private void generate_branchwiselinechart(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string milktype = context.Request["milktype"].ToString();
        string status = context.Request["status"].ToString();
        string qtykgs = "";
        string vendorname = "";
        if (status == "Daily")
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID)");
                cmd.Parameters.Add("@Milktype", "Cow");
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID)");
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno  WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            qtykgs += unitQty + ",";
                            string vendor = dr["shortname"].ToString();
                            vendorname += vendor + ",";
                        }
                    }

                }
            }
        }
        else
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID)");
                cmd.Parameters.Add("@Milktype", "Cow");
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID)");
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-30));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            qtykgs += unitQty + ",";
                            string vendor = dr["shortname"].ToString();
                            vendorname += vendor + ",";
                        }
                    }

                }
            }

        }
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        LineChartValuesclass getLineChart = new LineChartValuesclass();
        List<string> quantitylist = new List<string>();
        List<string> Datelist = new List<string>();
        List<string> statuss = new List<string>();
        vendorname = vendorname.Substring(0, vendorname.Length - 1);
        qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
        quantitylist.Add(qtykgs);
        //Datelist.Add(inDate);
        statuss.Add("Qty Kgs");
        getLineChart.quantity = quantitylist;
        getLineChart.Date = vendorname;
        getLineChart.status = statuss;
        LineChartValuelist.Add(getLineChart);
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }

    private void generate_batchwiselinechart(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string date = context.Request["date"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        DateTime dtfrom = GetLowDate(dtdate);
        DateTime dtfromdate = dtfrom.AddHours(6);
        DateTime dtto = GetLowDate(dtdate).AddDays(1);
        DateTime dttodate = dtto.AddHours(6);
        string qtyltrs = "";
        string batch = "";
        cmd = new SqlCommand("SELECT batchid, batch, batchcode, branchid, departmentid, createdby FROM  batchmaster WHERE branchid = @BranchID");
        cmd.Parameters.Add("@BranchID", BranchID);
        DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];
        if (dtbatch.Rows.Count > 0)
        {
            foreach (DataRow drbatch in dtbatch.Rows)
            {
                cmd = new SqlCommand("SELECT  SUM(batchentrydetails.qty_kgs) AS qtykgs, SUM(batchentrydetails.qty_ltrs) AS qtyltrs, batchmaster.batch FROM   batchentrydetails INNER JOIN  batchmaster ON batchentrydetails.batchid = batchmaster.batchid WHERE (batchentrydetails.batchid = @batchid) AND (batchentrydetails.doe BETWEEN @d1 and @d2) GROUP BY batchmaster.batch");
                cmd.Parameters.Add("@batchid", drbatch["batchid"].ToString());
                cmd.Parameters.Add("@d1", dtfromdate);
                cmd.Parameters.Add("@d2", dttodate);
                DataTable dtbatchsum = vdm.SelectQuery(cmd).Tables[0];
                if (dtbatchsum.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtbatchsum.Rows)
                    {
                        string unitQty = dr["qtyltrs"].ToString();
                        qtyltrs += unitQty + ",";
                        string batchname = dr["batch"].ToString();
                        batch += batchname + ",";
                    }
                }
            }
        }
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        LineChartValuesclass getLineChart = new LineChartValuesclass();
        List<string> quantitylist = new List<string>();
        List<string> Datelist = new List<string>();
        List<string> statuss = new List<string>();
        batch = batch.Substring(0, batch.Length - 1);
        qtyltrs = qtyltrs.Substring(0, qtyltrs.Length - 1);
        quantitylist.Add(qtyltrs);
        //Datelist.Add(inDate);
        statuss.Add("Qty Ltrs");
        getLineChart.quantity = quantitylist;
        getLineChart.Date = batch;
        getLineChart.status = statuss;
        LineChartValuelist.Add(getLineChart);
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }

    private void get_sectionwiseproduction_details(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string section = context.Request["section"].ToString();
        string frmdate = context.Request["fromdate"].ToString();
        string tdate = context.Request["todate"].ToString();
        DateTime fromdate = Convert.ToDateTime(frmdate);
        DateTime todate = Convert.ToDateTime(tdate);
        if (section == "Ghee Section")
        {
            cmd = new SqlCommand("SELECT SUM(productionqty) AS productionqty, doe  FROM  gheeproduction WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid=@branchid) GROUP BY doe");
        }
        if (section == "Curd Section")
        {
            cmd = new SqlCommand("SELECT  SUM(qty) AS productionqty, doe  FROM    (SELECT   SUM(production) AS qty, CONVERT(date, doe, 103) AS doe  FROM   curd_productiondetails WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid = @branchid) GROUP BY doe) AS EXP1 GROUP BY doe");
        }
        if (section == "Butter Section")
        {
            cmd = new SqlCommand("SELECT SUM( productionqty) AS productionqty, doe FROM   butterproduction WHERE (doe between @d1 and @d2) AND (branchid=@branchid) GROUP BY doe");
        }
        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
        cmd.Parameters.Add("@d2", GetHighDate(todate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtproduction = vdm.SelectQuery(cmd).Tables[0];
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        if (dtproduction.Rows.Count > 0)
        {
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> quantitylist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string inDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtproduction.Rows)
            {
                string unitQty = dr["productionqty"].ToString();
                double qtykg = 0;
                double.TryParse(dr["productionqty"].ToString(), out qtykg);
                avgSaleQty += qtykg;
                qtykgs += unitQty + ",";
                string inwardDate = dr["doe"].ToString();
                DateTime dtinwardDate = Convert.ToDateTime(inwardDate);
                string ChangedTime = dtinwardDate.ToString("dd");
                inDate += ChangedTime + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtproduction.Rows)
            {
                string TodayMileage = dr["productionqty"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            inDate = inDate.Substring(0, inDate.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            quantitylist.Add(AvgMileage);
            //Datelist.Add(inDate);
            status.Add("Production Qty");
            status.Add("Avg Production Qty");
            getLineChart.quantity = quantitylist;
            getLineChart.Date = inDate;
            getLineChart.status = status;
            LineChartValuelist.Add(getLineChart);
        }
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }


    public class PieValues
    {
        public List<string> RouteName { get; set; }
        public List<string> Amount { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public List<string> wastage { get; set; }
        public string totalqty { get; set; }
    }
    private void piechartvalues(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string milktype = context.Request["milktype"].ToString();
        string status = context.Request["status"].ToString();
        string branchtype = context.Request["branchtype"].ToString();
        string date = context.Request["date"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        List<PieValues> lPieValueslist = new List<PieValues>();
        List<string> RouteList = new List<string>();
        List<string> AmountList = new List<string>();

        string qtykgs = "";
        string vendorname = "";
        if (status == "Daily")
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@Milktype", "Cow");
                cmd.Parameters.Add("@branchtype", branchtype);
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno  WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) AND (milktransactions.branchid = @branchid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(dtdate));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    cmd.Parameters.Add("@branchid", BranchID);
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            if (unitQty == "")
                            {
                                unitQty = "0";
                            }
                            AmountList.Add(unitQty);
                            string vendor = dr["shortname"].ToString();
                            RouteList.Add(vendor);
                        }
                    }

                }
            }
        }
        else
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Cow");
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) AND (milktransactions.branchid = @branchid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-30));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    cmd.Parameters.Add("@branchid", BranchID);
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            if (unitQty == "")
                            {
                                unitQty = "0";
                            }
                            AmountList.Add(unitQty);
                            string vendor = dr["shortname"].ToString();
                            RouteList.Add(vendor);
                        }
                    }

                }
            }
        }
        PieValues GetPieValues = new PieValues();
        GetPieValues.RouteName = RouteList;
        GetPieValues.Amount = AmountList;
        lPieValueslist.Add(GetPieValues);
        string errresponse = GetJson(lPieValueslist);
        context.Response.Write(errresponse);
    }

    private void filimchartdetails(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        //string fromdate = context.Request["fromdate"].ToString();
        //string todate = context.Request["todate"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        string date = context.Request["date"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        // DateTime dttodate = Convert.ToDateTime(todate);
        List<PieValues> lPieValueslist = new List<PieValues>();
        List<string> RouteList = new List<string>();
        List<string> AmountList = new List<string>();
        List<string> avgdetails = new List<string>();

        string qtykgs = "";
        string vendorname = "";
        cmd = new SqlCommand("SELECT  SUM(received_film) AS receivedfilm, SUM(cuttingfilm) as cuttingfilm, SUM(consumption_film) as consumptionfilm, SUM(return_film) as returnfilim, SUM(wastage_film) as wastagefilim  FROM  packing_entry   WHERE (doe BETWEEN @d1 AND @d2) AND (branchid = @BranchID)");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate).AddDays(-1));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@BranchID", BranchID);
        DataTable dtfilim = vdm.SelectQuery(cmd).Tables[0];
        if (dtfilim.Rows.Count > 0)
        {
            foreach (DataRow drfilim in dtfilim.Rows)
            {
                string receivedfilm = drfilim["receivedfilm"].ToString();
                string consumptionfilm = drfilim["consumptionfilm"].ToString();
                string cuttingfilm = drfilim["cuttingfilm"].ToString();
                string returnfilim = drfilim["returnfilim"].ToString();
                string wastagefilim = drfilim["wastagefilim"].ToString();
                string received = "Receivedfilm";
                string consumption = "Consumptionfilm";
                string cutting = "Cuttingfilm";
                string returnfilm = "Returnfilim";
                string wastagefilm = "Wastagefilim";

                double wfilim = Convert.ToDouble(wastagefilim);
                double cfilim = Convert.ToDouble(cuttingfilm);
                double confilim = Convert.ToDouble(consumptionfilm);
                double wastage = (wfilim / confilim) * 100;
                double cutwaste = (cfilim / confilim) * 100;
                double overall = ((wfilim + cfilim) / confilim) * 100;
                wastage = Math.Round(wastage, 2);
                cutwaste = Math.Round(cutwaste, 2);
                overall = Math.Round(overall, 2);

                avgdetails.Add(wastage.ToString());
                avgdetails.Add(cutwaste.ToString());
                avgdetails.Add(overall.ToString());


                AmountList.Add(receivedfilm);
                AmountList.Add(consumptionfilm);
                AmountList.Add(returnfilim);
                AmountList.Add(cuttingfilm);
                AmountList.Add(wastagefilim);

                RouteList.Add(received);
                RouteList.Add(consumption);
                RouteList.Add(returnfilm);
                RouteList.Add(cutting);
                RouteList.Add(wastagefilm);
            }
        }
        PieValues GetPieValues = new PieValues();
        GetPieValues.RouteName = RouteList;
        GetPieValues.Amount = AmountList;
        GetPieValues.wastage = avgdetails;
        lPieValueslist.Add(GetPieValues);
        string errresponse = GetJson(lPieValueslist);
        context.Response.Write(errresponse);

    }

    private void generate_returnmilkchart(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string milktype = context.Request["milktype"].ToString();
        string fromdate = context.Request["fromdate"].ToString();
        string todate = context.Request["todate"].ToString();
        DateTime dtfromdate = Convert.ToDateTime(fromdate);
        DateTime dttodate = Convert.ToDateTime(todate);
        //cmd = new SqlCommand("SELECT SUM(qty_ltrs) AS qtyltrs, doe  FROM  batchentrydetails WHERE (doe between @d1 and @d2) AND (branchid=@branchid) AND (type=@milktype) GROUP BY doe");
        cmd = new SqlCommand("SELECT SUM(qtyltrs) AS qtyltrs, doe  FROM  (SELECT SUM(qty_ltrs) AS qtyltrs, CONVERT(date, doe, 103) AS doe  FROM batchentrydetails  WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid = @branchid) AND (type = @milktype)  GROUP BY doe) AS EXP1 GROUP BY doe");
        cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
        cmd.Parameters.Add("@d2", GetHighDate(dttodate));
        cmd.Parameters.Add("@BranchID", BranchID);
        cmd.Parameters.Add("@milktype", milktype);
        DataTable dtmilk = vdm.SelectQuery(cmd).Tables[0];
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        if (dtmilk.Rows.Count > 0)
        {
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> quantitylist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string inDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtmilk.Rows)
            {
                string unitQty = dr["qtyltrs"].ToString();
                double qtykg = 0;
                double.TryParse(dr["qtyltrs"].ToString(), out qtykg);
                avgSaleQty += qtykg;
                qtykgs += unitQty + ",";
                string inwardDate = dr["doe"].ToString();
                DateTime dtinwardDate = Convert.ToDateTime(inwardDate);
                string ChangedTime = dtinwardDate.ToString("dd");
                inDate += ChangedTime + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtmilk.Rows)
            {
                string TodayMileage = dr["qtyltrs"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            inDate = inDate.Substring(0, inDate.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            quantitylist.Add(AvgMileage);
            //Datelist.Add(inDate);
            status.Add("Qty Ltrs");
            status.Add("Avg Qty Ltrs");
            getLineChart.quantity = quantitylist;
            getLineChart.Date = inDate;
            getLineChart.status = status;
            LineChartValuelist.Add(getLineChart);
        }
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }

    private void get_productwiseproductiondetails(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string deptid = context.Request["deptid"].ToString();
        string productid = context.Request["productid"].ToString();
        string frmdate = context.Request["fromdate"].ToString();
        string tdate = context.Request["todate"].ToString();
        DateTime fromdate = Convert.ToDateTime(frmdate);
        DateTime todate = Convert.ToDateTime(tdate);
        if (deptid == "3")
        {
            cmd = new SqlCommand("SELECT SUM(productionqty) AS productionqty, doe FROM (SELECT gheeproduction.doe, SUM(gheeproduction.productionqty) AS productionqty FROM gheeproduction WHERE (gheeproduction.doe BETWEEN @d1 AND @d2) AND ( gheeproduction.productid=@productid ) AND (gheeproduction.branchid=@branchid) GROUP BY gheeproduction.doe) AS EXP1 GROUP BY doe");
        }
        if (deptid == "2")
        {
            cmd = new SqlCommand("SELECT SUM(qtyltr) AS productionqty, doe FROM (SELECT SUM(qty_ltr) AS qtyltr, CONVERT(date, doe, 103) AS doe  FROM  packing_entry  WHERE  (doe BETWEEN @d1 AND @d2) AND (productid = @productid) AND (branchid = @branchid) GROUP BY doe) AS EXP1 GROUP BY doe");
        }
        if (deptid == "1")
        {
            cmd = new SqlCommand("SELECT SUM(production) AS productionqty, doe FROM (SELECT SUM(production) AS production, CONVERT(date, doe, 103) AS doe FROM curd_productiondetails  WHERE (doe BETWEEN @D1 AND @D2) AND (productid = @productid) AND (branchid = @branchid) GROUP BY doe) AS EXP1 GROUP BY doe");
        }
        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
        cmd.Parameters.Add("@d2", GetHighDate(todate));
        cmd.Parameters.Add("@productid", productid);
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
        if (dtroutes.Rows.Count > 0)
        {
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> quantitylist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string inDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                string unitQty = dr["productionqty"].ToString();
                if (unitQty != "0")
                {
                    double qtykg = 0;
                    double.TryParse(dr["productionqty"].ToString(), out qtykg);
                    avgSaleQty += qtykg;
                    qtykgs += unitQty + ",";
                    string inwardDate = dr["doe"].ToString();
                    DateTime dtinwardDate = Convert.ToDateTime(inwardDate).AddDays(1);
                    string ChangedTime = dtinwardDate.ToString("dd");
                    inDate += ChangedTime + ",";
                    count++;
                }
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtroutes.Rows)
            {
                string TodayMileage = dr["productionqty"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            inDate = inDate.Substring(0, inDate.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            quantitylist.Add(AvgMileage);
            //Datelist.Add(inDate);
            status.Add("Production Qty");
            status.Add("AVG Production Qty");
            getLineChart.quantity = quantitylist;
            getLineChart.Date = inDate;
            getLineChart.status = status;
            LineChartValuelist.Add(getLineChart);
        }
        string errresponse = GetJson(LineChartValuelist);
        context.Response.Write(errresponse);
    }

    private void get_receivebles_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT vendor_accounts.sno, vendor_accounts.amount, vendors.vendorname, vendors.vendortype, vendors.branchtype FROM vendor_accounts INNER JOIN vendors ON vendor_accounts.sno = vendors.sno");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<vendordashboard> vendordashboardetails = new List<vendordashboard>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                vendordashboard vendordetails = new vendordashboard();
                double amount = Convert.ToDouble(dr["amount"].ToString());
                vendordetails.amount = Math.Round(amount, 2).ToString();
                vendordetails.vendorname = dr["vendorname"].ToString();
                vendordetails.vendortype = dr["vendortype"].ToString();
                vendordetails.doe = ServerDateCurrentdate.ToString();
                vendordetails.branchtype = dr["branchtype"].ToString();
                vendordetails.sno = dr["sno"].ToString();
                vendordashboardetails.Add(vendordetails);
            }
            string response = GetJson(vendordashboardetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void get_siloclosing_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string date = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            //cmd = new SqlCommand("SELECT scd.sno, scd.siloid, scd.qty_kgs, scd.fat, scd.snf, scd.clr, scd.closingdate, scd.branchid, scd.enteredby, silomaster.SiloName FROM  silowiseclosingdetails scd inner join silomaster on silomaster.SiloId = scd.siloid WHERE scd.closingdate BETWEEN @d1 and @d2 AND scd.branchid=@branchid");
            cmd = new SqlCommand("SELECT   scd.sno, scd.siloid, scd.qty_kgs, scd.fat, scd.snf, scd.clr, scd.closingdate, scd.branchid, scd.enteredby, sm.SiloName, bm.batchid, bm.batch FROM  silowiseclosingdetails AS scd INNER JOIN silomaster AS sm ON sm.SiloId = scd.siloid LEFT OUTER JOIN batchmaster AS bm ON scd.batchid = bm.batchid WHERE  (scd.closingdate BETWEEN @d1 AND @d2) AND (scd.branchid = @branchid)");
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<SiloMonitar> SiloMonitardetails = new List<SiloMonitar>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                SiloMonitar silodetails = new SiloMonitar();
                silodetails.SiloId = dr["siloid"].ToString();
                silodetails.SiloName = dr["SiloName"].ToString();
                silodetails.Quantity = dr["qty_kgs"].ToString();
                silodetails.snf = dr["snf"].ToString();
                silodetails.fat = dr["fat"].ToString();
                silodetails.clr = dr["clr"].ToString();
                silodetails.sno = dr["sno"].ToString();
                silodetails.batchid = dr["batchid"].ToString();
                silodetails.batch = dr["batch"].ToString();
                SiloMonitardetails.Add(silodetails);
            }
            string response = GetJson(SiloMonitardetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void modify_silo_closing_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string qtykgs = context.Request["qty"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string clr = context.Request["clr"];
            string date = context.Request["date"];
            string sno = context.Request["sno"];
            string siloid = context.Request["siloid"];
            string btnvalue = context.Request["btnvalue"];
            string batchid = context.Request["batchid"];
            string costperltr = context.Request["costperltr"];
            if (costperltr == "")
            {
                costperltr = "0";
            }
            string cdate = context.Request["cdate"];
            DateTime dcdate = Convert.ToDateTime(cdate);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Modify")
            {
                cmd = new SqlCommand("update silowiseclosingdetails SET qty_kgs=@qtykgs, fat=@fat, snf=@snf, clr=@clr,closingdate=@closingdate, batchid = @batchid, costperltr = @costperltr WHERE sno=@sno and siloid=@siloid");
                cmd.Parameters.Add("@qtykgs", qtykgs);
                cmd.Parameters.Add("@fat", fat);
                cmd.Parameters.Add("@snf", snf);
                cmd.Parameters.Add("@clr", clr);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@siloid", siloid);
                cmd.Parameters.Add("@closingdate", dcdate);
                cmd.Parameters.Add("@batchid", batchid);
                cmd.Parameters.Add("@costperltr", costperltr);
                vdm.Update(cmd);
                string msg = "details Modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    public class subcurdcoldroomdetails
    {
        public string time { get; set; }
        public string coldroom1 { get; set; }
        public string coldroom2 { get; set; }
        public string incubationroom { get; set; }
        public string createdby { get; set; }
        public string createdon { get; set; }
        public string doe { get; set; }
        public string remarks { get; set; }
        public string csno { get; set; }
        public string coldroom3 { get; set; }
        public string blastroom { get; set; }
        public string containerno1 { get; set; }
        public string containerno2 { get; set; }
        public string ibt { get; set; }
        public string coldroom4 { get; set; }
        public string coldroom5 { get; set; }
        public string coldroom6 { get; set; }
        public string coldroom7 { get; set; }
    }
    public class curdcoldroomdetails
    {
        public string date { get; set; }
        public string type { get; set; }
        public string sno { get; set; }
        public string btnvalue { get; set; }
        public List<subcurdcoldroomdetails> curdcoldroomDetailsarray { get; set; }
    }

    private void save_curd_coldroom(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            curdcoldroomdetails obj = js.Deserialize<curdcoldroomdetails>(title1);
            string type = obj.type;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                if (BranchID == "1" || BranchID == "22")
                {
                    foreach (subcurdcoldroomdetails gh in obj.curdcoldroomDetailsarray)
                    {
                        cmd = new SqlCommand("insert into curdcoldroom_details(time, type, coldroom1, coldroom2, incubationroom, doe, remarks, createdby, createdon, branchid) values (@time,@type, @coldroom1, @coldroom2, @incubationroom, @doe, @remarks, @createdby, @createdon, @BranchID)");
                        cmd.Parameters.Add("@time", gh.time);
                        cmd.Parameters.Add("@type", type);
                        cmd.Parameters.Add("@coldroom1", gh.coldroom1);
                        cmd.Parameters.Add("@coldroom2", gh.coldroom2);
                        cmd.Parameters.Add("@incubationroom", gh.incubationroom);
                        cmd.Parameters.Add("@remarks", gh.remarks);
                        cmd.Parameters.Add("@createdby", UserID);
                        cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@BranchID", BranchID);
                        vdm.insert(cmd);
                    }
                }
                else
                {
                    foreach (subcurdcoldroomdetails gh in obj.curdcoldroomDetailsarray)
                    {
                        //coldroom3,coldroom4,coldroom5,coldroom6,coldroom7
                        cmd = new SqlCommand("insert into curdcoldroom_details(time, type, coldroom1, coldroom2, incubationroom, doe, remarks, createdby, createdon, branchid,coldroom3,coldroom4,coldroom5,coldroom6,coldroom7) values (@time,@type, @coldroom1, @coldroom2, @incubationroom, @doe, @remarks, @createdby, @createdon, @BranchID,@coldroom3,@coldroom4,@coldroom5,@coldroom6,@coldroom7)");
                        cmd.Parameters.Add("@time", gh.time);
                        cmd.Parameters.Add("@type", type);
                        cmd.Parameters.Add("@coldroom1", gh.coldroom1);
                        cmd.Parameters.Add("@coldroom2", gh.coldroom2);
                        cmd.Parameters.Add("@incubationroom", gh.incubationroom);
                        cmd.Parameters.Add("@remarks", gh.remarks);
                        cmd.Parameters.Add("@createdby", UserID);
                        cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@BranchID", BranchID);

                        cmd.Parameters.Add("@coldroom3", gh.coldroom3);
                        cmd.Parameters.Add("@coldroom4", gh.blastroom);
                        cmd.Parameters.Add("@coldroom5", gh.containerno1);
                        cmd.Parameters.Add("@coldroom6", gh.containerno2);
                        cmd.Parameters.Add("@coldroom7", gh.ibt);
                        vdm.insert(cmd);
                    }
                }
                string response = GetJson("Curd Cold Room Details Successfully");
                context.Response.Write(response);
            }
            else
            {
                foreach (subcurdcoldroomdetails es in obj.curdcoldroomDetailsarray)
                {
                    string Sno = context.Request["sno"];
                    cmd = new SqlCommand("update curdcoldroom_details set type=@type, time=@time,coldroom1=@coldroom1,coldroom2=@coldroom2,incubationroom=@incubationroom,remarks=@remarks,createdby=@createdby,createdon=@createdon,doe=@doe where sno=@sno");
                    cmd.Parameters.Add("@time", es.time);
                    cmd.Parameters.Add("@sno", Sno);
                    cmd.Parameters.Add("@coldroom1", es.coldroom1);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@coldroom2", es.coldroom2);
                    cmd.Parameters.Add("@incubationroom", es.incubationroom);
                    cmd.Parameters.Add("@createdby", UserID);
                    //cmd.Parameters.Add("@status", "Active");
                    cmd.Parameters.Add("@remarks", es.remarks);
                    cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                    if (vdm.Update(cmd) == 0)
                    {

                        cmd = new SqlCommand("insert into curdcoldroom_details(time,type, coldroom1, coldroom2, incubationroom, doe, remarks, createdby, createdon) values (@time,@type, @coldroom1, @coldroom2, @incubationroom, @doe, @remarks, @createdby, @createdon)");
                        cmd.Parameters.Add("@time", es.time);
                        cmd.Parameters.Add("@sno", Sno);
                        cmd.Parameters.Add("@coldroom1", es.coldroom1);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@coldroom2", es.coldroom2);
                        cmd.Parameters.Add("@incubationroom", es.incubationroom);
                        cmd.Parameters.Add("@createdby", UserID);
                        //cmd.Parameters.Add("@status", "Active");
                        cmd.Parameters.Add("@remarks", es.remarks);
                        cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                        vdm.insert(cmd);

                    }
                }
                string response = GetJson("update Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_curdcoldroom_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT   sno, time, coldroom1, coldroom2, incubationroom, remarks, doe, createdby, createdon, editedby, editedon, branchid, type, coldroom3, coldroom4, coldroom5, coldroom6, coldroom7 FROM   curdcoldroom_details WHERE  (branchid = @branchid) AND (doe BETWEEN @d1 AND @d2) ORDER BY sno DESC");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<subcurdcoldroomdetails> curdcoldroomdetails = new List<subcurdcoldroomdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                subcurdcoldroomdetails curdcolddetails = new subcurdcoldroomdetails();
                curdcolddetails.time = dr["time"].ToString();
                curdcolddetails.coldroom1 = dr["coldroom1"].ToString();
                curdcolddetails.coldroom2 = dr["coldroom2"].ToString();
                curdcolddetails.coldroom3 = dr["coldroom3"].ToString();
                curdcolddetails.coldroom4 = dr["coldroom4"].ToString();
                curdcolddetails.coldroom5 = dr["coldroom5"].ToString();
                curdcolddetails.coldroom6 = dr["coldroom6"].ToString();
                curdcolddetails.coldroom7 = dr["coldroom7"].ToString();
                curdcolddetails.incubationroom = dr["incubationroom"].ToString();
                curdcolddetails.remarks = dr["remarks"].ToString();
                DateTime DT = Convert.ToDateTime(dr["doe"].ToString());
                string DATE = DT.ToString("dd/MM/yyyy");
                curdcolddetails.doe = DATE;
                curdcolddetails.createdby = dr["createdby"].ToString();
                curdcolddetails.createdon = dr["createdon"].ToString();
                curdcolddetails.csno = dr["sno"].ToString();
                curdcoldroomdetails.Add(curdcolddetails);
            }
            string response = GetJson(curdcoldroomdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void save_packing_details(HttpContext context)
    {
        vdm = new SalesDBManager();
        string weight = context.Request["weight"];
        string length = context.Request["length"];
        string width = context.Request["width"];
        string microns = context.Request["microns"];
        string btnval = context.Request["btnval"];
        string UserID = context.Session["Employ_Sno"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        if (btnval == "Save")
        {
            cmd = new SqlCommand("insert into packingmaster(weight, length, width, microns, doe,createdby) values (@weight, @length, @width, @microns, @doe,@createdby)");
            cmd.Parameters.Add("@weight", weight);
            cmd.Parameters.Add("@length", length);
            cmd.Parameters.Add("@width", width);
            cmd.Parameters.Add("@microns", microns);
            cmd.Parameters.Add("@createdby", UserID);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            vdm.insert(cmd);
            string msg = "packing details saved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        else
        {
            string sno = context.Request["sno"];
            cmd = new SqlCommand("update packingmaster set weight=@weight,length=@length,width=@width,microns=@microns,doe=@doe,createdby=@createdby where sno=@sno");
            cmd.Parameters.Add("@weight", weight);
            cmd.Parameters.Add("@length", length);
            cmd.Parameters.Add("@width", width);
            cmd.Parameters.Add("@microns", microns);
            cmd.Parameters.Add("@createdby", UserID);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = "Packing details updated successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    public class creamsaparation
    {
        public string Date { get; set; }
        public string milkreciveqty { get; set; }
        public string milkrecivefat { get; set; }
        public string creamqty { get; set; }
        public string skimmilkqty { get; set; }
        public string skimmilkfat { get; set; }
        public string sno { get; set; }
        public string section { get; set; }

        public string butterfat { get; set; }
        public string productionqty { get; set; }
        public string productionfat { get; set; }
        public string totalcreamproductionfat { get; set; }
        public string totalskimmilkfat { get; set; }

        public string openingbalance { get; set; }
        public string openingfat { get; set; }
    }

    private void save_creamsaparation_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string DATE = context.Request["doe"];
            DateTime doe = Convert.ToDateTime(DATE);
            string milkreciveqty = context.Request["milkreciveqty"];
            string milkrecivefat = context.Request["milkrecivefat"];
            string creamqty = context.Request["creamqty"];
            string skimmilkqty = context.Request["skimmilkqty"];
            string skimmilkfat = context.Request["skimmilkfat"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            string UserID = context.Session["Employ_Sno"].ToString();
            string section = context.Request["section"];
            string butterfat = context.Request["butterfat"];

            string productionqty = context.Request["productionqty"];
            string productionfat = context.Request["productionfat"];
            string totalcreamproductionfat = context.Request["totalcreamproductionfat"];
            string totalskimmilkfat = context.Request["totalskimmilkfat"];

            string opcreamqty = context.Request["opcreamqty"];
            string opcreamfat = context.Request["opcreamfat"];

            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into creamsaparation_details (milkreciveqty, milkrecivefat, creamqty, skimmilkqty, skimmilkfat, doe, createdby, createdon, branchid, section, butterfat, productionqty, productionfat, totalcreamproductionfat, totalskimmilkfat,openingbalance, openingfat) values (@milkreciveqty, @milkrecivefat, @creamqty, @skimmilkqty, @skimmilkfat,  @doe, @createdby, @createdon, @branchid, @section, @butterfat, @productionqty, @productionfat, @totalcreamproductionfat, @totalskimmilkfat,@openingbalance, @openingfat)");
                cmd.Parameters.Add("@milkreciveqty", milkreciveqty);
                cmd.Parameters.Add("@milkrecivefat", milkrecivefat);
                cmd.Parameters.Add("@creamqty", creamqty);
                cmd.Parameters.Add("@skimmilkqty", skimmilkqty);
                cmd.Parameters.Add("@skimmilkfat", skimmilkfat);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                cmd.Parameters.Add("@section", section);
                cmd.Parameters.Add("@butterfat", butterfat);
                cmd.Parameters.Add("@productionqty", productionqty);
                cmd.Parameters.Add("@productionfat", productionfat);
                cmd.Parameters.Add("@totalcreamproductionfat", totalcreamproductionfat);
                cmd.Parameters.Add("@totalskimmilkfat", totalskimmilkfat);
                cmd.Parameters.Add("@openingbalance", opcreamqty);
                cmd.Parameters.Add("@openingfat", opcreamfat);
                vdm.insert(cmd);

                cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@quantity", productionqty);
                cmd.Parameters.Add("@productid", "1217");
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.Update(cmd);

                string msg = "Cream Details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("SELECT  productionqty FROM  creamsaparation_details WHERE (sno = @sno)");
                cmd.Parameters.Add("@sno", sno);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                string prevproductionqty = routes.Rows[0]["productionqty"].ToString();
                double prevproductionqtys = Convert.ToDouble(prevproductionqty);
                cmd = new SqlCommand("update  creamsaparation_details set milkreciveqty=@milkreciveqty, milkrecivefat=@milkrecivefat, creamqty=@creamqty, skimmilkqty=@skimmilkqty, skimmilkfat=@skimmilkfat, doe=@doe, section=@section, butterfat=@butterfat, productionqty=@productionqty, productionfat=@productionfat, totalcreamproductionfat=@totalcreamproductionfat, totalskimmilkfat=@totalskimmilkfat,openingbalance=@openingbalance, openingfat=@openingfat where sno=@sno");
                cmd.Parameters.Add("@milkreciveqty", milkreciveqty);
                cmd.Parameters.Add("@milkrecivefat", milkrecivefat);
                cmd.Parameters.Add("@creamqty", creamqty);
                cmd.Parameters.Add("@skimmilkqty", skimmilkqty);
                cmd.Parameters.Add("@skimmilkfat", skimmilkfat);
                cmd.Parameters.Add("@doe", doe);
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                cmd.Parameters.Add("@section", section);
                cmd.Parameters.Add("@butterfat", butterfat);
                cmd.Parameters.Add("@productionqty", productionqty);
                cmd.Parameters.Add("@productionfat", productionfat);
                cmd.Parameters.Add("@totalcreamproductionfat", totalcreamproductionfat);
                cmd.Parameters.Add("@totalskimmilkfat", totalskimmilkfat);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@openingbalance", opcreamqty);
                cmd.Parameters.Add("@openingfat", opcreamfat);
                vdm.Update(cmd);
                double productionqtys = Convert.ToDouble(productionqty);
                if (prevproductionqtys > productionqtys)
                {
                    double qty = prevproductionqtys - productionqtys;
                    cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity-@quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", qty);
                    cmd.Parameters.Add("@productid", "1217");
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                else
                {
                    double qty = prevproductionqtys - productionqtys;
                    cmd = new SqlCommand("UPDATE productmonitar SET quantity=quantity+@quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", qty);
                    cmd.Parameters.Add("@productid", "1217");
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                string msg = "Cream Details updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void get_creamsaparation_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string date = context.Request["getdate"];
            DateTime dtdate = Convert.ToDateTime(date);
            cmd = new SqlCommand("SELECT  sno, milkreciveqty, milkrecivefat, creamqty, skimmilkqty, skimmilkfat, doe, createdby, createdon, branchid, section, butterfat, productionqty, productionfat, totalcreamproductionfat, totalskimmilkfat,openingbalance, openingfat FROM   creamsaparation_details WHERE (branchid = @branchid) AND (doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<creamsaparation> creamsaparationdetails = new List<creamsaparation>();
            foreach (DataRow dr in routes.Rows)
            {
                creamsaparation CREAMdetails = new creamsaparation();
                CREAMdetails.sno = dr["sno"].ToString();
                CREAMdetails.milkreciveqty = dr["milkreciveqty"].ToString();
                CREAMdetails.milkrecivefat = dr["milkrecivefat"].ToString();
                CREAMdetails.creamqty = dr["creamqty"].ToString();
                CREAMdetails.skimmilkqty = dr["skimmilkqty"].ToString();
                CREAMdetails.skimmilkfat = dr["skimmilkfat"].ToString();
                CREAMdetails.Date = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd");
                CREAMdetails.section = dr["section"].ToString();
                CREAMdetails.butterfat = dr["butterfat"].ToString();
                CREAMdetails.productionqty = dr["productionqty"].ToString();
                CREAMdetails.productionfat = dr["productionfat"].ToString();
                CREAMdetails.totalcreamproductionfat = dr["totalcreamproductionfat"].ToString();
                CREAMdetails.totalskimmilkfat = dr["totalskimmilkfat"].ToString();
                CREAMdetails.openingbalance = dr["openingbalance"].ToString();
                CREAMdetails.openingfat = dr["openingfat"].ToString();
                creamsaparationdetails.Add(CREAMdetails);
            }
            string response = GetJson(creamsaparationdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    public class packagedetails
    {
        public string weight { get; set; }
        public string length { get; set; }
        public string width { get; set; }
        public string microns { get; set; }
        public string createdby { get; set; }
        public string createdon { get; set; }
        public string sno { get; set; }
    }

    private void get_filim_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("select sno, weight,length, width, microns, createdby from packingmaster ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<packagedetails> packingdetailslist = new List<packagedetails>();
            foreach (DataRow dr in routes.Rows)
            {
                packagedetails packdetails = new packagedetails();
                packdetails.weight = dr["weight"].ToString();
                packdetails.length = dr["length"].ToString();
                packdetails.width = dr["width"].ToString();
                packdetails.microns = dr["microns"].ToString();
                packdetails.createdby = dr["createdby"].ToString();
                packdetails.sno = dr["sno"].ToString();
                packingdetailslist.Add(packdetails);
            }
            string response = GetJson(packingdetailslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    public class curdpacketquality
    {
        public string qco { get; set; }
        public string Remarks { get; set; }
        public string Chemist { get; set; }
        public string btnvalue { get; set; }
        public string sno { get; set; }
        // public string productid { get; set; }
        public string date { get; set; }
        public string ProductName { get; set; }
        public string sample { get; set; }
        public List<subcurdpacketquality> curdpktqualityarray { get; set; }
    }
    public class subcurdpacketquality
    {
        public string packetsize { get; set; }
        public string batchno { get; set; }
        public string mrp { get; set; }
        public string structure { get; set; }
        public string ot { get; set; }
        public string productid { get; set; }
        public string acidity { get; set; }
        public string temp { get; set; }
        public string usedbydate { get; set; }
    }
    private void save_curd_packetwise_qualitytesting_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            curdpacketquality obj = js.Deserialize<curdpacketquality>(title1);
            string qco = obj.qco;
            string Remarks = obj.Remarks;
            string Chemist = obj.Chemist;
            string productid = obj.ProductName;
            string sample = obj.sample;
            string sno = obj.sno;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = obj.btnvalue;
            string DeptID = "1";
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (subcurdpacketquality cp in obj.curdpktqualityarray)
                {
                    string useddate = cp.usedbydate;
                    string pid = cp.productid;
                    DateTime dtusedby = Convert.ToDateTime(useddate);
                    cmd = new SqlCommand("insert into qualitytesting_details (packetsize,  batchno, mrp, structure, ot, acidity, temp, usebydate, status, productid, doe, sampleno, chemist, deptid, remarks, qco,  branchid, createdon, createdby) values(@packetsize,  @batchno, @mrp, @structure, @ot, @acidity, @temp, @usedbydate, @status, @pid, @doe, @sample, @chemist, @departmentid, @remarks, @qco, @branchid,  @entrydate,  @createdby)");
                    cmd.Parameters.Add("@packetsize", cp.packetsize);
                    cmd.Parameters.Add("@pid", pid);
                    cmd.Parameters.Add("@status", "P");
                    cmd.Parameters.Add("@batchno", cp.batchno);
                    cmd.Parameters.Add("@mrp", cp.mrp);
                    cmd.Parameters.Add("@structure", cp.structure);
                    cmd.Parameters.Add("@ot", cp.ot);
                    cmd.Parameters.Add("@acidity", cp.acidity);
                    cmd.Parameters.Add("@temp", cp.temp);
                    cmd.Parameters.Add("@usedbydate", dtusedby);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@sample", sample);
                    cmd.Parameters.Add("@chemist", Chemist);
                    cmd.Parameters.Add("@departmentid", DeptID);
                    cmd.Parameters.Add("@remarks", Remarks);
                    cmd.Parameters.Add("@qco", qco);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@createdby", UserID);
                    vdm.insert(cmd);
                }
            }
            string msg = "quality testing details added successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_curd_packetwise_qualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  cqd.sno, cqd.productid, cqd.batchno, cqd.usebydate, cqd.mrp, cqd.structure, cqd.manufacturedate, cqd.appearance, cqd.qty_kgs, cqd.qty_ltrs, cqd.fat, cqd.snf, cqd.clr, cqd.temp, cqd.acidity, cqd.cob1, cqd.ot, cqd.hs, cqd.phosps1, cqd.alcohol, cqd.mbrt, cqd.neutralizers, cqd.remarks, cqd.chemist, cqd.qco, cqd.date,  cqd.sampleno, cqd.creamtype, cqd.createdby, cqd.createdon, cqd.doe, cqd.status, cqd.approvedby, cqd.approvedon, cqd.percentageon, cqd.branchid,  cqd.percentage_on, cqd.time, cqd.deptid, cqd.packetsize, pm.productname FROM  qualitytesting_details AS cqd INNER JOIN productmaster AS pm ON cqd.productid = pm.sno WHERE  (cqd.deptid = 1) AND (cqd.status = 'P') AND (cqd.createdon BETWEEN @d1 AND @d2) AND (cqd.branchid = @branchid) ORDER BY cqd.sno");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowMonthRetrive(ServerDateCurrentdate));
            cmd.Parameters.Add("@d2", GetHighMonth(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Gheequalitytesting> Gheequalitytestinglist = new List<Gheequalitytesting>();
            foreach (DataRow dr in routes.Rows)
            {
                Gheequalitytesting details = new Gheequalitytesting();
                details.productname = dr["productname"].ToString();
                details.productid = dr["productid"].ToString();
                details.sampleno = dr["sampleno"].ToString();
                details.packetsize = dr["packetsize"].ToString();
                DateTime dt = Convert.ToDateTime(dr["usebydate"].ToString());
                details.usedbydate = dt.ToString("dd/MM/yyyy");
                details.ptemp = dr["temp"].ToString();
                details.pmrp = dr["mrp"].ToString();
                details.sno = dr["sno"].ToString();
                details.pot = dr["ot"].ToString();
                details.pacidity = dr["acidity"].ToString();
                details.pstructure = dr["structure"].ToString();
                Gheequalitytestinglist.Add(details);
            }
            string response = GetJson(Gheequalitytestinglist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    private void Approve_curd_packetwise_qualitytesting_click(HttpContext context)
    {
        string sno = context.Request["sno"].ToString();
        string pid = context.Request["productid"].ToString();
        string UserID = context.Session["Employ_Sno"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("UPDATE qualitytesting_details SET status=@status, approvedby=@approvedby, approvedon=@approvedon WHERE sno=@sno and productid=@productid");
        cmd.Parameters.Add("@sno", sno);
        cmd.Parameters.Add("@status", "A");
        cmd.Parameters.Add("@productid", pid);
        cmd.Parameters.Add("@approvedon", ServerDateCurrentdate);
        cmd.Parameters.Add("@approvedby", UserID);
        vdm.Update(cmd);
        string msg = "Curd Quality Testing Details Approved successfully";
        string response = GetJson(msg);
        context.Response.Write(response);
    }

    private void Approve_ghee_packetwise_qualitytesting_click(HttpContext context)
    {
        string sno = context.Request["sno"].ToString();
        string pid = context.Request["productid"].ToString();
        string btnvalue = context.Request["btnvalue"].ToString();
        string UserID = context.Session["Employ_Sno"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        if (btnvalue == "Approve")
        {
            cmd = new SqlCommand("UPDATE qualitytesting_details SET status=@status, approvedby=@approvedby, approvedon=@approvedon WHERE sno=@sno and productid=@productid");
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@productid", pid);
            cmd.Parameters.Add("@approvedon", ServerDateCurrentdate);
            cmd.Parameters.Add("@approvedby", UserID);
            vdm.Update(cmd);
            string msg = "quality testing details Approved successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        else
        {
            cmd = new SqlCommand("UPDATE ghee_qualitytesting SET status=@status, approvedby=@approvedby, approvedon=@approvedon WHERE sno=@sno and productid=@productid");
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@productid", pid);
            cmd.Parameters.Add("@approvedon", ServerDateCurrentdate);
            cmd.Parameters.Add("@approvedby", UserID);
            vdm.Update(cmd);
            string msg = "quality testing details Rejected successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }



    public class subgheequalitytest
    {
        public string productname { get; set; }
        public string productid { get; set; }
        public string date { get; set; }
        public string packsize { get; set; }
        public string batchno { get; set; }
        public string usebydate { get; set; }
        public string mrp { get; set; }
        public string structure { get; set; }
        public string ot { get; set; }
        public string temp { get; set; }
        public string acidity { get; set; }
        public string remarks { get; set; }
        public string sno { get; set; }
    }
    public class Gheequalitytesting
    {
        public string date { get; set; }
        public string productname { get; set; }
        public string productid { get; set; }
        public string packetsize { get; set; }
        public string usedbydate { get; set; }
        public string ptemp { get; set; }
        public string pmrp { get; set; }
        public string qco { get; set; }
        public string Remarks { get; set; }
        public string Chemist { get; set; }
        public string SourceID { get; set; }
        public string sampleno { get; set; }
        public string sno { get; set; }
        public string pstructure { get; set; }
        public string pot { get; set; }
        public string pacidity { get; set; }
        public string btnvalue { get; set; }
        public List<subgheequalitytest> gheequalityDetailsarray { get; set; }
    }

    private void save_ghee_wise_qualitytesting_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            Gheequalitytesting obj = js.Deserialize<Gheequalitytesting>(title1);
            string qco = obj.qco;
            string Remarks = obj.Remarks;
            string Chemist = obj.Chemist;
            string SourceID = obj.SourceID;
            string sample = obj.sampleno;
            string sno = obj.sno;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = obj.btnvalue;
            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (subgheequalitytest gh in obj.gheequalityDetailsarray)
                {
                    string pktsize = gh.packsize;
                    string batchno = gh.batchno;
                    string productid = gh.productid;
                    string usebydate = gh.usebydate;
                    DateTime dtusebydate = Convert.ToDateTime(usebydate);
                    string mrp = gh.mrp;
                    string structure = gh.structure;
                    string ot = gh.ot;
                    string temp = gh.temp;
                    string acidity = gh.acidity;
                    string deptid = "3";
                    cmd = new SqlCommand("insert into qualitytesting_details (productid, sampleno, deptid, branchid, doe, packetsize, batchno, usebydate, mrp, structure, ot, temp, acidity, remarks, chemist, qco, createdon, createdby, status) values (@productid,@sample,@departmentid,@branchid,@doe,@packetsize,@batchno,@usebydate,@mrp,@structure,@ot,@temp,@acidity,@remarks,@chemist,@qco,@entrydate,@createdby,@status)");
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@sample", sample);
                    cmd.Parameters.Add("@departmentid", deptid);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@remarks", Remarks);
                    cmd.Parameters.Add("@chemist", Chemist);
                    cmd.Parameters.Add("@qco", qco);
                    cmd.Parameters.Add("@packetsize", pktsize);
                    cmd.Parameters.Add("@batchno", batchno);
                    cmd.Parameters.Add("@usebydate", dtusebydate);
                    cmd.Parameters.Add("@mrp", mrp);
                    cmd.Parameters.Add("@structure", structure);
                    cmd.Parameters.Add("@ot", ot);
                    cmd.Parameters.Add("@temp", temp);
                    cmd.Parameters.Add("@acidity", acidity);
                    cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@createdby", UserID);
                    cmd.Parameters.Add("@status", "P");
                    vdm.insert(cmd);
                }
            }
            string msg = "ghee wise quality test successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_gheeproductqualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  cqd.sno, cqd.productid, cqd.batchno, cqd.ot,cqd.usebydate, cqd.mrp, cqd.structure, cqd.manufacturedate, cqd.appearance, cqd.temp, cqd.acidity, cqd.cob1, cqd.remarks, cqd.chemist, cqd.qco, cqd.date, cqd.sampleno, cqd.creamtype, cqd.createdby, cqd.createdon, cqd.doe, cqd.status, cqd.approvedby, cqd.approvedon, cqd.percentageon, cqd.branchid, cqd.percentage_on, cqd.time, cqd.deptid, cqd.packetsize, productmaster.productname FROM  qualitytesting_details AS cqd INNER JOIN productmaster ON cqd.productid = productmaster.sno WHERE  (cqd.deptid = 3) AND (cqd.status = 'P') AND (cqd.branchid = @branchid) AND (cqd.doe BETWEEN @d1 AND @d2) ORDER BY cqd.createdon DESC");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Gheequalitytesting> Gheequalitytestinglist = new List<Gheequalitytesting>();
            foreach (DataRow dr in routes.Rows)
            {
                Gheequalitytesting details = new Gheequalitytesting();
                details.productname = dr["productname"].ToString();
                details.productid = dr["productid"].ToString();
                details.sampleno = dr["sampleno"].ToString();
                details.packetsize = dr["packetsize"].ToString();
                DateTime dt = Convert.ToDateTime(dr["usebydate"].ToString());
                details.usedbydate = dt.ToString("dd/MM/yyyy");
                details.ptemp = dr["temp"].ToString();
                details.pmrp = dr["mrp"].ToString();
                details.sno = dr["sno"].ToString();
                details.pot = dr["ot"].ToString();
                details.pstructure = dr["structure"].ToString();
                details.pacidity = dr["acidity"].ToString();
                Gheequalitytestinglist.Add(details);
            }
            string response = GetJson(Gheequalitytestinglist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void save_curdbiproductdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string productid = context.Request["producttype"];
            string milkreciveqty = context.Request["milkreciveqty"];
            string milkrecivefat = context.Request["milkrecivefat"];
            string milkrecivesnf = context.Request["milkrecivesnf"];
            string production = context.Request["production"];
            string remorks = context.Request["remarks"];
            string date = context.Request["doe"];
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = context.Request["btnval"];
            string ob = context.Request["ob"];
            string sno = context.Request["sno"];
            string deptid = "1";
            double quantitydetails;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Save")
            {
                cmd = new SqlCommand("insert into plant_production_details (productid, recivedqty, recivedfat, recivesnf, productionqty, branchid, doe, remarks, createdon, createdby,deptid,ob) values (@productid, @milkreciveqty, @milkrecivefat, @milkrecivesnf, @production, @branchid, @doe, @remarks, @entrydate, @createdby,@deptid,@ob)");
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@milkreciveqty", milkreciveqty);
                cmd.Parameters.Add("@milkrecivefat", milkrecivefat);
                cmd.Parameters.Add("@milkrecivesnf", milkrecivesnf);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@production", production);
                cmd.Parameters.Add("@remarks", remorks);
                cmd.Parameters.Add("@entrydate", dtdate);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@deptid", deptid);
                cmd.Parameters.Add("@ob", ob);
                vdm.insert(cmd);
                cmd = new SqlCommand("UPDATE productmonitar set quantity=quantity+@quantity WHERE productid=@pproductid and branchid=@branchid");
                cmd.Parameters.Add("@quantity", production);
                cmd.Parameters.Add("@pproductid", productid);
                cmd.Parameters.Add("@branchid", BranchID);
                if (vdm.Update(cmd) == 0)
                {
                    cmd = new SqlCommand("insert into productmonitar (productid, quantity, branchid) values (@productid, @quantity, @branchid)");
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@quantity", production);
                    vdm.insert(cmd);
                }
                string msg = "Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Select productionqty from plant_production_details where sno = @sno");
                cmd.Parameters.Add("@sno", sno);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                double quantity = Convert.ToDouble(routes.Rows[0]["productionqty"].ToString());
                if (quantity > Convert.ToDouble(production))
                {
                    quantitydetails = quantity - Convert.ToDouble(production);
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity-@qty where  productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                else
                {
                    quantitydetails = Convert.ToDouble(production) - quantity;
                    cmd = new SqlCommand("update productmonitar SET quantity=quantity+@qty where productid = @product and branchid=@branchid ");
                    cmd.Parameters.Add("@qty", quantitydetails);
                    cmd.Parameters.Add("@product", productid);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.Update(cmd);
                }
                cmd = new SqlCommand("update plant_production_details SET productid=@productid, recivedqty=@milkreciveqty, recivedfat=@milkrecivefat, recivesnf=@milkrecivesnf, productionqty=@production,remarks=@remarks, createdon=@entrydate   where sno=@sno  and branchid=@branchid");
                cmd.Parameters.Add("@branchid", BranchID);
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@milkreciveqty", milkreciveqty);
                cmd.Parameters.Add("@milkrecivefat", milkrecivefat);
                cmd.Parameters.Add("@milkrecivesnf", milkrecivesnf);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@production", production);
                cmd.Parameters.Add("@remarks", remorks);
                cmd.Parameters.Add("@entrydate", dtdate);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@deptid", deptid);
                cmd.Parameters.Add("@ob", ob);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Bi Products modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class curdbiproducts
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string productname { get; set; }
        public string milkreciveqty { get; set; }
        public string milkrecivefat { get; set; }
        public string milkrecivesnf { get; set; }
        public string production { get; set; }
        public string doe { get; set; }
        public string ob { get; set; }
        public string datetime { get; set; }
        public string remarks { get; set; }
    }
    private void get_curdbiproductdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        string branchid = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT ppd.sno, ppd.productid, ppd.branchid,ppd.ob,productmaster.productname, ppd.createdon as doe, ppd.remarks,CONVERT(varchar, ppd.createdon, 126)  AS datetime, ppd.recivedqty AS milkreciveqty, ppd.recivedfat AS milkrecivefat, ppd.recivesnf AS milkrecivesnf,  ppd.ob, ppd.avgfat, ppd.productionqty, ppd.createdon AS doe, productmaster.productname, productmaster.biproductsshortname FROM plant_production_details AS ppd INNER JOIN productmaster ON ppd.productid = productmaster.sno WHERE (ppd.branchid = @branchid) AND (ppd.createdon BETWEEN @d1 AND @d2) AND (ppd.deptid = '1') AND (productmaster.biproductsshortname = 'loose') ORDER BY ppd.sno DESC");
        cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate.AddDays(-10)));
        cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
        cmd.Parameters.Add("@branchid", branchid);
        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
        List<curdbiproducts> curdbiproducts = new List<curdbiproducts>();
        foreach (DataRow dr in routes.Rows)
        {
            curdbiproducts getstocks = new curdbiproducts();
            string productid = dr["productid"].ToString();
            getstocks.productid = productid;
            getstocks.productname = dr["productname"].ToString();
            getstocks.milkreciveqty = dr["milkreciveqty"].ToString();
            getstocks.milkrecivefat = dr["milkrecivefat"].ToString();
            getstocks.milkrecivesnf = dr["milkrecivesnf"].ToString();
            getstocks.production = dr["productionqty"].ToString();
            getstocks.doe = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd");
            getstocks.sno = dr["sno"].ToString();
            getstocks.ob = dr["ob"].ToString();
            getstocks.datetime = dr["datetime"].ToString();
            getstocks.remarks = dr["remarks"].ToString();
            curdbiproducts.Add(getstocks);
        }
        string response = GetJson(curdbiproducts);
        context.Response.Write(response);
    }

    public class Swabanalysis
    {
        public string sno { get; set; }
        public string btnval { get; set; }
        public string date { get; set; }
        public string microbiologist { get; set; }
        public string qaic { get; set; }
        public List<SubAnalysis> swabdetailsarray { get; set; }
        public List<SubAnalysis> microdetailsarray { get; set; }
    }
    public class SubAnalysis
    {
        public string sno { get; set; }
        public string source { get; set; }
        public string coliforms { get; set; }
        public string ecolig { get; set; }
        public string yeastandmould { get; set; }
        public string tbcg1 { get; set; }
        public string tbcg2 { get; set; }
        public string tbcg3 { get; set; }
        public string tbcg4 { get; set; }
        public string remarks { get; set; }
        public string date { get; set; }
        public string swabdelay { get; set; }
        public string swabdate { get; set; }
    }
    public class get_swabanalysis
    {
        public List<Swabanalysis> Swabanalysis { get; set; }
        public List<SubAnalysis> SubAnalysis { get; set; }
    }
    private void save_micro_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            Swabanalysis obj = js.Deserialize<Swabanalysis>(title1);
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            string sno = obj.sno;
            string microbiologist = obj.microbiologist;
            string qaic = obj.qaic;
            string btnval = obj.btnval;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                foreach (SubAnalysis gh in obj.microdetailsarray)
                {
                    cmd = new SqlCommand("insert into microbiolagy_analyasis(source, coliforms, ecoli, yeastmould, tbc1, tbc2, tbc3, tbc4, remarks, qaic, microbiologist, createdby, doe) values (@source, @coliforms, @ecoli, @yeastmould, @tbc1, @tbc2, @tbc3, @tbc4, @remarks, @qaic, @microbiologist, @createdby, @doe)");
                    //source, coliforms, ecoli, yeastmould, tbc1, tbc2, tbc3, tbc4, remarks, qaic, microbiologist, createdby, doe
                    cmd.Parameters.Add("@source", gh.source);
                    cmd.Parameters.Add("@coliforms", gh.coliforms);
                    cmd.Parameters.Add("@ecoli", gh.ecolig);
                    cmd.Parameters.Add("@yeastmould", gh.yeastandmould);
                    cmd.Parameters.Add("@tbc1", gh.tbcg1);
                    cmd.Parameters.Add("@tbc2", gh.tbcg2);
                    cmd.Parameters.Add("@tbc3", gh.tbcg3);
                    cmd.Parameters.Add("@tbc4", gh.tbcg4);
                    cmd.Parameters.Add("@remarks", gh.remarks);
                    cmd.Parameters.Add("@qaic", qaic);
                    cmd.Parameters.Add("@microbiologist", microbiologist);
                    cmd.Parameters.Add("@createdby", UserID);
                    cmd.Parameters.Add("@doe", dtdate);
                    vdm.insert(cmd);
                    string msg = "Microbiology Details Saved successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void get_microbiology_details(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT   sno, source, coliforms, ecoli, yeastmould, tbc1, tbc2, tbc3, tbc4, remarks, qaic, microbiologist, createdby, doe FROM  microbiolagy_analyasis  where doe between @d1 and @d2");
        cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
        cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtcurd = vdm.SelectQuery(cmd).Tables[0];
        List<SubAnalysis> SubAnalysis = new List<SubAnalysis>();
        foreach (DataRow dr in dtcurd.Rows)
        {
            SubAnalysis getstocks = new SubAnalysis();
            getstocks.source = dr["source"].ToString();
            getstocks.coliforms = dr["coliforms"].ToString();
            getstocks.ecolig = dr["ecoli"].ToString();
            getstocks.yeastandmould = dr["yeastmould"].ToString();
            getstocks.tbcg1 = dr["tbc1"].ToString();
            getstocks.tbcg2 = dr["tbc2"].ToString();
            getstocks.tbcg3 = dr["tbc3"].ToString();
            getstocks.tbcg4 = dr["tbc4"].ToString();
            getstocks.date = dr["doe"].ToString();
            SubAnalysis.Add(getstocks);
        }
        string response = GetJson(SubAnalysis);
        context.Response.Write(response);
    }
    private void save_swab_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            Swabanalysis obj = js.Deserialize<Swabanalysis>(title1);
            string sno = obj.sno;
            string btnval = obj.btnval;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                foreach (SubAnalysis gh in obj.swabdetailsarray)
                {
                    string source = gh.source;
                    string date = gh.date;
                    string swabdelay = gh.swabdelay;
                    string remarks = gh.remarks;
                    cmd = new SqlCommand("insert into microbiology_swabdetails(source,swabdate,swabdetails,remarks,doe,createdby) values (@source,@swabdate,@swabdetails,@remarks,@doe,@createdby)");
                    cmd.Parameters.Add("@source", source);
                    cmd.Parameters.Add("@swabdate", date);
                    cmd.Parameters.Add("@swabdetails", swabdelay);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@createdby", UserID);
                    vdm.insert(cmd);
                    string msg = "Swab Details Saved successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                foreach (SubAnalysis gh in obj.swabdetailsarray)
                {
                    cmd = new SqlCommand("update microbiology_swabdetails set source=@source,swabdate=@swabdate,swabdetails=@swabdetails, remarks=@remarks,doe=@doe,createdby=@createdby where sno=@sno");
                    cmd.Parameters.Add("@source", gh.source);
                    cmd.Parameters.Add("@swabdate", gh.date);
                    cmd.Parameters.Add("@swabdetails", gh.swabdelay);
                    cmd.Parameters.Add("@remarks", gh.remarks);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@createdby", UserID);
                    cmd.Parameters.Add("@sno", sno);
                    vdm.Update(cmd);
                }
                string msg = "Swab Details updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void get_swabanalysis_details(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT  sno, source, swabdate, swabdetails, remarks, doe, createdby FROM  microbiology_swabdetails where doe between @d1 and @d2");
        cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
        cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtcurd = vdm.SelectQuery(cmd).Tables[0];
        List<SubAnalysis> SubAnalysis = new List<SubAnalysis>();
        foreach (DataRow dr in dtcurd.Rows)
        {
            SubAnalysis getstocks = new SubAnalysis();
            getstocks.source = dr["source"].ToString();
            getstocks.swabdate = dr["swabdate"].ToString();
            getstocks.swabdelay = dr["swabdetails"].ToString();
            getstocks.remarks = dr["remarks"].ToString();
            getstocks.date = dr["doe"].ToString();
            SubAnalysis.Add(getstocks);
        }
        string response = GetJson(SubAnalysis);
        context.Response.Write(response);
    }
    public class stockdetails
    {
        public string sno { get; set; }
        public string OpeningStock { get; set; }
        public string recivemilkqty { get; set; }
        public string production { get; set; }
        public string sales { get; set; }
        public string curdclosingbalance { get; set; }

        public string gheeOpeningStock { get; set; }
        public string gheerecivemilkqty { get; set; }
        public string gheeproduction { get; set; }
        public string gheesales { get; set; }
        public string gheeclosingbalance { get; set; }

        public string butteropening { get; set; }
        public string butterproduction { get; set; }
        public string butterfat { get; set; }
        public string creamrecive { get; set; }
        public string buttersales { get; set; }
        public string butterdesp { get; set; }
        public string creamfat { get; set; }
        public string butterclosing { get; set; }

        public string creamopening { get; set; }
        public string creamproduction { get; set; }
        public string creampfat { get; set; }
        public string creamavgfat { get; set; }
        public string creamclosing { get; set; }

        public string smpopening { get; set; }
        public string smpproduction { get; set; }
        public string smpconsumption { get; set; }
        public string stocktransfor { get; set; }
        public string smpclosing { get; set; }
        public string noofbags { get; set; }
        public string perltr { get; set; }
        public string biproductopening { get; set; }
        public string biproductproduction { get; set; }
        public string biproductsale { get; set; }
        public string biproductrecive { get; set; }
        public string biproductclosing { get; set; }
        public string productname { get; set; }

        public string gheefromkcc { get; set; }
        public string gheemarcketreturn { get; set; }
        public string gheeoterreturn { get; set; }
        public string gheecutting { get; set; }

        public string lossqty { get; set; }
        public string damageqty { get; set; }
        public string cuttingqty { get; set; }
        public string returnqty { get; set; }
    }

    private void get_curdstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        string BranchID = context.Session["Branch_ID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT  SUM(cpd.ob) AS openingbalance, SUM(cpd.productionqty) AS production, SUM(cpd.sales) AS Sales, SUM(cpd.qty_kgs) AS qtykgs, SUM(cpd.lossqty) AS lossqty, SUM(cpd.damageqty) AS damageqty, SUM(cpd.cuttingqty)  AS cuttingqty, SUM(cpd.returnqty) AS returnqty FROM   plant_production_details AS cpd INNER JOIN productmaster AS pm ON pm.sno = cpd.productid INNER JOIN branch_info AS bi ON bi.sno = cpd.branchid WHERE  (cpd.createdon BETWEEN @d1 AND @d2) AND (cpd.branchid = @branchid) AND (pm.batchid <> 16) AND (pm.batchid <> 13) AND (cpd.deptid = 1)");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtcurd = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> swabdetails = new List<stockdetails>();
        foreach (DataRow dr in dtcurd.Rows)
        {
            string openstock = dr["openingbalance"].ToString();
            if (openstock != "")
            {
                stockdetails getstocks = new stockdetails();
                getstocks.OpeningStock = dr["openingbalance"].ToString();
                getstocks.production = dr["production"].ToString();
                getstocks.sales = dr["Sales"].ToString();
                getstocks.recivemilkqty = dr["qtykgs"].ToString();

                getstocks.lossqty = dr["lossqty"].ToString();
                getstocks.damageqty = dr["damageqty"].ToString();
                getstocks.cuttingqty = dr["cuttingqty"].ToString();
                getstocks.returnqty = dr["returnqty"].ToString();
                double lossqty = 0;
                double.TryParse(dr["lossqty"].ToString(), out lossqty);
                double damageqty = 0;
                double.TryParse(dr["damageqty"].ToString(), out damageqty);
                double cuttingqty = 0;
                double.TryParse(dr["cuttingqty"].ToString(), out cuttingqty);
                double returnqty = 0;
                double.TryParse(dr["returnqty"].ToString(), out returnqty);

                string production = dr["production"].ToString();
                double prod = Convert.ToDouble(production);
                string ob = dr["openingbalance"].ToString();
                double obalance = Convert.ToDouble(ob);
                string Sales = dr["Sales"].ToString();
                double sale = Convert.ToDouble(Sales);
                double close = prod + obalance;
                double closing = close - sale;
                getstocks.curdclosingbalance = closing.ToString();
                swabdetails.Add(getstocks);
            }
        }
        string response = GetJson(swabdetails);
        context.Response.Write(response);
    }

    private void get_productwisecurdstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        string BranchID = context.Session["Branch_ID"].ToString();
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT cpd.ob AS openingbalance, cpd.productionqty AS production, cpd.sales AS Sales, qty_kgs AS qtykgs, productmaster.productname, cpd.lossqty, cpd.cuttingqty, cpd.returnqty, cpd.damageqty from plant_production_details cpd INNER JOIN productmaster pm ON pm.sno = cpd.productid INNER JOIN branch_info bi on bi.sno = cpd.branchid INNER JOIN productmaster ON productmaster.sno=cpd.productid WHERE  (cpd.createdon BETWEEN @d1 AND @d2) AND (cpd.branchid=@branchid) AND (cpd.deptid = 1) AND (pm.batchid <> 16) AND (pm.batchid <> 13) ");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtcurd = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> swabdetails = new List<stockdetails>();
        foreach (DataRow dr in dtcurd.Rows)
        {
            string openstock = dr["openingbalance"].ToString();
            string production = dr["production"].ToString();
            if (openstock != "")
            {
                stockdetails getstocks = new stockdetails();
                getstocks.productname = dr["productname"].ToString();
                getstocks.OpeningStock = dr["openingbalance"].ToString();
                getstocks.production = dr["production"].ToString();
                getstocks.sales = dr["Sales"].ToString();
                getstocks.recivemilkqty = dr["qtykgs"].ToString();

                getstocks.lossqty = dr["lossqty"].ToString();
                getstocks.cuttingqty = dr["cuttingqty"].ToString();
                getstocks.returnqty = dr["returnqty"].ToString();
                getstocks.damageqty = dr["damageqty"].ToString();

                //cpd.lossqty, cpd.cuttingqty, cpd.returnqty, cpd.damageqty
                string productions = dr["production"].ToString();
                double prod = Convert.ToDouble(productions);
                string ob = dr["openingbalance"].ToString();
                double obalance = Convert.ToDouble(ob);
                string Sales = dr["Sales"].ToString();
                double sale = Convert.ToDouble(Sales);
                double close = prod + obalance;
                double closing = close - sale;
                getstocks.curdclosingbalance = closing.ToString();
                swabdetails.Add(getstocks);
            }
        }
        string response = GetJson(swabdetails);
        context.Response.Write(response);
    }

    private void get_gheestockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        double gheeopening = 0;
        double gheeproduction = 0;
        double gheerecive = 0;
        double gheesales = 0;
        double gheeclose = 0;
        double gheefromkcc = 0;
        double gheemarcketreturn = 0;
        double gheeoterreturn = 0;
        double gheecutting = 0;
        string BranchID = context.Session["Branch_ID"].ToString();
        List<stockdetails> gheedetails = new List<stockdetails>();
        cmd = new SqlCommand("SELECT  pm.sno, pm.batchid, pm.productname, pm.branchid, pm.departmentid, pm.ml, pm.filimrate, pm.fat, pm.snf, pm.clr, pm.biproductsshortname, pom.branchid AS Expr1 FROM   productmaster AS pm INNER JOIN productmonitar AS pom ON pm.sno = pom.productid WHERE  (pm.departmentid = '3') AND (pom.branchid = @branchid) ORDER BY pm.sno");
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtgheproducts = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT (qty_kgs) as openingbalance, productid FROM closing_details WHERE (closeddate BETWEEN @d1 AND @d2) AND branchid=@gcdbranchid AND closing_details.type='ghee'");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate).AddDays(-1));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate).AddDays(-1));
        cmd.Parameters.Add("@gcdbranchid", BranchID);
        DataTable dtgheeloose = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT (qty_kgs) as cb, productid FROM closing_details WHERE (closeddate BETWEEN @d1 AND @d2) AND branchid=@godbranchid AND closing_details.type='ghee'");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@godbranchid", BranchID);
        DataTable dtgheeclosing = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT SUM(productionqty) AS productionqty, SUM(convertionquantity) AS convertionquantity, productid FROM plant_production_details WHERE (createdon BETWEEN @d1 AND @d2) AND (branchid=@gpbranchid) Group By productid");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@gpbranchid", BranchID);
        DataTable dtgheeproduction = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT  SUM(salesquantity) AS sales, productid, SUM(fromkcc) AS fromkcc, SUM(marcketreturn) AS marcketreturn, SUM(oterreturn) AS oterreturn, SUM(cutting) AS cutting FROM  gheesales  WHERE   (doe BETWEEN @d1 AND @d2) AND (branchid=@gsbranchid) GROUP BY productid");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@gsbranchid", BranchID);
        DataTable dtgheesales = vdm.SelectQuery(cmd).Tables[0];
        if (dtgheproducts.Rows.Count > 0)
        {
            foreach (DataRow dr in dtgheproducts.Rows)
            {
                stockdetails getstocks = new stockdetails();
                string productname = dr["productname"].ToString();
                if (dtgheeloose.Rows.Count > 0)
                {
                    foreach (DataRow drgc in dtgheeloose.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string gheeob = drgc["openingbalance"].ToString();
                        gheeopening = Convert.ToDouble(gheeob);
                        gheeopening = Math.Round(gheeopening, 2);
                    }
                }
                if (dtgheeclosing.Rows.Count > 0)
                {
                    foreach (DataRow drgc in dtgheeclosing.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string gheecb = drgc["cb"].ToString();
                        gheeclose = Convert.ToDouble(gheecb);
                        gheeclose = Math.Round(gheeclose, 2);
                    }
                }
                if (dtgheeproduction.Rows.Count > 0)
                {
                    gheeproduction = 0;
                    foreach (DataRow drpro in dtgheeproduction.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string gheeproductions = drpro["productionqty"].ToString();
                        if (gheeproductions != "")
                        {
                            gheeproduction = Convert.ToDouble(gheeproductions);
                            gheeproduction = Math.Round(gheeproduction, 2);
                        }
                        string convertionquantity = drpro["convertionquantity"].ToString();
                        if (convertionquantity != "")
                        {
                            gheerecive = Convert.ToDouble(convertionquantity);
                            gheerecive = Math.Round(gheerecive, 2);
                        }
                    }
                }
                if (dtgheesales.Rows.Count > 0)
                {
                    gheesales = 0;
                    foreach (DataRow drsale in dtgheesales.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        if (BranchID == "26" || BranchID == "115")
                        {
                            double.TryParse(drsale["sales"].ToString(), out gheesales);
                            double.TryParse(drsale["fromkcc"].ToString(), out gheefromkcc);
                            double.TryParse(drsale["marcketreturn"].ToString(), out gheemarcketreturn);
                            double.TryParse(drsale["oterreturn"].ToString(), out gheeoterreturn);
                            double.TryParse(drsale["cutting"].ToString(), out gheecutting);
                        }
                        else
                        {
                            string sale = drsale["sales"].ToString();
                            if (sale != "")
                            {
                                gheesales = Convert.ToDouble(drsale["sales"].ToString());
                                gheesales = Math.Round(gheesales, 2);
                            }
                        }
                    }
                }
                if (gheeproduction > 0 || gheesales > 0 || gheeopening > 0)
                {
                    getstocks.productname = productname;
                    getstocks.gheesales = gheesales.ToString();
                    getstocks.gheeOpeningStock = gheeopening.ToString();
                    getstocks.gheeproduction = gheeproduction.ToString();
                    getstocks.gheerecivemilkqty = gheerecive.ToString();
                    getstocks.gheefromkcc = gheefromkcc.ToString();
                    getstocks.gheemarcketreturn = gheemarcketreturn.ToString();
                    getstocks.gheeoterreturn = gheeoterreturn.ToString();
                    getstocks.gheecutting = gheecutting.ToString();
                    double gheec = gheeopening + gheeproduction;
                    double gheclose = gheec - gheesales;
                    getstocks.gheeclosingbalance = gheclose.ToString();
                    gheedetails.Add(getstocks);
                }
            }
        }
        string response = GetJson(gheedetails);
        context.Response.Write(response);
    }

    private void get_butterstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        double butteropening = 0;
        double butterproduction = 0;
        double butterconvertion = 0;
        double buttersales = 0;
        double butterdesp = 0;
        double convfat = 0;
        string BranchID = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT bp.ob as openingbalance, bp.convertionquantity, bp.convertionfat, bp.productionqty, bp.cb as closingbalance, bp.remarks, bp.createdon, bp.type, pm.productname, bp.branchid FROM plant_production_details AS bp INNER JOIN productmaster AS pm ON bp.productid = pm.sno WHERE (bp.createdon BETWEEN @bd1 AND @bd2) AND (bp.branchid=@bsbranchid) AND (bp.deptid = '10')");
        cmd.Parameters.Add("@bd1", GetLowDate(dtdate));
        cmd.Parameters.Add("@bd2", GetHighDate(dtdate));
        cmd.Parameters.Add("@bsbranchid", BranchID);
        DataTable dtbutterproduction = vdm.SelectQuery(cmd).Tables[0];
        if (dtbutterproduction.Rows.Count > 0)
        {

        }
        else
        {
            cmd = new SqlCommand("SELECT quantity FROM productmonitar WHERE productid = @pid and branchid=@branchid");
            cmd.Parameters.Add("@pid", "94");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbutterob = vdm.SelectQuery(cmd).Tables[0];
            if (dtbutterob.Rows.Count > 0)
            {
                foreach (DataRow drob in dtbutterob.Rows)
                {
                    string ob = drob["quantity"].ToString();
                    if (ob != "")
                    {
                        butteropening = Convert.ToDouble(ob);
                    }
                }
            }
        }
        cmd = new SqlCommand("SELECT SUM(salesquantity) AS sales, SUM(dispatchtoghee) AS dispatchtoghee FROM  buttersales  WHERE   (doe BETWEEN @sd1 AND @sd2) AND (branchid=@gbsbranchid)");
        cmd.Parameters.Add("@sd1", GetLowDate(dtdate));
        cmd.Parameters.Add("@sd2", GetHighDate(dtdate));
        cmd.Parameters.Add("@gbsbranchid", BranchID);
        DataTable dtbuttersales = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> butterdetails = new List<stockdetails>();
        stockdetails getbstocks = new stockdetails();
        if (dtbutterproduction.Rows.Count > 0)
        {
            foreach (DataRow dr in dtbutterproduction.Rows)
            {
                string ob = dr["openingbalance"].ToString();
                if (ob != "")
                {
                    butteropening = Convert.ToDouble(ob);
                }
                string convertionquantity = dr["convertionquantity"].ToString();
                if (convertionquantity != "")
                {
                    butterconvertion = Convert.ToDouble(convertionquantity);
                }
                string convertionfat = dr["convertionfat"].ToString();
                string productname = dr["productname"].ToString();
                string productionqty = dr["productionqty"].ToString();
                if (productionqty != "")
                {
                    butterproduction = Convert.ToDouble(productionqty);
                }
                if (convertionfat != "")
                {
                    convfat = Convert.ToDouble(convertionfat);
                }

            }
        }
        if (dtbuttersales.Rows.Count > 0)
        {
            foreach (DataRow drs in dtbuttersales.Rows)
            {
                string SALE = drs["sales"].ToString();
                string dispatchtoghee = drs["dispatchtoghee"].ToString();
                if (SALE != "")
                {
                    buttersales = Convert.ToDouble(SALE);
                }
                else
                {
                    buttersales = 0;
                }
                if (dispatchtoghee != "")
                {
                    butterdesp = Convert.ToDouble(dispatchtoghee);
                }
                getbstocks.buttersales = buttersales.ToString();
                getbstocks.butterdesp = butterdesp.ToString();
            }
            getbstocks.creamrecive = butterconvertion.ToString();
            getbstocks.creamfat = convfat.ToString();
            getbstocks.butterproduction = butterproduction.ToString();
            getbstocks.butteropening = butteropening.ToString();
            double closing = (butteropening + butterproduction) - (buttersales + butterdesp);
            getbstocks.butterclosing = closing.ToString();
        }

        butterdetails.Add(getbstocks);
        string response = GetJson(butterdetails);
        context.Response.Write(response);
    }

    private void get_creamstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        double creamopening = 0;
        double creamproduction = 0;
        double creamfat = 0;
        double creamclosing = 0;
        string BranchID = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT  creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, branchid, doe, createdon FROM  plant_production_details WHERE  (branchid = @branchid) AND (creamtype = 'Cow') AND (createdon BETWEEN @d1 AND @d2) AND (deptid=3) OR (branchid = @branchid) AND (creamtype = 'Buffalo') AND (createdon BETWEEN @d1 AND @d2) AND (deptid=3)");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtcreamproduction = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> creamdetails = new List<stockdetails>();
        stockdetails getbstocks = new stockdetails();
        if (dtcreamproduction.Rows.Count > 0)
        {
            foreach (DataRow dr in dtcreamproduction.Rows)
            {
                string ob = dr["ob"].ToString();
                if (ob != "")
                {
                    creamopening = Convert.ToDouble(ob);
                    creamopening = Math.Round(creamopening, 2);
                }
                string productionqty = dr["recivedqty"].ToString();
                if (productionqty != "")
                {
                    creamproduction = Convert.ToDouble(productionqty);
                    creamproduction = Math.Round(creamproduction, 2);
                }
                string convertionfat = dr["recivedfat"].ToString();
                string avgfat = dr["avgfat"].ToString();
                double closing = creamopening + creamproduction;
                getbstocks.creamopening = creamopening.ToString();
                getbstocks.creamproduction = creamproduction.ToString();
                getbstocks.creampfat = convertionfat;
                getbstocks.creamavgfat = avgfat;
                getbstocks.creamclosing = closing.ToString();
            }
            creamdetails.Add(getbstocks);
        }
        string response = GetJson(creamdetails);
        context.Response.Write(response);
    }

    private void get_smpstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        double smpopening = 0;
        double smpproduction = 0;
        double smpfat = 0;
        double smpclosing = 0;
        double stocktransfordetails = 0;
        string BranchID = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT (qty_kgs) AS consumptionqty, (recivedqty) as recivedqty, (ob) as openingbalance, stocktransfor FROM  smp_details where (date between @smpd1 and @smpd2) AND (branchid=@smpbranchid)");
        cmd.Parameters.Add("@smpd1", GetLowDate(dtdate));
        cmd.Parameters.Add("@smpd2", GetHighDate(dtdate));
        cmd.Parameters.Add("@smpbranchid", BranchID);
        DataTable dtsmpreport = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> smpdetails = new List<stockdetails>();

        if (dtsmpreport.Rows.Count > 0)
        {
            foreach (DataRow dr in dtsmpreport.Rows)
            {
                stockdetails getbstocks = new stockdetails();
                string ob = dr["openingbalance"].ToString();
                if (ob != "")
                {
                    smpopening = Convert.ToDouble(ob);
                }
                string productionqty = dr["recivedqty"].ToString();
                if (productionqty != "")
                {
                    smpproduction = Convert.ToDouble(productionqty);
                }
                string stocktransfor = dr["stocktransfor"].ToString();
                if (stocktransfor != "")
                {
                    stocktransfordetails = Convert.ToDouble(stocktransfor);
                }
                string consumptionqty = dr["consumptionqty"].ToString();
                double noofbags = smpopening / 25;
                double closing = smpopening + smpproduction;
                getbstocks.smpopening = smpopening.ToString();
                getbstocks.noofbags = noofbags.ToString();
                getbstocks.smpproduction = smpproduction.ToString();
                getbstocks.smpconsumption = consumptionqty;
                getbstocks.stocktransfor = stocktransfordetails.ToString();
                double closum = Convert.ToDouble(consumptionqty) + stocktransfordetails;
                closing = closing - closum;
                getbstocks.smpclosing = closing.ToString();
                smpdetails.Add(getbstocks);
            }
        }

        string response = GetJson(smpdetails);
        context.Response.Write(response);
    }

    private void get_biproductstockdetails(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        double biproductopening = 0;
        double biproductproduction = 0;
        double biproductsale = 0;
        double biproductrecive = 0;
        double biproductclosing = 0;
        string BranchID = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT cpd.qty_kgs AS recivedmilkqty, cpd.ob AS openingbalance, cpd.production AS productionqty, cpd.total, cpd.sales, pm.productname FROM curd_productiondetails AS cpd INNER JOIN productmaster AS pm ON pm.sno = cpd.productid INNER JOIN branch_info AS bi ON bi.sno = cpd.branchid WHERE (cpd.doe BETWEEN @d1 AND @d2) AND (pm.batchid = '16') AND (pm.departmentid = '1') AND (cpd.branchid=@cpdbranchid) GROUP BY cpd.qty_kgs, cpd.ob, cpd.production, cpd.total, cpd.sales, pm.productname");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@cpdbranchid", BranchID);
        DataTable dtcurdproduction = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> biproductdetails = new List<stockdetails>();
        if (dtcurdproduction.Rows.Count > 0)
        {
            foreach (DataRow dr in dtcurdproduction.Rows)
            {
                stockdetails getbstocks = new stockdetails();
                string productname = dr["productname"].ToString();
                string ob = dr["openingbalance"].ToString();
                if (ob != "")
                {
                    biproductopening = Convert.ToDouble(ob);
                }
                else
                {
                    biproductopening = 0;
                }
                string productionqty = dr["productionqty"].ToString();
                if (productionqty != "")
                {
                    biproductproduction = Convert.ToDouble(productionqty);
                }
                string consumptionqty = dr["recivedmilkqty"].ToString();
                string sales = dr["sales"].ToString();
                double sale = Convert.ToDouble(sales);
                double closing = biproductopening + biproductproduction;
                closing = closing - sale;
                if (biproductopening > 0 || sale > 0 || closing > 0)
                {
                    getbstocks.productname = productname;
                    getbstocks.biproductopening = biproductopening.ToString();
                    getbstocks.biproductrecive = consumptionqty;
                    getbstocks.biproductproduction = biproductproduction.ToString();
                    getbstocks.biproductsale = sale.ToString();
                    getbstocks.biproductclosing = closing.ToString();
                    biproductdetails.Add(getbstocks);
                }
            }
        }
        string response = GetJson(biproductdetails);
        context.Response.Write(response);
    }

    private void get_vendorperltrrate_details(HttpContext context)
    {
        string vendor = context.Request["vendor"].ToString();
        cmd = new SqlCommand("SELECT TOP 1 milktransactions.dcno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.p_fatpluscost, milktransaction_logs.m_std_snf, milktransaction_logs.m_std_fat, milktransaction_logs.p_std_fat, milktransaction_logs.fatplus_on, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.m_fatpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE (milktransactions.sectionid=@sectionid) ORDER BY milktransactions.sno desc");
        cmd.Parameters.Add("@sectionid", vendor);
        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
        List<stockdetails> smpdetails = new List<stockdetails>();
        if (dtDispatch.Rows.Count > 0)
        {
            double kgfattotal = 0;
            double kgsnftotal = 0;
            double kgstotal = 0;
            double Ltrstotal = 0;
            double TStotal = 0;
            double mvaluetotal = 0;
            double ohtotal = 0;
            double snf9total = 0;
            double milkvaluetotal = 0;
            int i = 1;
            foreach (DataRow dr in dtDispatch.Rows)
            {
                stockdetails perltrcost = new stockdetails();
                string milktype = dr["milktype"].ToString();
                if (milktype == "Buffalo")
                {
                    DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                    string date = dtdoe.ToString("dd/MM/yyyy");
                    double qty_ltr = 0;
                    double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                    double FAT = 0;
                    double.TryParse(dr["fat"].ToString(), out FAT);
                    FAT = Math.Round(FAT, 2);
                    double SNF = 0;
                    double.TryParse(dr["snf"].ToString(), out SNF);
                    string Rateon = dr["rate_on"].ToString();
                    double weight = 0;
                    double KGFAT = 0;
                    double KGSNF = 0;
                    double ltrs = 0;
                    double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                    Ltrstotal += ltrs;
                    double Kgs = 0;
                    double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                    kgstotal += Kgs;
                    double tstotal = 0;
                    tstotal = FAT + SNF;
                    if (Rateon == "TS")
                    {
                        double TS = 0;
                        TS = FAT + SNF;
                        weight = (TS * Kgs) / 100;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                    else if (Rateon == "KGFAT")
                    {
                        weight = (FAT * Kgs) / 100;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                    else if (Rateon == "PerLtr" || Rateon == "PerKg")
                    {
                        string CalOn = dr["calc_on"].ToString();
                        if (CalOn == "Ltrs")
                        {
                            weight = ltrs;
                            KGFAT = (FAT * ltrs) / 100;
                            KGSNF = (SNF * ltrs) / 100;
                        }
                        else
                        {
                            weight = Kgs;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                    }
                    double cost = 0;
                    double.TryParse(dr["cost"].ToString(), out cost);
                    KGFAT = Math.Round(KGFAT, 2);
                    kgfattotal += KGFAT;
                    KGSNF = Math.Round(KGSNF, 2);
                    kgsnftotal += KGSNF;
                    double MValue = 0;
                    MValue = KGFAT * cost;
                    //MValue = MValue / 100;
                    MValue = Math.Round(MValue, 2);
                    mvaluetotal += MValue;
                    string OverheadOn = dr["overheadon"].ToString();
                    double OHcost = 0;
                    double overheadcost = 0;
                    double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                    if (OverheadOn == "Ltrs")
                    {
                        OHcost = overheadcost * ltrs;
                    }
                    else
                    {
                        OHcost = overheadcost * Kgs;
                    }
                    double MSnf = 0;
                    double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                    double m_snfpluscost = 0;
                    double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                    double DiffSNFCost = 0;
                    if (SNF < MSnf)
                    {
                        string SNFOn = dr["snfplus_on"].ToString();
                        double diffSNF = 0;
                        diffSNF = SNF - MSnf;
                        diffSNF = Math.Round(diffSNF, 2);
                        if (SNFOn == "Ltrs")
                        {
                            DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                        }
                        else
                        {
                            DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                        }
                    }
                    double p_snfpluscost = 0;
                    double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                    double PSnf = 0;
                    double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                    if (SNF > PSnf)
                    {
                        string SNFOn = dr["snfplus_on"].ToString();
                        double diffSNF = 0;
                        diffSNF = SNF - MSnf;
                        if (SNFOn == "Ltrs")
                        {
                            DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                        }
                        else
                        {
                            DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                        }
                    }

                    double OHandMvalue = 0;
                    OHandMvalue = MValue + OHcost + DiffSNFCost;
                    ohtotal += OHcost;
                    DiffSNFCost = Math.Round(DiffSNFCost, 2);
                    snf9total += DiffSNFCost;
                    OHandMvalue = Math.Round(OHandMvalue, 2);
                    milkvaluetotal += OHandMvalue;
                    double ltrcost = OHandMvalue / ltrs;
                    ltrcost = Math.Round(ltrcost, 2);
                    perltrcost.perltr = ltrcost.ToString();
                    smpdetails.Add(perltrcost);
                    // newrow["Per ltr Cost"] = ltrcost;
                }
                else
                {
                    DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                    string date = dtdoe.ToString("dd/MM/yyyy");
                    double qty_kgs = 0;
                    double.TryParse(dr["qty_kgs"].ToString(), out qty_kgs);
                    double qty_ltr = 0;
                    double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                    double FAT = 0;
                    double.TryParse(dr["fat"].ToString(), out FAT);
                    FAT = Math.Round(FAT, 2);
                    double SNF = 0;
                    double.TryParse(dr["snf"].ToString(), out SNF);
                    string Rateon = dr["rate_on"].ToString();
                    double weight = 0;
                    double KGFAT = 0;
                    double KGSNF = 0;
                    double ltrs = 0;
                    double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                    Ltrstotal += ltrs;
                    double Kgs = 0;
                    double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                    kgstotal += Kgs;
                    double tstotal = 0;
                    tstotal = FAT + SNF;
                    if (Rateon == "TS")
                    {

                        double TS = 0;
                        TS = FAT + SNF;
                        weight = (TS * Kgs) / 100;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                    else if (Rateon == "KGFAT")
                    {
                        weight = (FAT * Kgs) / 100;
                        KGFAT = (FAT * Kgs) / 100;
                        KGSNF = (SNF * Kgs) / 100;
                    }
                    else if (Rateon == "PerLtr" || Rateon == "PerKg")
                    {
                        string CalOn = dr["calc_on"].ToString();
                        if (CalOn == "Ltrs")
                        {
                            weight = ltrs;
                            KGFAT = (FAT * ltrs) / 100;
                            KGSNF = (SNF * ltrs) / 100;
                        }
                        else
                        {
                            weight = Kgs;
                            KGFAT = (FAT * Kgs) / 100;
                            KGSNF = (SNF * Kgs) / 100;
                        }
                    }
                    double cost = 0;
                    double.TryParse(dr["cost"].ToString(), out cost);
                    KGFAT = Math.Round(KGFAT, 2);
                    kgfattotal += KGFAT;
                    KGSNF = Math.Round(KGSNF, 2);
                    kgsnftotal += KGSNF;
                    double MValue = 0;
                    if (Rateon == "PerLtr" || Rateon == "PerKg")
                    {
                        MValue = cost * qty_kgs;
                    }
                    else
                    {
                        MValue = tstotal * cost * qty_ltr;
                        MValue = MValue / 100;

                    }
                    MValue = Math.Round(MValue, 2);
                    mvaluetotal += MValue;
                    string OverheadOn = dr["overheadon"].ToString();
                    double OHcost = 0;
                    double overheadcost = 0;
                    double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                    if (OverheadOn == "Ltrs")
                    {
                        OHcost = overheadcost * ltrs;
                    }
                    else
                    {
                        OHcost = overheadcost * Kgs;
                    }
                    double MSnf = 0;
                    double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                    double m_snfpluscost = 0;
                    double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                    double DiffSNFCost = 0;
                    if (SNF < MSnf)
                    {
                        string SNFOn = dr["snfplus_on"].ToString();
                        double diffSNF = 0;
                        diffSNF = SNF - MSnf;
                        diffSNF = Math.Round(diffSNF, 2);
                        if (SNFOn == "Ltrs")
                        {
                            DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                        }
                        else
                        {
                            DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                        }
                    }
                    double p_snfpluscost = 0;
                    double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                    double PSnf = 0;
                    double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                    if (SNF > PSnf)
                    {
                        string SNFOn = dr["snfplus_on"].ToString();
                        double diffSNF = 0;
                        diffSNF = SNF - MSnf;
                        if (SNFOn == "Ltrs")
                        {
                            DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                        }
                        else
                        {
                            DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                        }
                    }

                    double MFat = 0;
                    double.TryParse(dr["m_std_fat"].ToString(), out MFat);
                    double m_fatpluscost = 0;
                    double.TryParse(dr["m_fatpluscost"].ToString(), out m_fatpluscost);
                    double DiffFATCost = 0;
                    if (FAT < MFat)
                    {
                        string FATOn = dr["fatplus_on"].ToString();
                        double diffFAT = 0;
                        diffFAT = FAT - MFat;
                        diffFAT = Math.Round(diffFAT, 2);
                        if (FATOn == "Ltrs")
                        {
                            DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                        }
                        else
                        {
                            DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                        }
                    }
                    double p_fatpluscost = 0;
                    double.TryParse(dr["p_fatpluscost"].ToString(), out p_fatpluscost);
                    double PFat = 0;
                    double.TryParse(dr["p_std_fat"].ToString(), out PFat);
                    if (FAT > PFat)
                    {
                        string FATOn = dr["fatplus_on"].ToString();
                        double diffFAT = 0;
                        diffFAT = FAT - PFat;
                        if (FATOn == "Ltrs")
                        {
                            DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                        }
                        else
                        {
                            DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                        }
                    }
                    DiffFATCost = Math.Round(DiffFATCost, 2);
                    double OHandMvalue = 0;
                    OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                    ohtotal += OHcost;
                    DiffSNFCost = Math.Round(DiffSNFCost, 2);
                    snf9total += DiffSNFCost;
                    OHandMvalue = Math.Round(OHandMvalue, 2);
                    milkvaluetotal += OHandMvalue;
                    double ltrcost = OHandMvalue / ltrs;
                    ltrcost = Math.Round(ltrcost, 2);
                    perltrcost.perltr = ltrcost.ToString();
                    smpdetails.Add(perltrcost);
                }
            }

            string response = GetJson(smpdetails);
            context.Response.Write(response);
        }
    }

    private void get_vendor_milktransaction_details(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        // string vendor = context.Request["vendorname"].ToString();
        string fromdate = context.Request["fromdate"].ToString();
        DateTime dtfromdate = Convert.ToDateTime(fromdate);
        string todate = context.Request["todate"].ToString();
        DateTime dttodate = Convert.ToDateTime(todate);
        string transactiontype = context.Request["transactiontype"].ToString();
        cmd = new SqlCommand("SELECT  milktransactions.dcno, milktransactions.sno, milktransactions.cellno, milktransactions.inwardno AS InwardNo, milktransactions.partydcno,  milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.transportvalue, milktransactions.qty_ltr, milktransactions.qty_kgs,  milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on,  milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.p_fatpluscost,  milktransaction_logs.m_std_snf, milktransaction_logs.m_std_fat, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on,  milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.m_fatpluscost, milktransaction_logs.transport_on,  milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname, vendors.kms, vendors.sno AS vendorid, milktransactions.entrydate FROM milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE   (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.branchid = @branchid) AND  (milktransactions.transportvalue IS NULL) OR (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.branchid = @branchid) AND  (milktransactions.transportvalue = 0) ORDER BY milktransactions.entrydate");
        // cmd = new SqlCommand("SELECT  milktransactions.sectionid,  milktransactions.dcno, milktransactions.vehicleno, vendors.vendorname, SUM(milktransactions.qty_ltr) AS qty_ltr, vendors.kms FROM  milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE        (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.branchid = '1') GROUP BY milktransactions.dcno, milktransactions.vehicleno, vendors.kms, vendors.vendorname, milktransactions.entrydate, milktransactions.sectionid ORDER BY milktransactions.entrydate");
        //cmd.Parameters.Add("@sectionid", vendor);
        cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
        cmd.Parameters.Add("@d2", GetHighDate(dttodate));
        cmd.Parameters.Add("@transtype", transactiontype);
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dttankerin = vdm.SelectQuery(cmd).Tables[0];
        List<vendordetails> vendordetails = new List<vendordetails>();
        if (dttankerin.Rows.Count > 0)
        {
            foreach (DataRow dr in dttankerin.Rows)
            {
                vendordetails vendordetail = new vendordetails();
                string transno = dr["dcno"].ToString();
                double totqty = 0;
                foreach (DataRow drr in dttankerin.Select("dcno='" + transno + "'"))
                {
                    string qty_ltr = drr["qty_ltr"].ToString();
                    double qty_ltrs = Convert.ToDouble(qty_ltr);
                    totqty += qty_ltrs;
                }
                string totalqty = totqty.ToString();
                string vendorname = dr["vendorname"].ToString();
                string vehicleno = dr["vehicleno"].ToString();
                string cell = dr["cellno"].ToString();
                string qtyltrs = dr["qty_ltr"].ToString();
                string kms = dr["kms"].ToString();
                string sno = dr["sno"].ToString();
                string transportvalue = dr["transportvalue"].ToString();
                string vendorcode = dr["vendorid"].ToString();
                vendordetail.vendorname = vendorname;
                vendordetail.sno = sno;
                vendordetail.transactionno = transno;
                vendordetail.vehicleno = vehicleno;
                vendordetail.kms = kms;
                vendordetail.cell = cell;
                vendordetail.qtyltrs = qtyltrs;
                vendordetail.transportvalue = transportvalue;
                vendordetail.vendorcode = vendorcode;
                vendordetail.totalqty = totalqty;
                vendordetails.Add(vendordetail);
            }
            string response = GetJson(vendordetails);
            context.Response.Write(response);
        }
    }

    private void save_overhead_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string mainhead = context.Request["mainhead"];
            string overheadname = context.Request["overheadname"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            string status = context.Request["status"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into overheadmaster (mainaccount, oh_name,stats) values (@mainaccount, @oh_name,@stats)");
                cmd.Parameters.Add("@mainaccount", mainhead);
                cmd.Parameters.Add("@oh_name", overheadname);
                cmd.Parameters.Add("@stats", status);
                vdm.insert(cmd);
                string msg = "Over Head Details Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update overheadmaster set mainaccount=@mainaccount, oh_name=@oh_name,stats=@stats where sno=@sno ");
                cmd.Parameters.Add("@mainaccount", mainhead);
                cmd.Parameters.Add("@oh_name", overheadname);
                cmd.Parameters.Add("@stats", status);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Over Head Details Update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class overhead
    {
        public string sno { get; set; }
        public string mainhead { get; set; }
        public string overheadname { get; set; }
        public string status { get; set; }
        public string status1 { get; set; }
        public string mainhead1 { get; set; }
        public string mainohname { get; set; }
    }
    private void get_overhead_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT  sno, mainaccount, oh_name, stats  FROM overheadmaster");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<overhead> overhead = new List<overhead>();
            foreach (DataRow dr in routes.Rows)
            {
                overhead getroutes = new overhead();
                getroutes.sno = dr["sno"].ToString();
                var mainhead1 = dr["mainaccount"].ToString();
                getroutes.mainhead1 = mainhead1;
                getroutes.mainhead = dr["mainaccount"].ToString();
                getroutes.overheadname = dr["oh_name"].ToString();
                getroutes.status = dr["stats"].ToString();
                overhead.Add(getroutes);
            }
            string response = GetJson(overhead);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_branch_overhead_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            //string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            branchoverhead obj = js.Deserialize<branchoverhead>(title1);
            string sno = obj.sno;
            string btnval = obj.btnval;
            string date = obj.date;
            string mainhead = obj.mainhead;
            string totalsales = obj.totalsales;
            string remarks = obj.remarks;
            string totalqtyinctank = obj.totalqtyinctank;
            string totalqtyinclosingstock = obj.totalqtyinclosingstock;
            string branchoh = obj.branchoh;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into branch_overhead (mainaccount,total_sale,oh_month,remarks,doe,entryby,branch_id,tq_tanker,tq_close) values (@mainaccount,@total_sale,@oh_month,@remarks,@doe,@entryby,@branch_id,@tq_tanker,@tq_close)");
                //mainaccount,total_sale,oh_month,remarks,doe,entryby,branch_id,tq_tanker,tq_close
                cmd.Parameters.Add("@oh_month", date);
                cmd.Parameters.Add("@mainaccount", mainhead);
                cmd.Parameters.Add("@total_sale", totalsales);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@entryby", UserID);
                cmd.Parameters.Add("@branch_id", branchoh);
                cmd.Parameters.Add("@tq_tanker", totalqtyinctank);
                cmd.Parameters.Add("@tq_close", totalqtyinclosingstock);
                vdm.insert(cmd);
                cmd = new SqlCommand("select MAX(sno) AS sno from branch_overhead ");
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                string refno = routes.Rows[0]["sno"].ToString();
                foreach (subbranchoverhead si in obj.headnames)
                {
                    string headsno = si.headsno;
                    string amount = si.amount;
                    string headName = si.headName;
                    string quantitytype = si.quantitytype;
                    cmd = new SqlCommand("insert into Branch_oh_sub (branch_oh_sno,oh_id,amount,tot_qty_id) values (@branch_oh_sno,@oh_id,@amount,@tot_qty_id)");
                    cmd.Parameters.Add("@branch_oh_sno", refno);
                    cmd.Parameters.Add("@oh_id", headsno);
                    cmd.Parameters.Add("@amount", amount);
                    cmd.Parameters.Add("@tot_qty_id", quantitytype);
                    vdm.insert(cmd);
                }
                string msg = "Branch Over Head Details are Successfully Saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE branch_overhead SET mainaccount=@mainaccount,total_sale=@total_sale,oh_month=@oh_month,remarks=@remarks,doe=@doe,entryby=@entryby,branch_id=@branch_id,tq_tanker=@tq_tanker,tq_close=@tq_close WHERE sno=@sno");
                cmd.Parameters.Add("@oh_month", date);
                cmd.Parameters.Add("@mainaccount", mainhead);
                cmd.Parameters.Add("@total_sale", totalsales);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@entryby", UserID);
                cmd.Parameters.Add("@branch_id", branchoh);
                cmd.Parameters.Add("@tq_tanker", totalqtyinctank);
                cmd.Parameters.Add("@tq_close", totalqtyinclosingstock);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                foreach (subbranchoverhead o in obj.headnames)
                {
                    string sno1 = o.hdnsubSno;
                    string refno = sno;
                    cmd = new SqlCommand("update Branch_oh_sub set oh_id=@oh_id,amount=@amount,tot_qty_id=@tot_qty_id where branch_oh_sno=@refno and sno=@sno");
                    cmd.Parameters.Add("@oh_id", o.headsno);
                    cmd.Parameters.Add("@amount", o.amount);
                    cmd.Parameters.Add("@tot_qty_id", o.quantitytype);
                    cmd.Parameters.Add("@refno", refno);
                    cmd.Parameters.Add("@sno", sno1);
                    vdm.Update(cmd);
                }
                string msg = "Branch Over Head Details Successfully Updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class branchoverhead
    {
        public string sno { get; set; }
        public string date { get; set; }
        public string mainhead { get; set; }
        public string mainhead1 { get; set; }
        public string totalsales { get; set; }
        public string remarks { get; set; }
        public string btnval { get; set; }
        public string totalqtyinclosingstock { get; set; }
        public string totalqtyinctank { get; set; }
        public string branchoh { get; set; }
        public string branchoh1 { get; set; }
        public string mainoverheadname { get; set; }
        public List<subbranchoverhead> headnames { get; set; }
    }
    public class subbranchoverhead
    {
        public string headsno { get; set; }
        public string headName { get; set; }
        public string amount { get; set; }
        public string refno { get; set; }
        public string headid { get; set; }
        public string quantitytype { get; set; }
        public string hdnsubSno { get; set; }
    }
    private void get_branch_overhead_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  branch_overhead.sno, branch_overhead.mainaccount, branch_overhead.total_sale, branch_overhead.doe, branch_overhead.oh_month, branch_overhead.entryby, branch_overhead.branch_id, branch_overhead.remarks, branch_overhead.tq_tanker, branch_overhead.tq_close, branch_info.branchname, mainoverhead_details.mainoverhead FROM branch_overhead INNER JOIN branch_info ON branch_overhead.branch_id = branch_info.sno INNER JOIN mainoverhead_details ON branch_overhead.mainaccount = mainoverhead_details.sno Order by branch_overhead.oh_month");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<branchoverhead> branchoverhead = new List<branchoverhead>();
            foreach (DataRow dr in routes.Rows)
            {
                branchoverhead getaccountdetails = new branchoverhead();
                getaccountdetails.mainhead = dr["mainaccount"].ToString();
                getaccountdetails.totalsales = dr["total_sale"].ToString();
                getaccountdetails.date = ((DateTime)dr["oh_month"]).ToString("yyyy-MM-dd");     // dr["oh_month"].ToString();
                getaccountdetails.sno = dr["sno"].ToString();
                getaccountdetails.remarks = dr["remarks"].ToString();
                getaccountdetails.totalqtyinctank = dr["tq_tanker"].ToString();
                getaccountdetails.totalqtyinclosingstock = dr["tq_close"].ToString();
                getaccountdetails.branchoh = dr["branch_id"].ToString();
                getaccountdetails.branchoh1 = dr["branchname"].ToString();
                var mainhead1 = dr["mainaccount"].ToString();
                getaccountdetails.mainhead1 = mainhead1;
                getaccountdetails.mainoverheadname = dr["mainoverhead"].ToString();
                branchoverhead.Add(getaccountdetails);
            }
            string response = GetJson(branchoverhead);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_subbranch_overhead_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string refno = context.Request["sno"];
            cmd = new SqlCommand("SELECT  Branch_oh_sub.sno, Branch_oh_sub.branch_oh_sno, Branch_oh_sub.oh_id, Branch_oh_sub.amount,Branch_oh_sub.tot_qty_id, overheadmaster.oh_name FROM Branch_oh_sub INNER JOIN  overheadmaster ON Branch_oh_sub.oh_id = overheadmaster.sno WHERE   (Branch_oh_sub.branch_oh_sno = @refno)");
            cmd.Parameters.Add("@refno", refno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<subbranchoverhead> subbranchoverhead = new List<subbranchoverhead>();
            foreach (DataRow dr in routes.Rows)
            {
                subbranchoverhead getaccountdetails = new subbranchoverhead();
                getaccountdetails.refno = dr["branch_oh_sno"].ToString();
                getaccountdetails.headid = dr["oh_id"].ToString();
                getaccountdetails.amount = dr["amount"].ToString();
                getaccountdetails.headName = dr["oh_name"].ToString();
                getaccountdetails.quantitytype = dr["tot_qty_id"].ToString();
                getaccountdetails.headsno = dr["sno"].ToString();
                subbranchoverhead.Add(getaccountdetails);
            }
            string response = GetJson(subbranchoverhead);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_overhead_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string mainhead = context.Request["mainhead"];
            cmd = new SqlCommand("SELECT  mainoverhead_details.sno, mainoverhead_details.mainoverhead, overheadmaster.sno AS ohsno, overheadmaster.oh_name, overheadmaster.stats FROM mainoverhead_details INNER JOIN  overheadmaster ON mainoverhead_details.sno = overheadmaster.mainaccount WHERE  (mainoverhead_details.sno = @mainhead)");
            cmd.Parameters.Add("@mainhead", mainhead);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<overhead> overhead = new List<overhead>();
            foreach (DataRow dr in routes.Rows)
            {
                overhead getroutes = new overhead();
                getroutes.sno = dr["ohsno"].ToString();
                getroutes.mainhead = dr["mainoverhead"].ToString();
                getroutes.overheadname = dr["oh_name"].ToString();
                overhead.Add(getroutes);
            }
            string response = GetJson(overhead);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_ohmaster_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string mainoh = context.Request["mainoh"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into mainoverhead_details (mainoverhead, createdby,doe) values (@mainoverhead, @createdby,@doe)");
                cmd.Parameters.Add("@mainoverhead", mainoh);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);

                vdm.insert(cmd);
                string msg = "Over Head Details Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update mainoverhead_details set mainoverhead=@mainoverhead,modifiedby=@modifiedby,modifiedon=@modifiedon where sno=@sno ");
                cmd.Parameters.Add("@mainoverhead", mainoh);
                cmd.Parameters.Add("@modifiedby", UserID);
                cmd.Parameters.Add("@modifiedon", ServerDateCurrentdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Over Head Details Update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class mainoverhead
    {
        public string sno { get; set; }
        public string mainoh { get; set; }
    }

    private void get_ohmaster_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT  sno, mainoverhead, createdby, doe, modifiedby, modifiedon FROM  mainoverhead_details");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<mainoverhead> mainoverhead = new List<mainoverhead>();
            foreach (DataRow dr in routes.Rows)
            {
                mainoverhead getroutes = new mainoverhead();
                getroutes.sno = dr["sno"].ToString();
                getroutes.mainoh = dr["mainoverhead"].ToString();
                mainoverhead.Add(getroutes);
            }
            string response = GetJson(mainoverhead);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_nameoh_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string mainoverhead = context.Request["mainoverhead"];
            string overheadname = context.Request["overheadname"];
            string status = context.Request["status"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into overheadmaster (mainaccount, oh_name,stats) values (@mainaccount, @oh_name,@stats)");
                cmd.Parameters.Add("@mainaccount", mainoverhead);
                cmd.Parameters.Add("@oh_name", overheadname);
                cmd.Parameters.Add("@stats", status);

                vdm.insert(cmd);
                string msg = "Over Head Name Details Saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update overheadmaster set mainaccount=@mainaccount, oh_name=@oh_name,stats=@stats where sno=@sno ");
                cmd.Parameters.Add("@mainaccount", mainoverhead);
                cmd.Parameters.Add("@oh_name", overheadname);
                cmd.Parameters.Add("@stats", status);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Over Head Name Details Update successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class overheadname
    {
        public string sno { get; set; }
        public string mainohid { get; set; }
        public string mainoh { get; set; }
        public string ohname { get; set; }
        public string status { get; set; }
    }

    private void get_ohmastername_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT overheadmaster.sno, overheadmaster.mainaccount, overheadmaster.oh_name, overheadmaster.stats, mainoverhead_details.mainoverhead FROM overheadmaster INNER JOIN mainoverhead_details ON overheadmaster.mainaccount = mainoverhead_details.sno");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<overheadname> overheadname = new List<overheadname>();
            foreach (DataRow dr in routes.Rows)
            {
                overheadname getroutes = new overheadname();
                getroutes.sno = dr["sno"].ToString();
                getroutes.mainohid = dr["mainaccount"].ToString();
                getroutes.ohname = dr["oh_name"].ToString();
                getroutes.status = dr["stats"].ToString();
                getroutes.mainoh = dr["mainoverhead"].ToString();
                overheadname.Add(getroutes);
            }
            string response = GetJson(overheadname);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Branch_details_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT    branch_info.sno, branch_info.branchname, branch_info.address, branch_info.whcode, branch_info.branchtype, branch_info.tinno, branch_info.cstno, branch_info.mitno, branch_info.branchcode, branchmapping.superbranch FROM  branch_info INNER JOIN branchmapping ON branch_info.sno = branchmapping.subbranch WHERE  (branchmapping.superbranch = @branchid)");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Branches> Departmentslst = new List<Branches>();
            foreach (DataRow dr in routes.Rows)
            {
                Branches getroutes = new Branches();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.branchName = dr["branchname"].ToString();
                getroutes.branchcode = dr["branchcode"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class calibration
    {
        public string instrumentname { get; set; }
        public string make { get; set; }
        public string range { get; set; }
        public string doc { get; set; }
        public string duedate { get; set; }
        public string renewaldate { get; set; }
        public string remarks { get; set; }
        public string sno { get; set; }
    }
    private void get_calibration_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  sno, instrumentname, make, range, doc, duedate, renewaldate, remarks, doe, createdby FROM calibrationregister_details");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<calibration> calibration = new List<calibration>();
            foreach (DataRow dr in routes.Rows)
            {
                calibration curdcolddetails = new calibration();
                curdcolddetails.instrumentname = dr["instrumentname"].ToString();
                curdcolddetails.make = dr["make"].ToString();
                curdcolddetails.range = dr["range"].ToString();
                curdcolddetails.doc = dr["doc"].ToString();
                curdcolddetails.duedate = dr["duedate"].ToString();
                curdcolddetails.renewaldate = dr["renewaldate"].ToString();
                curdcolddetails.remarks = dr["remarks"].ToString();
                curdcolddetails.sno = dr["sno"].ToString();
                calibration.Add(curdcolddetails);
            }
            string response = GetJson(calibration);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    public class transportvalue
    {
        public string sno { get; set; }
        public string branchname { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string btnvalue { get; set; }
        public List<transportsubvalue> transport_details { get; set; }
    }
    public class transportsubvalue
    {
        public string sno { get; set; }
        public string vendorid { get; set; }
        public string vendorname { get; set; }
        public string transactionno { get; set; }
        public string vehicleno { get; set; }
        public string kms { get; set; }
        public string transportvalue { get; set; }
        public string totalmilkqty { get; set; }
        public string totaltransportvalue { get; set; }
        public string perltrrate { get; set; }
        public string celltype { get; set; }
        public string qtyltr { get; set; }
        public string buttonval { get; set; }
    }

    private void save_transportvalue_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            transportvalue obj = js.Deserialize<transportvalue>(title1);
            string btnvalue = obj.btnvalue;
            //string branchname = obj.branchname;
            string fromdate = obj.fromdate;
            string todate = obj.todate;
            //if (btnvalue == "Save")
            //{
            foreach (transportsubvalue o in obj.transport_details)
            {
                string vendorid = o.vendorid;
                string vendorname = o.vendorname;
                string celltype = o.celltype;
                string transactionno = o.transactionno;
                string vehicleno = o.vehicleno;
                string kms = o.kms;
                string transportvalue = o.transportvalue;
                string totalmilkqty = o.totalmilkqty;
                string totaltransportvalue = o.totaltransportvalue;
                string qtyltr = o.qtyltr;
                string perltrrate = o.perltrrate;
                string buttonval = o.buttonval;
                if (buttonval == "Save")
                {
                    if (vendorid != "" && transactionno != "")
                    {
                        cmd = new SqlCommand("UPDATE milktransactions SET  transportvalue = @transportvalue WHERE (sectionid = @sectionid) AND (dcno = @transactionno)");
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        cmd.Parameters.Add("@sectionid", vendorid);
                        cmd.Parameters.Add("@transactionno", transactionno);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("INSERT INTO transportvalue_logs(sectionid, celltype, dcno, vehicleno, qty_ltr, kms, totalmilk_qty, totaltransport_value, transport_value, perltrrate, createdby, doe,branchid) values (@sectionid, @celltype, @dcno, @vehicleno, @qtyltr, @kms, @totalmilk, @totaltransport, @transportvalue, @perltrrate, @createdby, @doe,@branchid)");
                        cmd.Parameters.Add("@sectionid", vendorid);
                        cmd.Parameters.Add("@celltype", celltype);
                        cmd.Parameters.Add("@dcno", transactionno);
                        cmd.Parameters.Add("@vehicleno", vehicleno);
                        cmd.Parameters.Add("@qtyltr", qtyltr);
                        cmd.Parameters.Add("@kms", kms);
                        cmd.Parameters.Add("@totalmilk", totalmilkqty);
                        cmd.Parameters.Add("@totaltransport", totaltransportvalue);
                        cmd.Parameters.Add("@transportvalue", transportvalue);
                        cmd.Parameters.Add("@perltrrate", perltrrate);
                        cmd.Parameters.Add("@createdby", UserID);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                        string msg = "Transport Details Successfully Updated";
                        string response = GetJson(msg);
                        context.Response.Write(response);
                    }
                    else
                    {
                        string msg = "Transport Details Un Successfully Updated";
                        string response = GetJson(msg);
                        context.Response.Write(response);
                    }
                }
            }
            //}
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class smpchartdetails
    {
        public List<string> status { get; set; }
        public List<string> quantity { get; set; }
        public string Date { get; set; }
    }


    private void cipdetailschart(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        string frmdate = context.Request["fromdate"].ToString();
        string tdate = context.Request["todate"].ToString();
        DateTime fromdate = Convert.ToDateTime(frmdate);
        DateTime todate = Convert.ToDateTime(tdate);
        cmd = new SqlCommand("SELECT  SUM(quantity) AS Expr1, does FROM (SELECT quantity, CONVERT(NVARCHAR(15), doe, 101) AS does FROM cipcleaningdetails WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid = @BranchID)) AS t1 GROUP BY does");
        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
        cmd.Parameters.Add("@d2", GetHighDate(todate));
        cmd.Parameters.Add("@BranchID", BranchID);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<smpchartdetails> smpchartdetails = new List<smpchartdetails>();
        if (dtroutes.Rows.Count > 0)
        {
            smpchartdetails getLineChart = new smpchartdetails();
            List<string> quantitylist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string inDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                string unitQty = dr["Expr1"].ToString();
                double qtykg = 0;
                double.TryParse(dr["Expr1"].ToString(), out qtykg);
                avgSaleQty += qtykg;
                qtykgs += unitQty + ",";

                string inwardDate = dr["does"].ToString();
                DateTime dtinwardDate = Convert.ToDateTime(inwardDate);
                string strdate = dtinwardDate.ToString("dd/MM/yyyy");
                string[] str = strdate.Split('/');
                //string ChangedTime = dtinwardDate.ToString("dd");
                string date = str[0];
                inDate += date + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtroutes.Rows)
            {
                string TodayMileage = dr["Expr1"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            inDate = inDate.Substring(0, inDate.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            quantitylist.Add(AvgMileage);
            status.Add("Qty Kgs");
            status.Add("Avg Kgs");
            getLineChart.quantity = quantitylist;
            getLineChart.Date = inDate;
            getLineChart.status = status;
            smpchartdetails.Add(getLineChart);
        }
        string errresponse = GetJson(smpchartdetails);
        context.Response.Write(errresponse);
    }

    private void returnmilk_piechart(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string milktype = context.Request["milktype"].ToString();
        string status = context.Request["status"].ToString();
        string branchtype = context.Request["branchtype"].ToString();
        List<PieValues> lPieValueslist = new List<PieValues>();
        List<string> RouteList = new List<string>();
        List<string> AmountList = new List<string>();

        string qtykgs = "";
        string vendorname = "";
        if (status == "Daily")
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@Milktype", "Cow");
                cmd.Parameters.Add("@branchtype", branchtype);
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno  WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            if (unitQty == "")
                            {
                                unitQty = "0";
                            }
                            AmountList.Add(unitQty);
                            string vendor = dr["shortname"].ToString();
                            RouteList.Add(vendor);
                        }
                    }

                }
            }
        }
        else
        {
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (milktype == "Cow")
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Cow");
            }
            else
            {
                cmd = new SqlCommand("SELECT vendors.sno, vendors.vendorname FROM vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE  (vendor_subtable.milktype = @Milktype) AND (vendors.branchid = @BranchID) AND (vendors.branchtype=@branchtype)");
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@Milktype", "Buffalo");
            }
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtVendor = vdm.SelectQuery(cmd).Tables[0];
            if (dtVendor.Rows.Count > 0)
            {
                foreach (DataRow drven in dtVendor.Rows)
                {
                    cmd = new SqlCommand("SELECT sum(milktransactions.qty_kgs) as qtykgs, vendors.shortname FROM milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno WHERE  (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = @transtype) AND (milktransactions.sectionid=@sectionid) GROUP BY vendors.shortname");
                    cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-30));
                    cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.Add("@transtype", "in");
                    cmd.Parameters.Add("@sectionid", drven["sno"].ToString());
                    DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtDispatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDispatch.Rows)
                        {
                            string unitQty = dr["qtykgs"].ToString();
                            if (unitQty == "")
                            {
                                unitQty = "0";
                            }
                            AmountList.Add(unitQty);
                            string vendor = dr["shortname"].ToString();
                            RouteList.Add(vendor);
                        }
                    }

                }
            }
        }
        PieValues GetPieValues = new PieValues();
        GetPieValues.RouteName = RouteList;
        GetPieValues.Amount = AmountList;
        lPieValueslist.Add(GetPieValues);
        string errresponse = GetJson(lPieValueslist);
        context.Response.Write(errresponse);
    }
    public class cowdetailschart
    {
        public string qtyltr { get; set; }
        public string qtykg { get; set; }
        public string snf { get; set; }
        public string fat { get; set; }
        public string kgsnf { get; set; }
        public string kgfat { get; set; }
        public string vendorname { get; set; }
    }

   
    private void get_cowdetailschart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string cowbuffdate = context.Request["cowbuffdate"].ToString();
            DateTime dtcowbuffdate = Convert.ToDateTime(cowbuffdate);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2)  AND (m.milktype = 'Cow')");
            cmd.Parameters.Add("@d1", GetLowDate(dtcowbuffdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtcowbuffdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
            }
            cowdetailschart getroutes = new cowdetailschart();
            getroutes.qtykg = totalqtykg.ToString();
            getroutes.qtyltr = totalqtyltr.ToString();
            getroutes.fat = totalfat.ToString();
            getroutes.snf = totalsnf.ToString();
            getroutes.kgfat = totalkgfat.ToString();
            getroutes.kgsnf = totalkgsnf.ToString();
            cowdetailschart.Add(getroutes);
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_cow_vendor_details_chart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string cowbuffdate = context.Request["date"].ToString();
            DateTime dtcowbuffdate = Convert.ToDateTime(cowbuffdate);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2)  AND (m.milktype = 'Cow')");
            cmd.Parameters.Add("@d1", GetLowDate(dtcowbuffdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtcowbuffdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
                string vendorname = dr["vendorname"].ToString();
                cowdetailschart getroutes = new cowdetailschart();
                getroutes.vendorname = vendorname.ToString();
                getroutes.qtykg = qty_kgs.ToString();
                getroutes.qtyltr = qty_ltr.ToString();
                getroutes.fat = FAT.ToString();
                getroutes.snf = SNF.ToString();
                getroutes.kgfat = KGFAT.ToString();
                getroutes.kgsnf = KGSNF.ToString();
                cowdetailschart.Add(getroutes);
            }
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_buffalo_vendor_details_chart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string cowbuffdate = context.Request["date"].ToString();
            DateTime dtcowbuffdate = Convert.ToDateTime(cowbuffdate);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2) AND (m.milktype = 'Buffalo')");
            cmd.Parameters.Add("@d1", GetLowDate(dtcowbuffdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtcowbuffdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
                string vendorname = dr["vendorname"].ToString();
                cowdetailschart getroutes = new cowdetailschart();
                getroutes.vendorname = vendorname.ToString();
                getroutes.qtykg = qty_kgs.ToString();
                getroutes.qtyltr = qty_ltr.ToString();
                getroutes.fat = FAT.ToString();
                getroutes.snf = SNF.ToString();
                getroutes.kgfat = KGFAT.ToString();
                getroutes.kgsnf = KGSNF.ToString();
                cowdetailschart.Add(getroutes);
            }
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_buffalodetailschart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string cowbuffdate = context.Request["cowbuffdate"].ToString();
            DateTime dtcowbuffdate = Convert.ToDateTime(cowbuffdate);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2) AND (m.milktype = 'Buffalo')");
            cmd.Parameters.Add("@d1", GetLowDate(dtcowbuffdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtcowbuffdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtbuff = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;

            foreach (DataRow dr in dtbuff.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
            }
            cowdetailschart getroutes = new cowdetailschart();
            getroutes.qtykg = totalqtykg.ToString();
            getroutes.qtyltr = totalqtyltr.ToString();
            getroutes.fat = totalfat.ToString();
            getroutes.snf = totalsnf.ToString();
            getroutes.kgfat = totalkgfat.ToString();
            getroutes.kgsnf = totalkgsnf.ToString();
            cowdetailschart.Add(getroutes);
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class returnmilkbarchart
    {
        public List<string> milktype { get; set; }
        public List<string> quantity { get; set; }
        public string Date { get; set; }
    }
    private void generate_returnmilkbarchart(HttpContext context)
    {
        vdm = new SalesDBManager();
        string BranchID = context.Session["Branch_ID"].ToString();
        string date = context.Request["date"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        List<returnmilkbarchart> lPieValueslist = new List<returnmilkbarchart>();
        List<string> milktypelist = new List<string>();
        List<string> quantitylist = new List<string>();

        cmd = new SqlCommand("SELECT  SUM(quantity) AS Expr1, milktype FROM  returnmilk_details WHERE (doe BETWEEN @d1 AND @d2) AND (branchid = @branchid) GROUP BY milktype");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
        if (dtDispatch.Rows.Count > 0)
        {
            foreach (DataRow dr in dtDispatch.Rows)
            {
                string quntity = dr["Expr1"].ToString();
                if (quntity == "")
                {
                    quntity = "0";
                }
                quantitylist.Add(quntity);
                string milktype = dr["milktype"].ToString();
                milktypelist.Add(milktype);
            }
        }

        returnmilkbarchart GetPieValues = new returnmilkbarchart();
        GetPieValues.milktype = milktypelist;
        GetPieValues.quantity = quantitylist;
        lPieValueslist.Add(GetPieValues);
        string errresponse = GetJson(lPieValueslist);
        context.Response.Write(errresponse);
    }
    public class vendorlinechart
    {
        public List<string> status { get; set; }
        public List<string> quantity { get; set; }
        public string vendorname { get; set; }
    }

    private void get_vendorlinechart_details(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string date = context.Request["date"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
        cmd = new SqlCommand("SELECT  SUM(milktransactions.qty_kgs) AS qtykgs, vendors.shortname FROM  milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN milktransaction_logs ON milktransaction_logs.milktransaction_sno = milktransactions.sno WHERE (milktransactions.entrydate BETWEEN @d1 AND @d2) AND (milktransactions.transtype = 'in') AND (vendors.branchtype = 'Inter Branch') AND (milktransactions.branchid = @branchid) GROUP BY vendors.shortname");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate).AddDays(-29));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
        List<vendorlinechart> vendorlinechart = new List<vendorlinechart>();
        if (dtroutes.Rows.Count > 0)
        {
            vendorlinechart getLineChart = new vendorlinechart();
            List<string> quantitylist = new List<string>();
            List<string> vendorlist = new List<string>();
            List<string> status = new List<string>();
            string qtykgs = "";
            string vendrs = "";
            double avgQtykg = 0;
            int count = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                string unitQty = dr["qtykgs"].ToString();
                double qtykg = 0;
                double.TryParse(dr["qtykgs"].ToString(), out qtykg);
                avgQtykg += qtykg;
                qtykgs += unitQty + ",";
                string vendorname = dr["shortname"].ToString();
                vendrs += vendorname + ",";
                count++;
            }
            vendrs = vendrs.Substring(0, vendrs.Length - 1);
            qtykgs = qtykgs.Substring(0, qtykgs.Length - 1);
            quantitylist.Add(qtykgs);
            //Datelist.Add(inDate);
            status.Add("Qty Kgs");
            getLineChart.quantity = quantitylist;
            getLineChart.vendorname = vendrs;
            getLineChart.status = status;
            vendorlinechart.Add(getLineChart);
        }
        string errresponse = GetJson(vendorlinechart);
        context.Response.Write(errresponse);
    }

    public class realisationdetails
    {
        public string batch { get; set; }
        public string sno { get; set; }
        public string btnvalue { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public List<realisationsubdetails> realization_details { get; set; }
    }
    public class realisationsubdetails
    {
        public string productid { get; set; }
        public string strate { get; set; }
        public string packingrate { get; set; }
        public string overheads { get; set; }
        public string total { get; set; }
        public string realisation { get; set; }
        public string gainloss { get; set; }
        public string totalltrs { get; set; }
        public string gainamount { get; set; }
        public string lossamount { get; set; }
    }
    private void save_finalize_section_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            realisationdetails obj = js.Deserialize<realisationdetails>(title1);
            string batch = obj.batch;
            string sno = obj.sno;
            string btnvalue = obj.btnvalue;
            string year = obj.year;
            string month = obj.month;
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Finalize")
            {
                foreach (realisationsubdetails cp in obj.realization_details)
                {
                    cmd = new SqlCommand("insert into realizationdetails (batchid, month, year, productid, strate, packingrate, overheads, total, realisation, gainloss, totalltrs, gainamount, lossamount, doe, createdby, branchid) values(@productid,  @strate, @packingrate, @overheads, @total, @realisation, @gainloss, @totalltrs, @gainamount, @lossamount, @doe, @createdby, @branchid)");
                    cmd.Parameters.Add("@batchid", batch);
                    cmd.Parameters.Add("@month", month);
                    cmd.Parameters.Add("@year", year);
                    cmd.Parameters.Add("@productid", cp.productid);
                    cmd.Parameters.Add("@strate", cp.strate);
                    cmd.Parameters.Add("@packingrate", cp.packingrate);
                    cmd.Parameters.Add("@overheads", cp.overheads);
                    cmd.Parameters.Add("@total", cp.total);
                    cmd.Parameters.Add("@realisation", cp.realisation);
                    cmd.Parameters.Add("@gainloss", cp.gainloss);
                    cmd.Parameters.Add("@totalltrs", cp.totalltrs);
                    cmd.Parameters.Add("@gainamount", cp.gainamount);
                    cmd.Parameters.Add("@lossamount", cp.lossamount);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@createdby", UserID);
                    vdm.insert(cmd);
                }
            }
            string msg = "Realization details added successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class butterproduction
    {
        public string sno { get; set; }
        public string productname { get; set; }
        public string quantity { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string productsno { get; set; }
        public string qty_kgs { get; set; }
    }
    private void get_butterproduction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.productname, productmonitar.quantity FROM productmaster INNER JOIN productmonitar ON productmaster.sno = productmonitar.productid WHERE  (productmaster.departmentid = '10') AND productmonitar.branchid=@branchid");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable dttable = vdm.SelectQuery(cmd).Tables[0];
            List<butterproduction> butterproduction = new List<butterproduction>();
            foreach (DataRow dr in dttable.Rows)
            {
                butterproduction curdcolddetails = new butterproduction();
                curdcolddetails.sno = dr["sno"].ToString();
                curdcolddetails.productname = dr["productname"].ToString();
                curdcolddetails.quantity = dr["quantity"].ToString();
                butterproduction.Add(curdcolddetails);
            }
            string response = GetJson(butterproduction);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    public class subbutterproduction
    {
        public string sno { get; set; }
        public List<butterproduction> butter_closing_details { set; get; }
    }
    private void btnsave_butterclosing_click(HttpContext context)
    {
        try
        {
            if (context.Session["Branch_ID"] != null)
            {
                string BranchID = context.Session["Branch_ID"].ToString();
                string UserID = context.Session["Employ_Sno"].ToString();
                string deptid = context.Session["DeptID"].ToString();
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                WebClient client = new WebClient();
                DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
                subbutterproduction obj = js.Deserialize<subbutterproduction>(title1);
                foreach (butterproduction o in obj.butter_closing_details)
                {
                    string qtykgs = o.qty_kgs;
                    string productid = o.productsno;
                    string snf = o.snf;
                    string fat = o.fat;
                    cmd = new SqlCommand("insert into closing_details (productid, qty_kgs,fat,snf, closeddate, closedby, type, doe,branchid,deptid) values (@productid,@quantity,@fat,@snf,@closingdate,@closedby, @type, @doe, @BranchID,@deptid)");
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@quantity", qtykgs);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@closingdate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@closedby", UserID);
                    cmd.Parameters.Add("@type", "butter");
                    cmd.Parameters.Add("@BranchID", BranchID);
                    cmd.Parameters.Add("@deptid", deptid);
                    vdm.insert(cmd);
                }
                string msg = "Butter closing details entered successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_coldroom_master_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string type = context.Request["type"];
            string coldroomname = context.Request["coldroomname"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into coldroommaster (section, coldroom, cretedby, branchid, doe) values (@section,@coldroom,@cretedby,@branchid,@doe)");
                cmd.Parameters.Add("@section", type);
                cmd.Parameters.Add("@coldroom", coldroomname);
                cmd.Parameters.Add("@cretedby", UserID);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("Cold Room Successfully Saved");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update coldroommaster set section=@section, coldroom=@coldroom, cretedby=@cretedby, doe=@doe where sno=@sno AND branchid=@branchid");
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@section", type);
                cmd.Parameters.Add("@coldroom", coldroomname);
                cmd.Parameters.Add("@cretedby", UserID);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.Update(cmd);
                string response = GetJson("Cold Room Successfully Updated");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class coldroomdetail
    {
        public string sno { get; set; }
        public string coldroomtype { get; set; }
        public string coldroomname { get; set; }
    }
    private void get_coldroom_master_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, section, coldroom, cretedby, branchid, doe FROM coldroommaster WHERE (branchid = @branchid)");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<coldroomdetail> coldroomdetail = new List<coldroomdetail>();
            foreach (DataRow dr in routes.Rows)
            {
                coldroomdetail coldroom = new coldroomdetail();
                coldroom.sno = dr["sno"].ToString();
                coldroom.coldroomtype = dr["section"].ToString();
                coldroom.coldroomname = dr["coldroom"].ToString();
                coldroomdetail.Add(coldroom);
            }
            string response = GetJson(coldroomdetail);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_coldroom_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string section = context.Request["section"].ToString();
            cmd = new SqlCommand("SELECT sno, section, coldroom, cretedby, branchid, doe FROM coldroommaster WHERE (branchid = @branchid) and section=@section ");
            cmd.Parameters.Add("@section", section);
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<coldroomdetail> coldroomdetail = new List<coldroomdetail>();
            foreach (DataRow dr in routes.Rows)
            {
                coldroomdetail coldroom = new coldroomdetail();
                coldroom.sno = dr["sno"].ToString();
                coldroom.coldroomtype = dr["section"].ToString();
                coldroom.coldroomname = dr["coldroom"].ToString();
                coldroomdetail.Add(coldroom);
            }
            string response = GetJson(coldroomdetail);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_cream_qualitytesting_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            qualitytesting obj = js.Deserialize<qualitytesting>(title1);
            string date = obj.date;
            string creamtype = obj.creamtype;
            string remarks = obj.remarks;
            string chemist = obj.chemist;
            string qco = obj.qco;
            string sno = obj.sno;
            DateTime dtdate = Convert.ToDateTime(date);
            string btnvalue = obj.btnvalue;
            string DeptID = context.Session["DeptID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            int i = 1;
            if (btnvalue == "Save")
            {
                foreach (qualitytestingDetails o in obj.creamdetails)
                {
                    double qtykg = 0;
                    double.TryParse(o.Qtykg, out qtykg);
                    double fat = 0;
                    double.TryParse(o.fat, out fat);
                    double snf = 0;
                    double.TryParse(o.snf, out snf);
                    double temprature = 0;
                    double.TryParse(o.temprature, out temprature);
                    double acidity = 0;
                    double.TryParse(o.acidity, out acidity);
                    cmd = new SqlCommand("insert into qualitytesting_details ( creamtype, qty_kgs, fat, snf, temp, acidity, remarks, chemist, qco, doe, createdby, createdon, branchid ) values( @creamtype, @qty_kgs, @fat, @snf, @temp, @acidity, @remarks, @chemist, @qco, @doe, @createdby, @entrydate, @branchid)");
                    // sno, creamtype, qty_kgs, fat, snf, temp, acidity, remarks, chemist, qco, doe, createdby, entrydate
                    cmd.Parameters.Add("@creamtype", creamtype);
                    cmd.Parameters.Add("@qty_kgs", qtykg);
                    cmd.Parameters.Add("@fat", fat);
                    cmd.Parameters.Add("@snf", snf);
                    cmd.Parameters.Add("@temp", temprature);
                    cmd.Parameters.Add("@acidity", acidity);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@chemist", chemist);
                    cmd.Parameters.Add("@qco", qco);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@createdby", UserID);
                    cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@branchid", BranchID);
                    vdm.insert(cmd);
                }
            }
            string msg = "Cream Quality Testing Successfully Added";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class creamqualitytesting
    {
        public string sno { get; set; }
        public string creamtype { get; set; }
        public string qtykgs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string temp { get; set; }
        public string doe { get; set; }
    }
    private void get_cream_qualitytesting_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT sno,qty_kgs, qty_ltrs, fat, snf, temp, acidity, remarks, chemist, creamtype, createdby, createdon, doe, branchid FROM  qualitytesting_details WHERE  (creamtype = 'Cow') AND (createdon BETWEEN @d1 AND @d2) AND (branchid = @branchid) OR  (creamtype = 'Buffalo') AND (createdon BETWEEN @d1 AND @d2) AND (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<creamqualitytesting> creamqualitytesting = new List<creamqualitytesting>();
            foreach (DataRow dr in routes.Rows)
            {
                creamqualitytesting coldroom = new creamqualitytesting();
                coldroom.sno = dr["sno"].ToString();
                coldroom.creamtype = dr["creamtype"].ToString();
                coldroom.qtykgs = dr["qty_kgs"].ToString();
                coldroom.fat = dr["fat"].ToString();
                coldroom.snf = dr["snf"].ToString();
                coldroom.doe = dr["doe"].ToString();
                creamqualitytesting.Add(coldroom);
            }
            string response = GetJson(creamqualitytesting);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_biproduct_stock_details(HttpContext context)
    {
        vdm = new SalesDBManager();
        string date = context.Request["doe"].ToString();
        DateTime dtdate = Convert.ToDateTime(date);
        string BranchID = context.Session["Branch_ID"].ToString();
        List<stockdetails> gheedetails = new List<stockdetails>();
        cmd = new SqlCommand("SELECT  sno, batchid, productname, branchid, departmentid FROM productmaster WHERE  (batchid = '16') AND (branchid = @branchid)");
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtproducts = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT   productid, SUM(qty_kgs) AS quantity  FROM  closing_details WHERE (branchid = @cbranchid) AND (type = 'BiProducts') AND (closeddate BETWEEN @d1 AND @d2) GROUP BY productid");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate).AddDays(-1));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate).AddDays(-1));
        cmd.Parameters.Add("@cbranchid", BranchID);
        DataTable dtloose = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT  cpd.recivedqty AS recivedmilkqty, cpd.ob AS openingbalance, cpd.productionqty, cpd.total, cpd.sales, pm.productname, cpd.productid, pm.biproductsshortname FROM  plant_production_details AS cpd INNER JOIN productmaster AS pm ON pm.sno = cpd.productid INNER JOIN branch_info AS bi ON bi.sno = cpd.branchid WHERE  (cpd.createdon BETWEEN @d1 AND @d2) AND (pm.batchid = '16') AND (cpd.branchid = @pbranchid) AND (cpd.deptid = '1') GROUP BY cpd.recivedqty, cpd.ob, cpd.productionqty, cpd.total, cpd.sales, pm.productname, cpd.productid, pm.biproductsshortname");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@pbranchid", BranchID);
        DataTable dtproduction = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT   productid, SUM(qty_kgs) AS quantity  FROM  closing_details WHERE (branchid = @cbranchid) AND (type = 'BiProducts') AND (closeddate BETWEEN @d1 AND @d2) GROUP BY productid");
        cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        cmd.Parameters.Add("@cbranchid", BranchID);
        DataTable dtclosebal = vdm.SelectQuery(cmd).Tables[0];
        //cmd = new SqlCommand("SELECT productid, SUM(milkreciveqty) AS recived, SUM(production) AS production FROM  plant_production_details WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid = @branchid) GROUP BY productid");
        //cmd.Parameters.Add("@d1", GetLowDate(dtdate));
        //cmd.Parameters.Add("@d2", GetHighDate(dtdate));
        //cmd.Parameters.Add("@branchid", BranchID);
        //DataTable dtlosse = vdm.SelectQuery(cmd).Tables[0];
        if (dtproducts.Rows.Count > 0)
        {
            foreach (DataRow dr in dtproducts.Rows)
            {
                double bpopening = 0;
                double bpproduction = 0;
                double bprecive = 0;
                double bpsales = 0;
                double bpclose = 0;
                double bpsaletotalk = 0;
                stockdetails getstocks = new stockdetails();
                string productname = dr["productname"].ToString();
                if (dtloose.Rows.Count > 0)
                {
                    foreach (DataRow drgc in dtloose.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string gheeob = drgc["quantity"].ToString();
                        bpopening = Convert.ToDouble(gheeob);
                    }
                }
                if (dtproduction.Rows.Count > 0)
                {
                    bpproduction = 0;
                    foreach (DataRow drpro in dtproduction.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string gheeproductions = drpro["productionqty"].ToString();
                        if (gheeproductions != "")
                        {
                            bpproduction = Convert.ToDouble(gheeproductions);
                        }
                        string convertionquantity = drpro["recivedmilkqty"].ToString();
                        if (convertionquantity != "")
                        {
                            bprecive = Convert.ToDouble(convertionquantity);
                        }
                        string sales = drpro["sales"].ToString();
                        if (sales != "")
                        {
                            bpsales = Convert.ToDouble(sales);
                        }
                    }
                    //foreach (DataRow drpl in dtlosse.Select("productid='" + dr["sno"].ToString() + "'"))
                    //{
                    //    string gheeproductions = drpl["production"].ToString();
                    //    if (gheeproductions != "")
                    //    {
                    //        bpproduction = Convert.ToDouble(gheeproductions);
                    //    }
                    //    string convertionquantity = drpl["recived"].ToString();
                    //    if (convertionquantity != "")
                    //    {
                    //        bprecive = Convert.ToDouble(convertionquantity);
                    //    }
                    //}
                }
                if (dtclosebal.Rows.Count > 0)
                {
                    bpclose = 0;
                    foreach (DataRow drsale in dtclosebal.Select("productid='" + dr["sno"].ToString() + "'"))
                    {
                        string quantity = drsale["quantity"].ToString();
                        if (quantity != "")
                        {
                            bpclose = Convert.ToDouble(drsale["quantity"].ToString());
                        }
                    }
                }
                if (bpopening > 0 || bpproduction > 0 || bpsales > 0)
                {
                    getstocks.productname = productname;
                    getstocks.biproductsale = bpsales.ToString();
                    getstocks.biproductopening = bpopening.ToString();
                    getstocks.biproductproduction = bpproduction.ToString();
                    getstocks.biproductrecive = bprecive.ToString();
                    double bipc = bpopening + bpproduction;
                    double bisales = bipc - bpsales;
                    getstocks.biproductclosing = bpclose.ToString();
                    gheedetails.Add(getstocks);
                }
            }
        }
        string response = GetJson(gheedetails);
        context.Response.Write(response);
    }
    public class otherbiproducts
    {
        public string sno { get; set; }
        public string remarks { get; set; }
        public string btnvalue { get; set; }
        public string date { get; set; }
        public List<otherbiproductssub> obip_closing_details { get; set; }
    }

    public class otherbiproductssub
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string openingbalance { get; set; }
        public string production { get; set; }
        public string sales { get; set; }
        public string closingbalance { get; set; }
        public string productname { get; set; }
        public string date { get; set; }
    }
    private void save_otherbiproducts_sales_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            otherbiproducts obj = js.Deserialize<otherbiproducts>(title1);
            string btnvalue = obj.btnvalue;
            string remarks = obj.remarks;
            string date = obj.date;
            string deptid = "16";
            DateTime dtdate = Convert.ToDateTime(date);
            if (btnvalue == "Save")
            {
                foreach (otherbiproductssub o in obj.obip_closing_details)
                {
                    double closingbalance = 0;
                    double closings = 0;
                    double total = 0;
                    string obals = "";
                    string obal = o.openingbalance;
                    if (obal == null || obal == "")
                    {
                        obals = "0";
                    }
                    else
                    {
                        obals = obal;
                    }

                    double ob = Convert.ToDouble(obals);
                    double production = Convert.ToDouble(o.production);
                    double sales = Convert.ToDouble(o.sales);
                    closingbalance = ob + production;
                    total = closingbalance - sales;
                    closings = total;
                    cmd = new SqlCommand("insert into plant_production_details (doe, branchid, productid, inward, issue, remarks, createdby, ob, createdon,deptid) values  (@doe, @branchid, @productid, @inward, @issue, @remarks, @entryby,@openingbalance,@createdon,@deptid)");
                    //doe, branchid, productid, inward, issue, remarks, entryby
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@inward", production);
                    cmd.Parameters.Add("@issue", sales);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@entryby", UserID);
                    cmd.Parameters.Add("@openingbalance", ob);
                    cmd.Parameters.Add("@createdon", dtdate);
                    cmd.Parameters.Add("@deptid", deptid);
                    vdm.insert(cmd);

                    //vender_account update quary
                    cmd = new SqlCommand("update productmonitar set quantity= @quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", closings);
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@branchid", branchid);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into productmonitar (productid, quantity,branchid) values(@productid,@quantity,@branchid) ");
                        cmd.Parameters.Add("@quantity", closings);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Other Products details added successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_otherproducts_details_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string fromdate = context.Request["fromdate"];
            DateTime dfdate = Convert.ToDateTime(fromdate);
            string todate = context.Request["todate"];
            DateTime dtdate = Convert.ToDateTime(todate);

            cmd = new SqlCommand("SELECT  ppd.ob, ppd.createdon, ppd.branchid, ppd.doe, ppd.deptid, ppd.inward, ppd.issue, ppd.cb, productmaster.productname FROM  plant_production_details AS ppd INNER JOIN productmaster ON ppd.productid = productmaster.sno WHERE (ppd.deptid = 16) AND (ppd.createdon BETWEEN @d1 AND @d2) AND (ppd.branchid = @branchid) order by ppd.createdon");
            cmd.Parameters.Add("@d1", GetLowDate(dfdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<otherbiproductssub> otherbiproductssub = new List<otherbiproductssub>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                otherbiproductssub otherprd = new otherbiproductssub();
                otherprd.sno = i++.ToString();
                otherprd.productname = dr["productname"].ToString();
                string openingbalance = dr["ob"].ToString();
                double openingbalances = Convert.ToDouble(openingbalance);
                otherprd.openingbalance = openingbalances.ToString();

                string production = dr["inward"].ToString();
                double productions = Convert.ToDouble(production);
                otherprd.production = productions.ToString();

                string sales = dr["issue"].ToString();
                double sale = Convert.ToDouble(sales);
                otherprd.sales = sale.ToString();

                double closing = 0;
                double closings = 0;
                closing = openingbalances + productions;
                closings = closing - sale;

                otherprd.closingbalance = closings.ToString();
                otherprd.date = ((DateTime)dr["createdon"]).ToString("dd/MM/yyy");   //dr["createdon"].ToString();
                otherbiproductssub.Add(otherprd);
            }
            string response = GetJson(otherbiproductssub);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_allproduct_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  productmaster.sno, productmaster.batchid, productmaster.productname, productmaster.branchid, productmaster.departmentid, productmaster.ml,  productmaster.filimrate, productmaster.productcode, productmaster.price, productmaster.categorycode, processingdepartments.departmentname,  batchmaster.batch FROM productmaster INNER JOIN processingdepartments ON productmaster.departmentid = processingdepartments.departmentid INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid where (productmaster.branchid = @branchid) ORDER BY productmaster.sno");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.productid = dr["sno"].ToString();
                getproduct.departmentname = dr["departmentname"].ToString();
                getproduct.batch = dr["batch"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.productcode = dr["productcode"].ToString();
                getproduct.categorycode = dr["categorycode"].ToString();
                getproduct.price = dr["price"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_biproductsdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT closing_details.sno, closing_details.productid, closing_details.qty_kgs, closing_details.branchid, closing_details.closeddate,  productmaster.productname FROM  closing_details INNER JOIN   productmaster ON closing_details.productid = productmaster.sno WHERE  (closing_details.closeddate BETWEEN @d1 AND @d2) AND (closing_details.branchid = @branchid) AND (closing_details.type='BiProducts') ORDER BY closing_details.closeddate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheeproductiondetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.productid = dr["productid"].ToString();
                gheedetails.quaninty = dr["qty_kgs"].ToString();
                gheedetails.doe = dr["closeddate"].ToString();
                gheedetails.productname = dr["productname"].ToString();
                gheeproductiondetails.Add(gheedetails);
            }
            string response = GetJson(gheeproductiondetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void modify_biproduicts_closingdetails_click(HttpContext context)
    {
        string branchid = context.Session["Branch_ID"].ToString();
        string sno = context.Request["sno"];
        string productid = context.Request["productid"];
        string productname = context.Request["productname"];
        string quaninty = context.Request["quaninty"];
        string btnvalue = context.Request["btnvalue"];
        if (btnvalue == "Modify")
        {
            cmd = new SqlCommand("UPDATE biproductclosingdetails SET  quantity=@quantity where sno=@sno and branchid=@branchid and productid=@productid");
            cmd.Parameters.Add("@quantity", quaninty);
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@productid", productid);
            vdm.Update(cmd);

            string msg = "Bi-Production Details Modified Successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class realizationdetails
    {
        public string sno { get; set; }
        public string branchname { get; set; }
        public string batch { get; set; }
        public string btnvalue { get; set; }
        public string month { get; set; }
        public string year { get; set; }
        public List<realizationdetailssub> batch_wise_realizationdetails { get; set; }
    }
    public class realizationdetailssub
    {
        public string sno { get; set; }
        public string productid { get; set; }
        public string strate { get; set; }
        public string packingrate { get; set; }
        public string overheads { get; set; }
        public string total { get; set; }
        public string realisation { get; set; }
        public string gainloss { get; set; }
        public string totalltrs { get; set; }
        public string gainammount { get; set; }
        public string lossammount { get; set; }
    }
    private void save_realizationdetails_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            realizationdetails obj = js.Deserialize<realizationdetails>(title1);
            string sno = obj.sno;
            string batch = obj.batch;
            string btnvalue = obj.btnvalue;
            string branchname = obj.branchname;
            string month = obj.month;
            string year = obj.year;
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnvalue == "Finalize")
            {
                cmd = new SqlCommand("insert into realization_details (branchid, month, year, batchid, createdby, doe) values (@branchid, @month, @year, @batchid, @createdby, @doe)");
                cmd.Parameters.Add("@branchid", branchname);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@batchid", batch);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                cmd = new SqlCommand("select MAX(sno) AS sno from realization_details ");
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                string refno = routes.Rows[0]["sno"].ToString();
                foreach (realizationdetailssub si in obj.batch_wise_realizationdetails)
                {
                    string productid = si.productid;
                    string strate = si.strate;
                    string packingrate = si.packingrate;
                    string overheads = si.overheads;
                    string total = si.total;
                    string realisation = si.realisation;
                    string gainloss = si.gainloss;
                    string totalltrs = si.totalltrs;
                    string gainammount = si.gainammount;
                    string lossammount = si.lossammount;
                    cmd = new SqlCommand("insert into realization_subdetails (refno, productid, strate, pkgcharge, overhead, total, realization, gainloss, totalltrs, gainamount, lossamount) values (@refno, @productid, @strate, @pkgcharge, @overhead, @total, @realization, @gainloss, @totalltrs, @gainamount, @lossamount)");
                    //refno, productid, strate, pkgcharge, overhead, total, realization, gainloss, totalltrs, gainamount, lossamount
                    cmd.Parameters.Add("@refno", refno);
                    cmd.Parameters.Add("@productid", productid);
                    cmd.Parameters.Add("@strate", strate);
                    cmd.Parameters.Add("@pkgcharge", packingrate);
                    cmd.Parameters.Add("@overhead", overheads);
                    cmd.Parameters.Add("@total", total);
                    cmd.Parameters.Add("@realization", realisation);
                    cmd.Parameters.Add("@gainloss", gainloss);
                    cmd.Parameters.Add("@totalltrs", totalltrs);
                    cmd.Parameters.Add("@gainamount", gainammount);
                    cmd.Parameters.Add("@lossamount", lossammount);
                    vdm.insert(cmd);
                }
                string msg = "Realization Details are Successfully Saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_branch_products(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT productmaster.sno, productmaster.batchid, productmaster.productcode, productmaster.departmentid, productmaster.filimrate, productmaster.productname, productmaster.biproductsshortname, batchmaster.batch, productmonitar.quantity, productmaster.categorycode, productmaster.price, productmaster.clr, productmaster.snf, productmaster.fat, productmaster.ml FROM  productmaster INNER JOIN batchmaster ON productmaster.batchid = batchmaster.batchid LEFT OUTER JOIN  productmonitar ON productmaster.sno = productmonitar.productid  WHERE  (productmonitar.branchid = @BranchID)");
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<productclass> Departmentslst = new List<productclass>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                productclass getproduct = new productclass();
                getproduct.sno = i++.ToString();
                getproduct.productid = dr["sno"].ToString();
                getproduct.batchid = dr["batchid"].ToString();
                getproduct.productname = dr["productname"].ToString();
                getproduct.productcode = dr["productcode"].ToString();
                getproduct.departmentid = dr["departmentid"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.batch = dr["batch"].ToString();
                getproduct.quantity = dr["quantity"].ToString();
                getproduct.biproductsshortname = dr["biproductsshortname"].ToString();
                getproduct.packetsize = dr["ml"].ToString();
                getproduct.filimrate = dr["filimrate"].ToString();
                getproduct.fat = dr["fat"].ToString();
                getproduct.snf = dr["snf"].ToString();
                getproduct.clr = dr["clr"].ToString();
                getproduct.price = dr["price"].ToString();
                getproduct.categorycode = dr["categorycode"].ToString();
                Departmentslst.Add(getproduct);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_branch_products(HttpContext context)
    {
        vdm = new SalesDBManager();
        string productid = context.Request["productname"];
        string price = context.Request["price"];
        string vat = context.Request["vat"];
        string quantity = context.Request["quantity"];
        string btnval = context.Request["btnval"];
        string branchid = context.Session["Branch_ID"].ToString();
        if (btnval == "Modify")
        {
            cmd = new SqlCommand("SELECT  productid, quantity FROM productmonitar where  branchid=@branchid and productid=@productid");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@productid", productid);
            DataTable dtbranchproducts = vdm.SelectQuery(cmd).Tables[0];
            if (dtbranchproducts.Rows.Count > 0)
            {
                string msg = "Product already added to this branch";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("insert  into productmonitar (productid, quantity, branchid) values(@productid, @quantity, @branchid) ");
                cmd.Parameters.Add("@productid", productid);
                cmd.Parameters.Add("@quantity", quantity);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
                string msg = "Branch Products Successfully Saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
    }
    private void for_save_edit_states(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string statecode = context.Request["statecode"];
            string statename = context.Request["statename"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string ecode = context.Request["ecode"].ToString();
            string gststatecode = context.Request["gststatecode"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into state_master (statename,createdby,createdon,statecode,ecode,gststatecode) values (@statename,@createdby,@createdon,@statecode,@ecode,@gststatecode)");
                cmd.Parameters.Add("@statename", statename);
                cmd.Parameters.Add("@statecode", statecode);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                cmd.Parameters.Add("@ecode", ecode);
                cmd.Parameters.Add("@gststatecode", gststatecode);
                vdm.insert(cmd);
                string response = GetJson("State Details Successfully Saved");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update state_master set statename=@statename,createdby=@createdby,createdon=@createdon,statecode=@statecode,ecode=@ecode,gststatecode=@gststatecode where sno=@sno");
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@statename", statename);
                cmd.Parameters.Add("@statecode", statecode);
                cmd.Parameters.Add("@createdby", UserID);
                cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                cmd.Parameters.Add("@ecode", ecode);
                cmd.Parameters.Add("@gststatecode", gststatecode);
                vdm.Update(cmd);
                string response = GetJson("State Details Successfully Modified");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class statedetails
    {
        public string sno { get; set; }
        public string statename { get; set; }
        public string statecode { get; set; }
        public string gststatecode { get; set; }
        public string ecode { get; set; }
    }
    private void get_state_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, statename, createdby, createdon, statecode,ecode,gststatecode FROM  state_master");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<statedetails> statedetails = new List<statedetails>();
            foreach (DataRow dr in routes.Rows)
            {
                statedetails obj = new statedetails();
                obj.sno = dr["sno"].ToString();
                obj.statename = dr["statename"].ToString();
                obj.statecode = dr["statecode"].ToString();
                obj.ecode = dr["ecode"].ToString();
                obj.gststatecode = dr["gststatecode"].ToString();
                statedetails.Add(obj);
            }
            string response = GetJson(statedetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_packing_material_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("Select cpm.sno, cpm.productid, cpm.ob, cpm.received_film, cpm.total, cpm.consumption_film, cpm.remarks, cpm.wastage_film, cpm.production, cpm.approveproduction, cpm.entry_by, cpm.branchid, cpm.doe, pm.productname, bi.branchname, cpm.qty_ltr from packing_entry cpm INNER JOIN productmaster pm ON pm.sno = cpm.productid INNER JOIN branch_info bi on bi.sno = cpm.branchid where (cpm.branchid=@branchid) AND (cpm.doe between @d1 and @d2) AND (cpm.section='curd') order by cpm.sno desc");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-2));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<chemical> chemdetails = new List<chemical>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                chemical chmdetails = new chemical();
                chmdetails.sno = dr["sno"].ToString();
                chmdetails.productid = dr["productid"].ToString();
                chmdetails.ob = dr["ob"].ToString();
                chmdetails.recived = dr["received_film"].ToString();
                chmdetails.total = dr["total"].ToString();
                chmdetails.consumption = dr["consumption_film"].ToString();
                double total = Convert.ToDouble(dr["total"].ToString());
                double cons = Convert.ToDouble(dr["consumption_film"].ToString());
                double closing = total - cons;
                close = closing.ToString();
                chmdetails.cb = close;
                chmdetails.doe = dr["doe"].ToString();
                chmdetails.remarks = dr["remarks"].ToString();
                chmdetails.branchname = dr["branchname"].ToString();
                chmdetails.productname = dr["productname"].ToString();
                chmdetails.wastage = dr["wastage_film"].ToString();
                chmdetails.production = dr["production"].ToString();
                chmdetails.aproveproduction = dr["approveproduction"].ToString();
                chmdetails.qty_ltr = dr["qty_ltr"].ToString();
                chemdetails.Add(chmdetails);
            }
            string response = GetJson(chemdetails);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_packing_material_click(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            curdpacking obj = js.Deserialize<curdpacking>(title1);
            string btnvalue = obj.btnvalue;
            string remarks = obj.remarks;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            // string pqty = obj.pqty;
            if (btnvalue == "Save")
            {
                foreach (curdpackingdetails o in obj.curd_packing_details)
                {
                    double quantity = 0;
                    cmd = new SqlCommand("select quantity from productmonitar where productid=@pid");
                    cmd.Parameters.Add("@pid", o.productid);
                    DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                    if (dtroutes.Rows.Count > 0)
                    {
                        quantity = Convert.ToDouble(dtroutes.Rows[0]["quantity"].ToString());
                    }
                    double reciveqty = Convert.ToDouble(o.recive_qty);
                    double consumption = Convert.ToDouble(o.consumption);
                    double total = quantity + reciveqty;
                    double cb = total - consumption;
                    cmd = new SqlCommand("insert into packing_entry (productid, ob, received_film,  consumption_film, production, approveproduction, wastage_film, remarks, entry_by, branchid, doe, total, cb, section,qty_ltr) values  (@productid, @ob, @recived, @consumption, @production, @aproduction, @wastage,@remarks, @UserID, @BranchID, @doe, @total, @cb, 'Curd',@qty_ltr)");
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@ob", quantity);
                    cmd.Parameters.Add("@recived", o.recive_qty);
                    cmd.Parameters.Add("@total", total);
                    cmd.Parameters.Add("@consumption", consumption);
                    cmd.Parameters.Add("@cb", cb);
                    cmd.Parameters.Add("@production", o.production);
                    cmd.Parameters.Add("@aproduction", o.aproduction);
                    cmd.Parameters.Add("@wastage", o.wastage);
                    cmd.Parameters.Add("@BranchID", branchid);
                    cmd.Parameters.Add("@UserID", UserID);
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@qty_ltr", o.recivedqtymilk);
                    vdm.insert(cmd);
                    string msg = "packing details added successfully";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                foreach (curdpackingdetails o in obj.curd_packing_details)
                {
                    double quantity = 0;
                    string sno = obj.sno;
                    if (sno != "" || sno != null)
                    {
                        cmd = new SqlCommand("select quantity from productmonitar where productid=@pid");
                        cmd.Parameters.Add("@pid", o.productid);
                        DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                        if (dtroutes.Rows.Count > 0)
                        {
                            quantity = Convert.ToDouble(dtroutes.Rows[0]["quantity"].ToString());
                        }
                        double reciveqty = Convert.ToDouble(o.recive_qty);
                        double consumption = Convert.ToDouble(o.consumption);
                        double total = quantity + reciveqty;
                        double cb = total - consumption;
                        cmd = new SqlCommand("UPDATE packing_entry SET  received_film=@recived,  consumption_film=@consumption, production=@production, approveproduction=@aproduction, wastage_film=@wastage, remarks=@remarks,  doe=@doe, total=@total, cb=@cb,qty_ltr=@qty_ltr where sno=@sno and branchid=@BranchID");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@recived", o.recive_qty);
                        cmd.Parameters.Add("@total", total);
                        cmd.Parameters.Add("@consumption", consumption);
                        cmd.Parameters.Add("@cb", cb);
                        cmd.Parameters.Add("@production", o.production);
                        cmd.Parameters.Add("@aproduction", o.aproduction);
                        cmd.Parameters.Add("@wastage", o.wastage);
                        cmd.Parameters.Add("@BranchID", branchid);
                        cmd.Parameters.Add("@doe", dtdate);
                        cmd.Parameters.Add("@remarks", remarks);
                        cmd.Parameters.Add("@qty_ltr", o.recivedqtymilk);
                        cmd.Parameters.Add("@sno", sno);
                        vdm.Update(cmd);
                        string msg = "Curd Packing details modified successfully";
                        string response = GetJson(msg);
                        context.Response.Write(response);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void btn_getdcdetails_Click(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string fdate = context.Request["fromdate"];
        string tdate = context.Request["todate"];
        DateTime fromdate = Convert.ToDateTime(fdate);
        DateTime todate = Convert.ToDateTime(tdate);
        List<Dispathentrydetails> dispdetails = new List<Dispathentrydetails>();
        string BranchType = context.Session["BranchType"].ToString();
        if (BranchType == "Plant")
        {
            cmd = new SqlCommand("SELECT despatch_entry.sno AS TransactionNo, despatch_entry.invoiceno, despatch_entry.dc_no AS DCNo, CONVERT(VARCHAR(10), despatch_entry.doe, 103) AS Date, vendors.vendorname AS VendorName, despatch_entry.vehciecleno AS VehicleNo, despatch_entry.chemist AS Chemist,despatch_entry.remarks AS Remarks FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE (despatch_entry.doe BETWEEN @d1 AND @d2) AND (branchmapping.superbranch = @BranchID) AND (despatch_entry.trans_type=@Transtype)");
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(todate));
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@Transtype", "In");
        }
        else
        {
            cmd = new SqlCommand("SELECT despatch_entry.sno as TransactionNo, despatch_entry.invoiceno, despatch_entry.dc_no as DCNo, CONVERT(VARCHAR(10), despatch_entry.doe, 103) AS Date, vendors.vendorname as VendorName, despatch_entry.vehciecleno as VehicleNo, despatch_entry.chemist as Chemist,despatch_entry.remarks as Remarks FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno WHERE  (despatch_entry.branchid = @BranchID) AND (despatch_entry.doe BETWEEN @d1 AND @d2) AND (despatch_entry.trans_type=@Transtype)");
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(todate));
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@Transtype", "In");
        }
        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
        if (dtDispatch.Rows.Count > 0)
        {
            foreach (DataRow dr in dtDispatch.Rows)
            {
                Dispathentrydetails dcdetails = new Dispathentrydetails();
                dcdetails.sno = dr["TransactionNo"].ToString();
                dcdetails.dcno = dr["DCNo"].ToString();
                dcdetails.date = dr["Date"].ToString();
                dcdetails.sectionid = dr["VendorName"].ToString();
                dcdetails.vehicalno = dr["VehicleNo"].ToString();
                dcdetails.Chemist = dr["Chemist"].ToString();
                dcdetails.Remarks = dr["remarks"].ToString();
                dcdetails.invoiceno = dr["invoiceno"].ToString();
                dispdetails.Add(dcdetails);
            }
            string response = GetJson(dispdetails);
            context.Response.Write(response);
        }
    }
    private void btn_getrefnowisedcdetails_Click(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string BranchType = context.Session["BranchType"].ToString();
        string refno = context.Request["refno"];
        List<Dispathentrydetails> dispdetails = new List<Dispathentrydetails>();
        if (BranchType == "Plant")
        {
            //cmd = new SqlCommand("SELECT despatch_sub.cellname AS CellName, despatch_sub.milktype AS MilkType, despatch_sub.fat AS FAT, despatch_sub.snf AS SNF, despatch_sub.qty_ltr AS QtyLtr, despatch_sub.qty_kgs AS QtyKgs, despatch_sub.percentageon AS PercentageOn, despatch_sub.clr AS CLR, despatch_sub.cob1 AS COB, despatch_sub.hs AS HS, despatch_sub.phosps1 AS Phosps, despatch_sub.mbrt AS MBRT, despatch_sub.alcohol AS Alcohol, despatch_sub.temp AS TEMP, vendors.vendorname, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no,vendors.kms,vendors.expectedtime FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (despatch_entry.sno = @RefDcNo) AND (branchmapping.superbranch = @BranchID)");
            cmd = new SqlCommand("SELECT  despatch_entry.cc_id,despatch_entry.dctype,despatch_entry.dc_no AS pdcno, despatch_entry.remarks,state_master.statecode, vendors.mobno,vendors.companycode, CONVERT(VARCHAR(10), despatch_entry.doe, 108) AS time, vendors.email, despatch_sub.cellname AS CellName, despatch_sub.sealno AS SealNo, despatch_sub.milktype AS MilkType, despatch_sub.igst AS IGST, despatch_sub.cgst AS CGST, despatch_sub.sgst AS SGST, despatch_sub.fat AS FAT, despatch_sub.ot AS OT, despatch_sub.snf AS SNF, despatch_sub.qty_ltr AS QtyLtr, despatch_sub.qty_kgs AS QtyKgs, despatch_sub.percentageon AS PercentageOn, despatch_sub.clr AS CLR, despatch_sub.cob1 AS COB, despatch_sub.hs AS HS, despatch_sub.phosps1 AS Phosps, despatch_sub.mbrt AS MBRT, despatch_sub.alcohol AS Alcohol, despatch_sub.temp AS TEMP, vendors.vendorname, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no,  despatch_entry.salestype, vendors.kms, vendors.expectedtime, branch_info.tinno, branch_info.branchcode, branch_info.cstno, branch_info.mitno, vendors.gstinno, vendors.address, state_master.gststatecode, state_master.statename AS fromstate, despatch_entry.invoiceno FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch INNER JOIN branch_info ON vendors.sno = branch_info.venorid LEFT OUTER JOIN state_master ON vendors.state = state_master.sno WHERE (despatch_entry.sno = @RefDcNo) AND (branchmapping.superbranch = @BranchID) AND (despatch_entry.trans_type = @Transtype)");
            cmd.Parameters.Add("@RefDcNo", refno);
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@Transtype", "In");
        }
        else
        {
            //cmd = new SqlCommand("SELECT despatch_sub.cellname as CellName, despatch_sub.milktype as MilkType, despatch_sub.fat as FAT,despatch_sub.snf as SNF, despatch_sub.qty_ltr as QtyLtr,despatch_sub.qty_kgs as QtyKgs, despatch_sub.percentageon as PercentageOn,despatch_sub.clr as CLR, despatch_sub.cob1 as COB, despatch_sub.hs as HS, despatch_sub.phosps1 as Phosps,despatch_sub.mbrt as MBRT, despatch_sub.alcohol as Alcohol, despatch_sub.temp as TEMP, vendors.vendorname, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no,vendors.kms,vendors.expectedtime FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno WHERE (despatch_entry.sno = @RefDcNo) AND (despatch_entry.branchid = @BranchID)");
            cmd = new SqlCommand("SELECT despatch_entry.cc_id,despatch_entry.dctype,despatch_entry.dc_no AS pdcno, despatch_entry.remarks,state_master.statecode,  vendors.mobno,vendors.companycode, CONVERT(VARCHAR(10), despatch_entry.doe, 108) AS time, vendors.email, despatch_sub.cellname AS CellName, despatch_sub.sealno AS SealNo, despatch_sub.igst AS IGST, despatch_sub.cgst AS CGST, despatch_sub.sgst AS SGST, despatch_sub.milktype AS MilkType, despatch_sub.fat AS FAT, despatch_sub.ot AS OT, despatch_sub.snf AS SNF, despatch_sub.qty_ltr AS QtyLtr, despatch_sub.qty_kgs AS QtyKgs, despatch_sub.percentageon AS PercentageOn, despatch_sub.clr AS CLR, despatch_sub.cob1 AS COB, despatch_sub.hs AS HS, despatch_sub.phosps1 AS Phosps, despatch_sub.mbrt AS MBRT, despatch_sub.alcohol AS Alcohol, despatch_sub.temp AS TEMP, vendors.vendorname, vendors.address, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no, despatch_entry.salestype, vendors.kms, vendors.expectedtime, branch_info.tinno, branch_info.cstno, branch_info.mitno, branch_info.branchcode,state_master.gststatecode, state_master.statename AS fromstate, vendors.gstinno, despatch_entry.invoiceno FROM  despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN branch_info ON vendors.sno = branch_info.venorid LEFT OUTER JOIN state_master ON vendors.state = state_master.sno WHERE  (despatch_entry.sno = @RefDcNo) AND (despatch_entry.trans_type = @Transtype) AND (despatch_entry.branchid = @BranchID)");
            cmd.Parameters.Add("@RefDcNo", refno);
            cmd.Parameters.Add("@BranchID", BranchID);
            cmd.Parameters.Add("@Transtype", "In");
        }
        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT  vendors.sno, vendors.vendorname, vendors.address, vendors.companycode, vendors.mobno, vendors.email,vendors.gstinno, vendors.regtype, vendors.state,state_master.statename, state_master.gststatecode FROM  vendors LEFT OUTER JOIN state_master ON vendors.state = state_master.sno");
        DataTable dttobranches = vdm.SelectQuery(cmd).Tables[0];
        string titlename = context.Session["TitleName"].ToString();
        string year = "17-18";
        DateTime fromdate = SalesDBManager.GetTime(vdm.conn);
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        if (dtDispatch.Rows.Count > 0)
        {
            DataView view1 = new DataView(dtDispatch);
            DataTable dtmain = view1.ToTable(true, "sno", "pdcno", "statecode", "dctype", "mobno", "email", "dc_no", "remarks", "address", "companycode", "time", "vehciecleno", "doe", "chemist", "vendorname", "kms", "expectedtime", "tinno", "branchcode", "cstno", "mitno", "salestype", "fromstate", "gstinno", "gststatecode", "invoiceno");
            DataTable dtsub = view1.ToTable(true, "cc_id", "CellName", "MilkType", "QtyKgs", "QtyLtr", "FAT", "SNF", "CLR", "COB", "OT", "HS", "Phosps", "Alcohol", "TEMP", "MBRT", "SealNo");
            List<get_DispathDetails> get_despdetails = new List<get_DispathDetails>();
            List<Dispathentrydetails> disp_lst = new List<Dispathentrydetails>();
            List<Dispathsubdetails> disp_sub_list = new List<Dispathsubdetails>();

            foreach (DataRow dr in dtmain.Rows)
            {
                Dispathentrydetails getdespdetails = new Dispathentrydetails();
                getdespdetails.sno = refno;
                string branchcode = dr["branchcode"].ToString();
                string statecode = dr["branchcode"].ToString();
                string dctype = dr["dctype"].ToString();
                string pdcno = dr["pdcno"].ToString();
                if (dctype == "1")
                {
                    dctype = "ST";
                }
                else
                {
                    dctype = "E";
                }
                DateTime dt_st = Convert.ToDateTime(dr["doe"].ToString());
                int currentyear = dt_st.Year;
                int nextyear = dt_st.Year + 1;
                int currntyearnum = 0;
                int nextyearnum = 0;
                if (dt_st.Month > 3)
                {
                    string apr = "4/1/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                    currntyearnum = currentyear;
                    nextyearnum = nextyear;
                }
                if (dt_st.Month <= 3)
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                    currntyearnum = currentyear - 1;
                    nextyearnum = nextyear - 1;
                }
                string newreceipt = "0";
                long countdc = 0;
                long.TryParse(dr["pdcno"].ToString(), out countdc);
                if (countdc < 10)
                {
                    newreceipt = "0000" + countdc;
                }
                if (countdc >= 10 && countdc <= 99)
                {
                    newreceipt = "000" + countdc;
                }
                if (countdc >= 99 && countdc <= 999)
                {
                    newreceipt = "00" + countdc;
                }
                if (countdc >= 999 && countdc <= 9999)
                {
                    newreceipt = "0" + countdc;
                }
                if (countdc >= 9999)
                {
                    newreceipt = "" + countdc;
                }
                string dcno = statecode + "/" + "" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + dctype;
                string dcnos = dcno + "/" + newreceipt + "";
                getdespdetails.branchcode = statecode;
                getdespdetails.dcno = dcnos;
                getdespdetails.salesinvoiceno = dr["invoiceno"].ToString();
                getdespdetails.vehicalno = dr["vehciecleno"].ToString();
                getdespdetails.date = ((DateTime)dr["doe"]).ToString("dd-MM-yyyy"); //dr["doe"].ToString();
                getdespdetails.Chemist = dr["chemist"].ToString();
                getdespdetails.sectionid = dr["vendorname"].ToString();
                getdespdetails.kms = dr["kms"].ToString();
                getdespdetails.expectedtime = dr["expectedtime"].ToString();
                getdespdetails.fromstate = dr["fromstate"].ToString();
                getdespdetails.gstinno = dr["gstinno"].ToString();
                getdespdetails.gststatecode = dr["gststatecode"].ToString();
                getdespdetails.frmcompanycode = dr["companycode"].ToString();
                getdespdetails.remarks = dr["remarks"].ToString();
                string CCODE = dr["companycode"].ToString();
                if (CCODE == "1")
                {
                    getdespdetails.companyname = "For Sri Vyshnavi Dairy Specialities Pvt Ltd";
                    getdespdetails.jurisdiction = "Our Jurisdiction of appropriate court is chennai";
                }
                if (CCODE == "2")
                {
                    getdespdetails.companyname = "For Sri Vyshnavi Dairy Pvt Ltd";
                }
                if (CCODE == "3")
                {
                    getdespdetails.companyname = "For Sri Vyshnavi Foods Pvt Ltd";
                }
                getdespdetails.dctime = dr["time"].ToString();
                string tostate = dr["salestype"].ToString();
                string todestinationid = "";
                string desitnation = "";
                if (tostate == "SVDS PUNABAKA")
                {
                    todestinationid = "90";
                    desitnation = " Sri Vyshnavi Dairy Specialities (P) Ltd ";
                }
                if (tostate == "SVF WYRA")
                {
                    todestinationid = "32";
                    desitnation = " Sri Vyshnavi Foods (P) Ltd ";
                }
                if (tostate == "KUPPAM")
                {
                    todestinationid = "89";
                    desitnation = " Sri Vyshnavi Dairy Specialities (P) Ltd, Kuppam ";
                }
                if (tostate == "SANGAM")
                {
                    todestinationid = "30";
                    desitnation = " Sangam Dairy ";
                }
                if (tostate == "NVL DAIRY")
                {
                    todestinationid = "35";
                    desitnation = " Nvl Dairy ";
                }
                if (tostate == "HYDERABAD PLANT")
                {
                    todestinationid = "114";
                    desitnation = "Sri Vyshnavi Foods Pvt Ltd.";
                }
                getdespdetails.desitnation = desitnation;
                foreach (DataRow drr in dttobranches.Select("sno='" + todestinationid + "'"))
                {
                    getdespdetails.tovendorname = drr["vendorname"].ToString();
                    getdespdetails.tostatename = drr["statename"].ToString();
                    getdespdetails.togstnno = drr["gstinno"].ToString();
                    getdespdetails.togststatecode = drr["gststatecode"].ToString();
                    getdespdetails.toaddress = drr["address"].ToString();
                    getdespdetails.tocompanycode = drr["companycode"].ToString();
                    getdespdetails.email = drr["email"].ToString();
                    getdespdetails.mobno = drr["mobno"].ToString();
                }
                getdespdetails.titlename = titlename;
                getdespdetails.address = dr["address"].ToString();
                disp_lst.Add(getdespdetails);
            }
            foreach (DataRow dr in dtsub.Rows)
            {
                Dispathsubdetails getroutes = new Dispathsubdetails();
                getroutes.cellname = dr["CellName"].ToString();
                getroutes.milktype = dr["MilkType"].ToString();
                string milktype = dr["MilkType"].ToString();
                string hsncode = "";
                if (milktype == "Cow")
                {
                    hsncode = "04012000";
                }
                if (milktype == "Buffalo")
                {
                    hsncode = "04014000";
                }
                if (milktype == "Skim")
                {
                    hsncode = "04011000";
                }
                if (milktype == "Condensed")
                {
                    hsncode = "04029920";
                }
                getroutes.hsncode = hsncode;
                getroutes.qtykgs = dr["QtyKgs"].ToString();
                double qtykgs = Convert.ToDouble(dr["QtyKgs"].ToString());
                getroutes.qtyltr = dr["QtyLtr"].ToString();
                double qtyltrs = Convert.ToDouble(dr["QtyLtr"].ToString());
                getroutes.fat = dr["FAT"].ToString();
                double fat = Convert.ToDouble(dr["FAT"].ToString());
                getroutes.snf = dr["SNF"].ToString();
                double snf = Convert.ToDouble(dr["SNF"].ToString());
                getroutes.clr = dr["CLR"].ToString();
                double clr = Convert.ToDouble(dr["CLR"].ToString());
                getroutes.cob1 = dr["COB"].ToString();
                getroutes.ot = dr["OT"].ToString();
                getroutes.hs = dr["HS"].ToString();
                getroutes.phosps1 = dr["Phosps"].ToString();
                getroutes.alcohol = dr["Alcohol"].ToString();
                getroutes.temp = dr["TEMP"].ToString();
                getroutes.mbrt = dr["MBRT"].ToString();
                getroutes.sealno = dr["SealNo"].ToString();
                string ccid = dr["cc_id"].ToString();
                cmd = new SqlCommand("SELECT vendor_subtable.milktype, vendor_subtable.rate_on, vendor_subtable.calc_on, vendor_subtable.cost, vendor_subtable.overheadon,vendor_subtable.overheadcost, vendor_subtable.m_std_snf,vendor_subtable.p_std_snf, vendor_subtable.snfplus_on, vendor_subtable.m_snfpluscost,vendor_subtable.p_snfpluscost, vendor_subtable.transport_on, vendor_subtable.transport, vendor_subtable.transportcost,vendor_subtable.fatplus_on,vendor_subtable.m_fatpluscost,vendor_subtable.p_fatpluscost,vendor_subtable.m_std_fat,vendor_subtable.p_std_fat FROM  vendors INNER JOIN vendor_subtable ON vendors.sno = vendor_subtable.vendor_refno WHERE (vendors.sno = @VendorSno) and (vendor_subtable.milktype=@MilkType)");
                cmd.Parameters.Add("@MilkType", milktype);
                cmd.Parameters.Add("@VendorSno", ccid);
                DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                if (dtVendorlogs.Rows.Count > 0)
                {
                    foreach (DataRow dtv in dtVendorlogs.Rows)
                    {
                        string rateon = dtv["rate_on"].ToString();
                        getroutes.rateon = rateon;
                        string calucationon = dtv["calc_on"].ToString();
                        getroutes.calucationon = calucationon;
                        string costs = dtv["cost"].ToString();
                        getroutes.costs = costs;
                        if (milktype == "Buffalo")
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            int i = 1;
                            foreach (DataRow dtvs in dtVendorlogs.Rows)
                            {
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = dtvs["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dtvs["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dtvs["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = dtvs["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dtvs["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dtvs["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dtvs["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dtvs["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dtvs["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dtvs["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dtvs["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                            }
                        }
                        else if (milktype == "Cow")
                        {
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = drcc["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    MValue = cost * qty_kgs;
                                }
                                else
                                {
                                    MValue = tstotal * cost * qty_ltr;
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }
                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                            }
                        }
                        else if (milktype == "Skim")
                        {
                            //double milkvalue = Convert.ToDouble(qtyltrs) * Convert.ToDouble(costs);
                            //getroutes.milkvalue = milkvalue.ToString();
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                string CalOn = calucationon;
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {

                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = cost * qty_kgs;
                                    }
                                }
                                else
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = tstotal * cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = tstotal * cost * qty_kgs;
                                    }
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                            }
                        }
                        else if (milktype == "Condensed")
                        {
                            //double milkvalue = Convert.ToDouble(qtyltrs) * Convert.ToDouble(costs);
                            //getroutes.milkvalue = milkvalue.ToString();
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                string CalOn = calucationon;
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {

                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = cost * qty_kgs;
                                    }
                                }
                                else
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = tstotal * cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = tstotal * cost * qty_kgs;
                                    }
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                            }
                        }
                    }
                    disp_sub_list.Add(getroutes);
                }
            }
            get_DispathDetails get_desp = new get_DispathDetails();
            get_desp.Dispathentrydetails = disp_lst;
            get_desp.Dispathsubdetails = disp_sub_list;
            get_despdetails.Add(get_desp);
            string response = GetJson(get_despdetails);
            context.Response.Write(response);
        }
    }
    private void btn_getdcdetails_out_Click(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string fdate = context.Request["fromdate"];
            string tdate = context.Request["todate"];
            DateTime fromdate = Convert.ToDateTime(fdate);
            DateTime todate = Convert.ToDateTime(tdate);
            List<Dispathentrydetails> dispdetails = new List<Dispathentrydetails>();
            cmd = new SqlCommand("SELECT  milktransactions.transtype, milktransactions.invoiceno, milktransactions.dcno, milktransactions.vehicleno, milktransactions.sectionid, vendors.vendorname, milktransactions.chemist,  milktransactions.remarks, milktransactions.doe FROM   milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE (milktransactions.transtype = 'Out') AND (milktransactions.doe BETWEEN @d1 AND @d2) AND (milktransactions.branchid = @branchid) GROUP BY milktransactions.transtype, milktransactions.dcno, milktransactions.vehicleno, milktransactions.sectionid, vendors.vendorname, milktransactions.chemist, milktransactions.remarks, milktransactions.doe,milktransactions.invoiceno");
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(todate));
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
            if (dtDispatch.Rows.Count > 0)
            {
                foreach (DataRow dr in dtDispatch.Rows)
                {
                    Dispathentrydetails dcdetails = new Dispathentrydetails();
                    //dcdetails.sno = dr["sno"].ToString();
                    dcdetails.dcno = dr["dcno"].ToString();
                    dcdetails.date = dr["doe"].ToString();
                    dcdetails.sectionid = dr["VendorName"].ToString();
                    dcdetails.vehicalno = dr["vehicleno"].ToString();
                    dcdetails.Chemist = dr["chemist"].ToString();
                    dcdetails.Remarks = dr["remarks"].ToString();
                    dcdetails.invoiceno = dr["invoiceno"].ToString();
                    dispdetails.Add(dcdetails);
                }
                string response = GetJson(dispdetails);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    private void btn_getrefnowisedcdetails_out_Click(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        string branchcodes = context.Session["branchcode"].ToString();
        string refno = context.Request["refno"];
        string fdate = context.Request["fromdate"];
        string tdate = context.Request["todate"];
        string sinvoiceno = context.Request["invoiceno"];
        DateTime fromdates = Convert.ToDateTime(fdate);
        DateTime todates = Convert.ToDateTime(tdate);
        List<Dispathentrydetails> dispdetails = new List<Dispathentrydetails>();

        //cmd = new SqlCommand("SELECT despatch_sub.cellname AS CellName, despatch_sub.milktype AS MilkType, despatch_sub.fat AS FAT, despatch_sub.snf AS SNF, despatch_sub.qty_ltr AS QtyLtr, despatch_sub.qty_kgs AS QtyKgs, despatch_sub.percentageon AS PercentageOn, despatch_sub.clr AS CLR, despatch_sub.cob1 AS COB, despatch_sub.hs AS HS, despatch_sub.phosps1 AS Phosps, despatch_sub.mbrt AS MBRT, despatch_sub.alcohol AS Alcohol, despatch_sub.temp AS TEMP, vendors.vendorname, despatch_entry.doe, despatch_entry.chemist, despatch_entry.vehciecleno, despatch_entry.sno, despatch_entry.dc_no,vendors.kms,vendors.expectedtime FROM despatch_entry INNER JOIN vendors ON despatch_entry.cc_id = vendors.sno INNER JOIN despatch_sub ON despatch_entry.sno = despatch_sub.desp_refno INNER JOIN branchmapping ON despatch_entry.branchid = branchmapping.subbranch WHERE  (despatch_entry.sno = @RefDcNo) AND (branchmapping.superbranch = @BranchID)");
        cmd = new SqlCommand("SELECT   milktransactions.sno,CONVERT(VARCHAR(10), milktransactions.doe, 108) AS time, milktransactions.transid, milktransactions.dctype, milktransactions.dcno, milktransactions.transtype, milktransactions.sectionid, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransactions.hs, milktransactions.alcohol, milktransactions.remarks, milktransactions.chemist, milktransactions.qco, milktransactions.inwardno, milktransactions.vehicleno, milktransactions.temp, milktransactions.doe, milktransactions.operatedby, milktransactions.cellno, milktransactions.milktype, milktransactions.cob1, milktransactions.phosps1, milktransactions.mbrt, milktransactions.acidity, milktransactions.ot, state_master.statecode, milktransactions.neutralizers, milktransactions.partydcno, milktransactions.entrydate, milktransactions.status, milktransactions.transportvalue, vendors.companycode, vendors.vendorname AS tovendorname, vendors.email AS toemail, vendors.mobno AS tomobileno, vendors.address AS toaddress, vendors.gstinno AS togstinno, state_master.statename AS tostatename, state_master.gststatecode AS togsttatecode, milktransactions.branchid AS frombranch, branch_info.branchcode,milktransactions.invoiceno FROM    milktransactions INNER JOIN vendors ON milktransactions.sectionid = vendors.sno INNER JOIN state_master ON vendors.state = state_master.sno INNER JOIN branch_info ON milktransactions.branchid = branch_info.sno WHERE (milktransactions.dcno = @refno) AND (milktransactions.doe BETWEEN @d1 AND @d2) AND (milktransactions.branchid = @branchid) AND (milktransactions.invoiceno = @sinvoiceno)");
        cmd.Parameters.Add("@refno", refno);
        cmd.Parameters.Add("@sinvoiceno", sinvoiceno);
        cmd.Parameters.Add("@d1", GetLowDate(fromdates));
        cmd.Parameters.Add("@d2", GetHighDate(todates));
        cmd.Parameters.Add("@BranchID", BranchID);

        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
        cmd = new SqlCommand("SELECT  vendors.sno, vendors.vendorname, vendors.address,vendors.companycode, vendors.mobno, vendors.email,vendors.gstinno, vendors.regtype, vendors.state,state_master.statename, state_master.gststatecode,state_master.statecode FROM  vendors LEFT OUTER JOIN state_master ON vendors.state = state_master.sno");
        DataTable dttobranches = vdm.SelectQuery(cmd).Tables[0];

        string titlename = context.Session["TitleName"].ToString();
        string year = "17-18";
        DateTime fromdate = SalesDBManager.GetTime(vdm.conn);
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        if (dtDispatch.Rows.Count > 0)
        {
            DataView view1 = new DataView(dtDispatch);
            DataTable dtmain = view1.ToTable(true, "sno", "dctype", "dcno", "time", "milktype", "sectionid", "vehicleno", "doe", "companycode", "chemist", "tovendorname", "toemail", "tomobileno", "toaddress", "togstinno", "tostatename", "togsttatecode", "frombranch", "branchcode", "remarks", "invoiceno");
            DataTable dtsub = view1.ToTable(true, "sectionid", "cellno", "milktype", "qty_kgs", "qty_ltr", "fat", "snf", "clr", "cob1", "ot", "hs", "Phosps1", "Alcohol", "temp", "sno", "remarks");
            List<get_DispathDetails> get_despdetails = new List<get_DispathDetails>();
            List<Dispathentrydetails> disp_lst = new List<Dispathentrydetails>();
            List<Dispathsubdetails> disp_sub_list = new List<Dispathsubdetails>();
            string dfromgstcode = "";
            string dtogstcode = "";
            string dfromcompanycode = "";
            string dtocompanycode = "";
            foreach (DataRow dr in dtmain.Rows)
            {
                Dispathentrydetails getdespdetails = new Dispathentrydetails();
                getdespdetails.sno = refno;
                string branchcode = dr["branchcode"].ToString();
                string statecode = "";
                string dctype = dr["dctype"].ToString();
                if (dctype == "1")
                {
                    dctype = "ST";
                }
                else
                {
                    string MilkType = dr["MilkType"].ToString();
                    if (MilkType == "Condensed" || MilkType == "Skim")
                    {
                        dctype = "T";
                    }
                    else
                    {
                        dctype = "E";
                    }
                }
                DateTime dt_st = Convert.ToDateTime(dr["doe"].ToString());
                int currentyear = dt_st.Year;
                int nextyear = dt_st.Year + 1;
                int currntyearnum = 0;
                int nextyearnum = 0;
                if (dt_st.Month > 3)
                {
                    string apr = "4/1/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                    currntyearnum = currentyear;
                    nextyearnum = nextyear;
                }
                if (dt_st.Month <= 3)
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                    currntyearnum = currentyear - 1;
                    nextyearnum = nextyear - 1;
                }
                string branchid = dr["frombranch"].ToString();
                string vendorid = "";
                if (branchid == "1")
                {
                    vendorid = "90";
                }
                if (branchid == "22")
                {
                    vendorid = "89";
                }
                if (branchid == "26")
                {
                    vendorid = "32";
                }
                if (BranchID == "115")
                {
                    vendorid = "114";
                }
                foreach (DataRow drr in dttobranches.Select("sno='" + vendorid + "'"))
                {
                    getdespdetails.sectionid = drr["vendorname"].ToString();
                    getdespdetails.fromstate = drr["statename"].ToString();
                    getdespdetails.gstinno = drr["gstinno"].ToString();
                    getdespdetails.gststatecode = drr["gststatecode"].ToString();
                    getdespdetails.frmcompanycode = drr["companycode"].ToString();
                    getdespdetails.address = drr["address"].ToString();
                    dfromgstcode = drr["gststatecode"].ToString();
                    dfromcompanycode = drr["companycode"].ToString();
                    statecode = drr["statecode"].ToString();
                }
                string newreceipt = "0";
                long countdc = 0;
                long.TryParse(dr["invoiceno"].ToString(), out countdc);
                if (countdc < 10)
                {
                    newreceipt = "0000" + countdc;
                }
                if (countdc >= 10 && countdc <= 99)
                {
                    newreceipt = "000" + countdc;
                }
                if (countdc >= 99 && countdc <= 999)
                {
                    newreceipt = "00" + countdc;
                }
                if (countdc >= 999 && countdc <= 9999)
                {
                    newreceipt = "0" + countdc;
                }
                if (countdc >= 9999)
                {
                    newreceipt = "" + countdc;
                }
                string dcno = branchcodes + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "" + dctype + "/" + newreceipt;
                getdespdetails.dcno = dcno;
                getdespdetails.salesinvoiceno = dr["invoiceno"].ToString();
                getdespdetails.vehicalno = dr["vehicleno"].ToString();
                getdespdetails.date = ((DateTime)dr["doe"]).ToString("dd-MM-yyyy"); //dr["doe"].ToString();
                getdespdetails.Chemist = dr["chemist"].ToString();
                getdespdetails.tovendorname = dr["tovendorname"].ToString();
                getdespdetails.expectedtime = dr["time"].ToString();
                getdespdetails.tostatename = dr["tostatename"].ToString();
                getdespdetails.togstnno = dr["togstinno"].ToString();
                dtogstcode = dr["togsttatecode"].ToString();
                getdespdetails.togststatecode = dr["togsttatecode"].ToString();
                getdespdetails.toaddress = dr["toaddress"].ToString();
                getdespdetails.tocompanycode = dr["companycode"].ToString();
                dtocompanycode = dr["companycode"].ToString();
                getdespdetails.email = dr["toemail"].ToString();
                getdespdetails.mobno = dr["tomobileno"].ToString();
                getdespdetails.remarks = dr["remarks"].ToString();
                getdespdetails.invoiceno = dr["invoiceno"].ToString();

                getdespdetails.titlename = context.Session["TitleName"].ToString();
                disp_lst.Add(getdespdetails);
            }
            foreach (DataRow dr in dtsub.Rows)
            {
                Dispathsubdetails getroutes = new Dispathsubdetails();
                getroutes.cellname = dr["cellno"].ToString();
                getroutes.milktype = dr["milktype"].ToString();
                string milktype = dr["milktype"].ToString();
                string hsncode = "";
                if (milktype == "Cow")
                {
                    hsncode = "04012000";
                }
                if (milktype == "Buffalo")
                {
                    hsncode = "04014000";
                }
                if (milktype == "Skim")
                {
                    hsncode = "04011000";
                }
                if (milktype == "Condensed")
                {
                    hsncode = "04029920";
                }
                getroutes.hsncode = hsncode;
                getroutes.dfromgstcode = dfromgstcode;
                getroutes.dtogstcode = dtogstcode;
                getroutes.dfromcompanycode = dfromcompanycode;
                getroutes.dtocompanycode = dtocompanycode;
                getroutes.qtykgs = dr["qty_kgs"].ToString();
                double qtykgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                getroutes.qtyltr = dr["qty_ltr"].ToString();
                double qtyltrs = Convert.ToDouble(dr["qty_ltr"].ToString());
                getroutes.fat = dr["fat"].ToString();
                double fat = Convert.ToDouble(dr["fat"].ToString());
                getroutes.snf = dr["snf"].ToString();
                double snf = Convert.ToDouble(dr["snf"].ToString());
                getroutes.clr = dr["clr"].ToString();
                double clr = Convert.ToDouble(dr["clr"].ToString());
                getroutes.cob1 = dr["cob1"].ToString();
                getroutes.ot = dr["ot"].ToString();
                getroutes.hs = dr["hs"].ToString();
                getroutes.phosps1 = dr["Phosps1"].ToString();
                getroutes.alcohol = dr["Alcohol"].ToString();
                getroutes.temp = dr["temp"].ToString();
                string ccid = dr["sectionid"].ToString();
                string refnos = dr["sno"].ToString();
                getroutes.remarks = dr["remarks"].ToString();
                cmd = new SqlCommand("SELECT milktransactions.dcno, milktransactions.transportvalue, milktransactions.partydcno, milktransactions.inwardno AS InwardNo, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.p_fatpluscost, milktransaction_logs.m_std_snf, milktransaction_logs.m_std_fat, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.m_fatpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname, vendors.kms, milktransactions.sno, milktransaction_logs.fatplus_on, milktransaction_logs.p_std_fat FROM  milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE   (milktransactions.transtype = 'Out') AND (milktransaction_logs.milktype = @milktype) AND (milktransactions.sno = @sno)");
                cmd.Parameters.Add("@milktype", milktype);
                cmd.Parameters.Add("@sno", refnos);
                DataTable dtVendorlogs = vdm.SelectQuery(cmd).Tables[0];
                if (dtVendorlogs.Rows.Count > 0)
                {
                    foreach (DataRow dtv in dtVendorlogs.Rows)
                    {
                        string rateon = dtv["rate_on"].ToString();
                        getroutes.rateon = rateon;
                        string calucationon = dtv["calc_on"].ToString();
                        getroutes.calucationon = calucationon;
                        string costs = dtv["cost"].ToString();
                        getroutes.costs = costs;
                        if (milktype == "Buffalo")
                        {
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            int i = 1;
                            foreach (DataRow dtvs in dtVendorlogs.Rows)
                            {
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = dtvs["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dtv["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(dtvs["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                MValue = KGFAT * cost;
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = dtvs["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(dtvs["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(dtvs["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(dtvs["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = dtvs["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(dtvs["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(dtvs["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = dtvs["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                                //
                                getroutes.kgfattsvalue = KGFAT.ToString();
                                getroutes.ohcost = OHcost.ToString();
                                getroutes.MValue = MValue.ToString();
                                getroutes.difffatsnfcost = DiffSNFCost.ToString();
                            }
                        }
                        else if (milktype == "Cow")
                        {
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    string CalOn = dtv["calc_on"].ToString();
                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    MValue = cost * qty_kgs;
                                }
                                else
                                {
                                    MValue = tstotal * cost * qty_ltr;
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                                //
                                getroutes.kgfattsvalue = tstotal.ToString();
                                getroutes.ohcost = OHcost.ToString();
                                getroutes.MValue = MValue.ToString();
                                double diffcost = DiffSNFCost + DiffFATCost;
                                getroutes.difffatsnfcost = diffcost.ToString();
                            }
                        }
                        else if (milktype == "Skim")
                        {
                            //double milkvalue = Convert.ToDouble(qtyltrs) * Convert.ToDouble(costs);
                            //getroutes.milkvalue = milkvalue.ToString();
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                string CalOn = calucationon;
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {

                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = cost * qty_kgs;
                                    }
                                }
                                else
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = tstotal * cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = tstotal * cost * qty_kgs;
                                    }
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                                //
                                getroutes.kgfattsvalue = tstotal.ToString();
                                getroutes.ohcost = OHcost.ToString();
                                getroutes.MValue = MValue.ToString();

                                double diffcost = DiffSNFCost + DiffFATCost;
                                getroutes.difffatsnfcost = diffcost.ToString();
                            }
                        }
                        else if (milktype == "Condensed")
                        {
                            //double milkvalue = Convert.ToDouble(qtyltrs) * Convert.ToDouble(costs);
                            //getroutes.milkvalue = milkvalue.ToString();
                            int i = 1;
                            double kgfattotal = 0;
                            double kgsnftotal = 0;
                            double kgstotal = 0;
                            double Ltrstotal = 0;
                            double TStotal = 0;
                            double mvaluetotal = 0;
                            double ohtotal = 0;
                            double snf9total = 0;
                            double milkvaluetotal = 0;
                            foreach (DataRow drcc in dtVendorlogs.Rows)
                            {
                                string CalOn = calucationon;
                                double qty_kgs = 0;
                                qty_kgs = qtykgs;
                                double qty_ltr = 0;
                                qty_ltr = qtyltrs;
                                double FAT = 0;
                                FAT = fat;
                                FAT = Math.Round(FAT, 2);
                                double SNF = 0;
                                SNF = snf;
                                string Rateon = drcc["rate_on"].ToString();
                                double weight = 0;
                                double KGFAT = 0;
                                double KGSNF = 0;
                                double ltrs = 0;
                                ltrs = qtyltrs;
                                Ltrstotal += ltrs;
                                double Kgs = 0;
                                Kgs = qtykgs;
                                kgstotal += Kgs;
                                double tstotal = 0;
                                tstotal = FAT + SNF;
                                if (Rateon == "TS")
                                {
                                    double TS = 0;
                                    TS = FAT + SNF;
                                    weight = (TS * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "KGFAT")
                                {
                                    weight = (FAT * Kgs) / 100;
                                    KGFAT = (FAT * Kgs) / 100;
                                    KGSNF = (SNF * Kgs) / 100;
                                }
                                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {

                                    if (CalOn == "Ltrs")
                                    {
                                        weight = ltrs;
                                        KGFAT = (FAT * ltrs) / 100;
                                        KGSNF = (SNF * ltrs) / 100;
                                    }
                                    else
                                    {
                                        weight = Kgs;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                }
                                double cost = 0;
                                double.TryParse(drcc["cost"].ToString(), out cost);
                                KGFAT = Math.Round(KGFAT, 2);
                                kgfattotal += KGFAT;
                                KGSNF = Math.Round(KGSNF, 2);
                                kgsnftotal += KGSNF;
                                double MValue = 0;
                                if (Rateon == "PerLtr" || Rateon == "PerKg")
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = cost * qty_kgs;
                                    }
                                }
                                else
                                {
                                    if (CalOn == "Ltrs")
                                    {
                                        MValue = tstotal * cost * qty_ltr;
                                    }
                                    else
                                    {
                                        MValue = tstotal * cost * qty_kgs;
                                    }
                                    MValue = MValue / 100;
                                }
                                MValue = Math.Round(MValue, 2);
                                mvaluetotal += MValue;
                                string OverheadOn = drcc["overheadon"].ToString();
                                double OHcost = 0;
                                double overheadcost = 0;
                                double.TryParse(drcc["overheadcost"].ToString(), out overheadcost);
                                if (OverheadOn == "Ltrs")
                                {
                                    OHcost = overheadcost * ltrs;
                                }
                                else
                                {
                                    OHcost = overheadcost * Kgs;
                                }
                                double MSnf = 0;
                                double.TryParse(drcc["m_std_snf"].ToString(), out MSnf);
                                double m_snfpluscost = 0;
                                double.TryParse(drcc["m_snfpluscost"].ToString(), out m_snfpluscost);
                                double DiffSNFCost = 0;
                                if (SNF < MSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    diffSNF = Math.Round(diffSNF, 2);
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                    }
                                }
                                double p_snfpluscost = 0;
                                double.TryParse(drcc["p_snfpluscost"].ToString(), out p_snfpluscost);
                                double PSnf = 0;
                                double.TryParse(drcc["p_std_snf"].ToString(), out PSnf);
                                if (SNF > PSnf)
                                {
                                    string SNFOn = drcc["snfplus_on"].ToString();
                                    double diffSNF = 0;
                                    diffSNF = SNF - MSnf;
                                    if (SNFOn == "Ltrs")
                                    {
                                        DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                    }
                                }

                                double MFat = 0;
                                double.TryParse(drcc["m_std_fat"].ToString(), out MFat);
                                double m_fatpluscost = 0;
                                double.TryParse(drcc["m_fatpluscost"].ToString(), out m_fatpluscost);
                                double DiffFATCost = 0;
                                if (FAT < MFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - MFat;
                                    diffFAT = Math.Round(diffFAT, 2);
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                    }
                                }
                                double p_fatpluscost = 0;
                                double.TryParse(drcc["p_fatpluscost"].ToString(), out p_fatpluscost);
                                double PFat = 0;
                                double.TryParse(drcc["p_std_fat"].ToString(), out PFat);
                                if (FAT > PFat)
                                {
                                    string FATOn = drcc["fatplus_on"].ToString();
                                    double diffFAT = 0;
                                    diffFAT = FAT - PFat;
                                    if (FATOn == "Ltrs")
                                    {
                                        DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                    }
                                    else
                                    {
                                        DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                    }
                                }
                                DiffFATCost = Math.Round(DiffFATCost, 2);
                                double OHandMvalue = 0;
                                OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                ohtotal += OHcost;
                                DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                snf9total += DiffSNFCost;
                                OHandMvalue = Math.Round(OHandMvalue, 2);
                                milkvaluetotal += OHandMvalue;
                                double ltrcost = OHandMvalue / ltrs;
                                ltrcost = Math.Round(ltrcost, 2);
                                getroutes.milkvalue = OHandMvalue.ToString();
                                //
                                getroutes.kgfattsvalue = tstotal.ToString();
                                getroutes.ohcost = OHcost.ToString();
                                getroutes.MValue = MValue.ToString();

                                double diffcost = DiffSNFCost + DiffFATCost;
                                getroutes.difffatsnfcost = diffcost.ToString();
                            }
                        }
                    }
                    disp_sub_list.Add(getroutes);
                }
            }
            get_DispathDetails get_desp = new get_DispathDetails();
            get_desp.Dispathentrydetails = disp_lst;
            get_desp.Dispathsubdetails = disp_sub_list;
            get_despdetails.Add(get_desp);
            string response = GetJson(get_despdetails);
            context.Response.Write(response);
        }
    }
    public class employeedetails
    {
        public string sno { get; set; }
        public string employeename { get; set; }
        public string logintime { get; set; }
        public string logouttime { get; set; }
        public string ipaddress { get; set; }
        public string devicetype { get; set; }
        public string leveltype { get; set; }
        public string loginstatus { get; set; }
        public string sessiontimeout { get; set; }

        public string indate { get; set; }
        public string intime { get; set; }
        public string outdate { get; set; }
        public string outtime { get; set; }
        public string timeinterval { get; set; }
    }
    private void get_employee_details(HttpContext context)
    {
        string BranchID = context.Session["Branch_ID"].ToString();
        cmd = new SqlCommand("SELECT  sno, empname, deptid, username, passward, emptype, branchid, leveltype, createddate, empid, loginstatus FROM   employee_erp where branchid=@branchid");
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
        List<employeedetails> emloyeeedetalis = new List<employeedetails>();
        if (dtemployee.Rows.Count > 0)
        {
            foreach (DataRow dr in dtemployee.Rows)
            {
                employeedetails details = new employeedetails();
                details.sno = dr["sno"].ToString();
                details.employeename = dr["empname"].ToString();
                details.leveltype = dr["leveltype"].ToString();
                string status = dr["loginstatus"].ToString();
                if (status == "False")
                {
                    status = "InActive";
                }
                if (status == "True")
                {
                    status = "Active";
                }
                details.loginstatus = status;
                emloyeeedetalis.Add(details);
            }
            string response = GetJson(emloyeeedetalis);
            context.Response.Write(response);
        }
    }
    private void btn_getlogininfoemployee_details(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string employeeid = context.Request["employeeid"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            string date = context.Request["date"];
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DateTime dttodate = Convert.ToDateTime(todate);
            DateTime dtdate = Convert.ToDateTime(date);
            if (employeeid == "" || employeeid == null)
            {
                //cmd = new SqlCommand("SELECT  logininfo.UserId, logininfo.UserName, logininfo.Logintime, logininfo.LogoutTime, logininfo.SessionPeriod, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid FROM   logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid)");
                //cmd = new SqlCommand("SELECT  logininfo.UserId, logininfo.UserName, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod,  logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime, logininfo.LogoutTime FROM  logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE  (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid)");
                cmd = new SqlCommand("SELECT   t1.UserId, t1.UserName, t1.devicetype, t1.IpAddress FROM  (SELECT  logininfo.UserId, logininfo.UserName, MIN(logininfo.sno) AS sno, logininfo.devicetype, logininfo.IpAddress FROM  logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE  (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) GROUP BY logininfo.UserId, logininfo.UserName, logininfo.devicetype, logininfo.IpAddress) AS t1 RIGHT OUTER JOIN (SELECT        UserId, MIN(sno) AS sno FROM            logininfo AS logininfo_1 WHERE        (Logintime BETWEEN @d1 AND @d2) GROUP BY UserId) AS t2 ON t1.sno = t2.sno WHERE  (t1.sno > 0) ORDER BY t1.sno");
                cmd.Parameters.Add("@d1", GetLowDate(dtdate));
                cmd.Parameters.Add("@d2", GetHighDate(dtdate));
                cmd.Parameters.Add("@branchid", BranchID);
            }
            else
            {
                //cmd = new SqlCommand("SELECT   logininfo.UserId, logininfo.UserName, logininfo.Logintime, logininfo.LogoutTime, logininfo.SessionPeriod, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid FROM  logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (logininfo.UserId = @userid) AND (employee_erp.branchid = @branchid)");
                //cmd = new SqlCommand("SELECT  logininfo.UserId, logininfo.UserName, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod,  logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime, logininfo.LogoutTime FROM  logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE  (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid)");
                cmd = new SqlCommand("SELECT  TOP (1) logininfo.UserId, logininfo.UserName, logininfo.Logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime AS Expr1, logininfo.LogoutTime AS Expr2 FROM    logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE  (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid) ORDER BY logininfo.LogoutTime");
                cmd.Parameters.Add("@userid", employeeid);
                cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
                cmd.Parameters.Add("@d2", GetHighDate(dttodate));
                cmd.Parameters.Add("@branchid", BranchID);
            }
            DataTable dtloginfo = vdm.SelectQuery(cmd).Tables[0];
            List<employeedetails> emloyeeedetalis = new List<employeedetails>();
            if (dtloginfo.Rows.Count > 0)
            {
                foreach (DataRow dr in dtloginfo.Rows)
                {
                    employeedetails details = new employeedetails();
                    details.sno = dr["UserId"].ToString();
                    details.employeename = dr["UserName"].ToString();
                    //details.logintime = dr["Logintime"].ToString();
                    //details.logouttime = dr["LogoutTime"].ToString();
                    //details.sessiontimeout = dr["SessionPeriod"].ToString();
                    details.ipaddress = dr["IpAddress"].ToString();
                    details.devicetype = dr["devicetype"].ToString();
                    //details.indate = dr["indate"].ToString();
                    //details.intime = dr["intime"].ToString();
                    //details.outdate = dr["outdate"].ToString();
                    //details.outtime = dr["outtime"].ToString();
                    //string Logintime = dr["Logintime"].ToString();
                    //string LogoutTime = dr["LogoutTime"].ToString();
                    //string intime = dr["intime"].ToString();
                    //string outtime = dr["outtime"].ToString();
                    //TimeSpan difference = DateTime.Parse(outtime) - DateTime.Parse(intime);
                    //double hourDiff = difference.TotalHours;
                    //double minutes = difference.TotalMinutes;
                    //details.timeinterval = Math.Round(hourDiff, 2).ToString();
                    emloyeeedetalis.Add(details);
                }
                string response = GetJson(emloyeeedetalis);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    private void get_logindetails_eachemployee(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string employeeid = context.Request["userid"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            string date = context.Request["date"];
            string session = context.Request["session"];
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DateTime dttodate = Convert.ToDateTime(todate);
            DateTime dtdate = Convert.ToDateTime(date);
            if (session == "empwise")
            {
                cmd = new SqlCommand("SELECT  logininfo.UserId, logininfo.UserName, logininfo.Logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime AS Expr1, logininfo.LogoutTime AS Expr2 FROM logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid) ORDER BY logininfo.sno");
                cmd.Parameters.Add("@userid", employeeid);
                cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
                cmd.Parameters.Add("@d2", GetHighDate(dttodate));
                cmd.Parameters.Add("@branchid", BranchID);
            }
            else
            {
                cmd = new SqlCommand("SELECT  logininfo.UserId, logininfo.UserName, logininfo.Logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime AS Expr1, logininfo.LogoutTime AS Expr2 FROM logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid) ORDER BY logininfo.sno");
                cmd.Parameters.Add("@userid", employeeid);
                cmd.Parameters.Add("@d1", GetLowDate(dtdate));
                cmd.Parameters.Add("@d2", GetHighDate(dtdate));
                cmd.Parameters.Add("@branchid", BranchID);
            }
            DataTable dtloginfo = vdm.SelectQuery(cmd).Tables[0];
            List<employeedetails> emloyeeedetalis = new List<employeedetails>();
            if (dtloginfo.Rows.Count > 0)
            {
                foreach (DataRow dr in dtloginfo.Rows)
                {
                    string dLogoutTime = dr["LogoutTime"].ToString();
                    //if (dLogoutTime != "")
                    //{
                    employeedetails details = new employeedetails();
                    details.sno = dr["UserId"].ToString();
                    details.employeename = dr["UserName"].ToString();
                    details.logintime = dr["Logintime"].ToString();
                    details.logouttime = dr["LogoutTime"].ToString();
                    details.sessiontimeout = dr["SessionPeriod"].ToString();
                    details.ipaddress = dr["IpAddress"].ToString();
                    details.devicetype = dr["devicetype"].ToString();
                    details.indate = dr["indate"].ToString();
                    details.intime = dr["intime"].ToString();
                    string LogoutTimes = dr["LogoutTime"].ToString();
                    if (LogoutTimes != "")
                    {
                        details.outdate = dr["outdate"].ToString();
                        details.outtime = dr["outtime"].ToString();
                        string Logintime = dr["Logintime"].ToString();
                        string LogoutTime = dr["LogoutTime"].ToString();
                        string intime = dr["intime"].ToString();
                        string outtime = dr["outtime"].ToString();
                        TimeSpan difference = DateTime.Parse(outtime) - DateTime.Parse(intime);
                        double hourDiff = difference.TotalHours;
                        double minutes = difference.TotalMinutes;
                        details.timeinterval = Math.Round(hourDiff, 2).ToString();
                    }
                    else
                    {
                        string t = "";
                        details.outdate = t.ToString();
                        details.outtime = t.ToString();
                        details.timeinterval = t.ToString();
                    }
                    emloyeeedetalis.Add(details);
                    //}
                }
                string response = GetJson(emloyeeedetalis);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    public class entrydetalis
    {
        public string type { get; set; }
        public string date { get; set; }
        public string mdate { get; set; }
    }
    private void get_entry_details(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  TOP (1) sno, entrydate FROM  milktransactions WHERE (branchid = @ibranchid) ORDER BY entrydate DESC");
            cmd.Parameters.Add("@ibranchid", BranchID);
            DataTable dtinward = vdm.SelectQuery(cmd).Tables[0];
            List<entrydetalis> entrydetalis = new List<entrydetalis>();
            if (dtinward.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Tanker Inward";
                string dates = dtinward.Rows[0]["entrydate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) qd.sno, qd.doe, qd.createdon FROM   qualitytesting_details AS qd INNER JOIN silomaster AS sm ON qd.siloid = sm.SiloId WHERE  (qd.branchid = @sbranchid) ORDER BY qd.doe DESC");
            cmd.Parameters.Add("@sbranchid", BranchID);
            DataTable dtsilo = vdm.SelectQuery(cmd).Tables[0];
            if (dtsilo.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Silo Wise Quality Testing";
                string dates = dtsilo.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) qd.sno, qd.doe, qd.createdon FROM  qualitytesting_details AS qd INNER JOIN batchmaster ON qd.batchid = batchmaster.batchid WHERE (qd.branchid = @bbranchid) ORDER BY qd.doe DESC");
            cmd.Parameters.Add("@bbranchid", BranchID);
            DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];
            if (dtbatch.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Batch Wise Quality Testing";
                string dates = dtbatch.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) qd.sno, qd.doe, qd.createdon, productmaster.departmentid FROM  qualitytesting_details AS qd INNER JOIN productmaster ON qd.productid = productmaster.sno WHERE (qd.branchid = @cbranchid) AND (productmaster.departmentid = 1) ORDER BY qd.doe DESC");
            cmd.Parameters.Add("@cbranchid", BranchID);
            DataTable dtcurd = vdm.SelectQuery(cmd).Tables[0];
            if (dtcurd.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Curd Section Wise Quality Testing";
                string dates = dtcurd.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) qd.sno, qd.doe, qd.createdon, productmaster.departmentid FROM  qualitytesting_details AS qd INNER JOIN productmaster ON qd.productid = productmaster.sno WHERE (qd.branchid = @gbranchid) AND (productmaster.departmentid = 1) ORDER BY qd.doe DESC");
            cmd.Parameters.Add("@gbranchid", BranchID);
            DataTable stghee = vdm.SelectQuery(cmd).Tables[0];
            if (stghee.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Ghee Section Quality Testing";
                string dates = stghee.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) sno, doe FROM   curdcoldroom_details WHERE   (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtcold = vdm.SelectQuery(cmd).Tables[0];
            if (dtcold.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Cold Room Details";
                string dates = dtcold.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) batchentryid, doe FROM batchentrydetails WHERE (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbatchs = vdm.SelectQuery(cmd).Tables[0];
            if (dtbatchs.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Batch Preparation";
                string dates = dtbatchs.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) sno, date FROM silo_outward_transaction WHERE  (branchid = @branchid) ORDER BY date DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtso = vdm.SelectQuery(cmd).Tables[0];
            if (dtso.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Outward Silo";
                string dates = dtso.Rows[0]["date"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) sno, closingdate FROM    silowiseclosingdetails WHERE  (branchid = @branchid) ORDER BY closingdate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtsc = vdm.SelectQuery(cmd).Tables[0];
            if (dtsc.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Silo Wise Closing";
                string dates = dtsc.Rows[0]["closingdate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) sno, closeddate, branchid, type FROM   closing_details WHERE (type = 'shift') AND (branchid = @branchid) ORDER BY closeddate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtswc = vdm.SelectQuery(cmd).Tables[0];
            if (dtswc.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Shift Wise Closing";
                string dates = dtswc.Rows[0]["closeddate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) sno, branchid, doe, section FROM  packing_entry WHERE   (branchid = @branchid) AND (section = 'packing') ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtpck = vdm.SelectQuery(cmd).Tables[0];
            if (dtpck.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Packing Entry";
                string dates = dtpck.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT TOP (1) sno, createdon, branchid, deptid FROM   plant_production_details WHERE  (deptid = 3) AND (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtgp = vdm.SelectQuery(cmd).Tables[0];
            if (dtgp.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Ghee Section Production Entry";
                string dates = dtgp.Rows[0]["createdon"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) sno, closeddate, branchid, type FROM closing_details WHERE   (type = 'ghee') AND (branchid = @branchid) ORDER BY closeddate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtgpc = vdm.SelectQuery(cmd).Tables[0];
            if (dtgpc.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Ghee Section Closing";
                string dates = dtgpc.Rows[0]["closeddate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT TOP (1) sno, createdon, branchid, deptid FROM   plant_production_details WHERE  (deptid = 10) AND (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbp = vdm.SelectQuery(cmd).Tables[0];
            if (dtbp.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Butter Section Production Entry";
                string dates = dtbp.Rows[0]["createdon"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) sno, closeddate, branchid, type FROM closing_details WHERE   (type = 'butter') AND (branchid = @branchid) ORDER BY closeddate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbps = vdm.SelectQuery(cmd).Tables[0];
            if (dtbps.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Butter Section Closing";
                string dates = dtbps.Rows[0]["closeddate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT TOP (1) sno, createdon, branchid, deptid FROM   plant_production_details WHERE  (deptid = 1) AND (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtcrd = vdm.SelectQuery(cmd).Tables[0];
            if (dtcrd.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Curd Production Entry";
                string dates = dtcrd.Rows[0]["createdon"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT   TOP (1) ppd.sno, ppd.createdon, ppd.branchid, ppd.deptid FROM   plant_production_details AS ppd INNER JOIN productmaster AS pm ON ppd.productid = pm.sno WHERE  (ppd.deptid = 1) AND (ppd.branchid = @branchid) ORDER BY ppd.doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbip = vdm.SelectQuery(cmd).Tables[0];
            if (dtbip.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Bi Products Production Entry";
                string dates = dtbip.Rows[0]["createdon"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT  TOP (1) sno, closeddate, branchid, type FROM closing_details WHERE (type = 'BiProducts') AND (branchid = @branchid) ORDER BY closeddate DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbipc = vdm.SelectQuery(cmd).Tables[0];
            if (dtbipc.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Bi Products Closing";
                string dates = dtbipc.Rows[0]["closeddate"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            cmd = new SqlCommand("SELECT     TOP (1) sno, doe, section FROM   packing_entry WHERE   (section = 'Curd') AND (branchid = @branchid) ORDER BY doe DESC");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtcrdpck = vdm.SelectQuery(cmd).Tables[0];
            if (dtcrdpck.Rows.Count > 0)
            {
                entrydetalis details = new entrydetalis();
                details.type = "Curd Section Packing Entry";
                string dates = dtcrdpck.Rows[0]["doe"].ToString();
                DateTime dt = Convert.ToDateTime(dates);
                details.date = dt.ToString("yyyy-MM-dd");
                details.mdate = dt.ToString("dd-MMM-yyyy");
                entrydetalis.Add(details);
            }
            string response = GetJson(entrydetalis);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    public class productionplaning
    {
        public string productname { get; set; }
        public string filmconsumpction { get; set; }
        public string perltrcost { get; set; }
        public string qty { get; set; }
        public string packs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string kgfat { get; set; }
        public string kgsnf { get; set; }
    }
    private void production_planing_cost(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            pdm = new PODbmanager();
            string pobranchid = "2";
            string branchid = context.Session["Branch_Id"].ToString();
            string batchid = context.Request["batch"];
            string ltrs = context.Request["ltrs"];
            cmd = new SqlCommand("SELECT   pdm.sno, pdm.productname, pdm.ml, pdm.filimrate, pdm.width, pdm.height, pdm.microns, pm.branchid AS pmbranchid, bpm.storesproductid, pdm.batchid FROM    productmaster AS pdm INNER JOIN productmonitar AS pm ON pdm.sno = pm.productid INNER JOIN batchproducts_mapping AS bpm ON pm.productid = bpm.productid WHERE  (pm.branchid = @branchid) AND (pdm.batchid = @batchid)");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@batchid", batchid);
            DataTable dtproduct = vdm.SelectQuery(cmd).Tables[0];
            List<productionplaning> productionplaning = new List<productionplaning>();
            if (dtproduct.Rows.Count > 0)
            {
                foreach (DataRow dr in dtproduct.Rows)
                {
                    string storesproductid = dr["storesproductid"].ToString();
                    cmd = new SqlCommand("SELECT    productid, qty, price, branchid, minstock, maxstock FROM    productmoniter WHERE  (branchid = @pbranchid) AND (productid = @pproductid)");
                    cmd.Parameters.Add("@pbranchid", pobranchid);
                    cmd.Parameters.Add("@pproductid", storesproductid);
                    DataTable dtfilmcost = pdm.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drr in dtfilmcost.Rows)
                    {
                        productionplaning details = new productionplaning();
                        details.productname = dr["productname"].ToString();
                        string fimcst = drr["price"].ToString();
                        double fimcsts = Convert.ToDouble(fimcst);
                        double width = 0;
                        double.TryParse(dr["width"].ToString(), out width);
                        double height = 0;
                        double.TryParse(dr["height"].ToString(), out height);
                        double microns = 0;
                        double.TryParse(dr["microns"].ToString(), out microns);
                        double ltrss = Convert.ToDouble(ltrs);
                        string mlltr = dr["ml"].ToString();
                        int int_mlltr = 0;
                        int.TryParse(mlltr, out int_mlltr);
                        //yield caluclation
                        int noofqty = 0;
                        noofqty = 1000 / int_mlltr;
                        double packets = noofqty * ltrss;
                        double stdyeld = (width * height * microns * 0.93);
                        double actyeald = 1000 / stdyeld;
                        double natloss = (actyeald * 2) / int_mlltr;
                        double yield = actyeald - natloss;
                        double filmcons = packets / yield;
                        double valueoffilm = fimcsts * filmcons;
                        double perpktrate = valueoffilm / packets;
                        double rateperltr = perpktrate * noofqty;
                        filmcons = Math.Round(filmcons, 3);
                        details.filmconsumpction = filmcons.ToString();
                        rateperltr = Math.Round(rateperltr, 3);
                        details.perltrcost = rateperltr.ToString();
                        details.packs = packets.ToString();
                        productionplaning.Add(details);
                    }
                }
                string response = GetJson(productionplaning);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    private void production_planing_smp(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            pdm = new PODbmanager();
            string pobranchid = "2";
            string branchid = context.Session["Branch_Id"].ToString();
            string smp_storesproductid = "1";
            if (branchid == "1")
            {
                cmd = new SqlCommand("SELECT   productmoniter.productid, productmoniter.qty, productmoniter.price, productmoniter.branchid,  productmaster.productname FROM  productmoniter INNER JOIN productmaster ON productmoniter.productid = productmaster.productid WHERE (productmoniter.productid = @pproductid) AND (productmoniter.branchid = @pbranchid)");
                cmd.Parameters.Add("@pbranchid", pobranchid);
                cmd.Parameters.Add("@pproductid", smp_storesproductid);
                DataTable dtfilmcost = pdm.SelectQuery(cmd).Tables[0];
                List<productionplaning> productionplaning = new List<productionplaning>();
                foreach (DataRow drr in dtfilmcost.Rows)
                {
                    productionplaning details = new productionplaning();
                    details.productname = drr["productname"].ToString();
                    details.qty = drr["qty"].ToString();
                    productionplaning.Add(details);
                }
                string response = GetJson(productionplaning);
                context.Response.Write(response);
            }
            else
            {

            }
        }
        catch (Exception ex)
        {

        }
    }
    private void get_batchpreparation_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string ltrs = context.Request["ltrs"];
            string fat = context.Request["fat"];
            string snf = context.Request["snf"];
            string batch = context.Request["batch"];
            cmd = new SqlCommand("SELECT    batchid, batch, batchcode, branchid, departmentid, createdby, fat, snf, clr FROM batchmaster");
            DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];

            double ltrssa = 0;
            double fatsa = 0;
            double snfsa = 0;
            double kgfata = 0;
            double kgsnfa = 0;

            double ltrsss = 0;
            double fatss = 0;
            double snfss = 0;
            double kgfats = 0;
            double kgsnfs = 0;

            double fatd = 0;
            double snfd = 0;
            double kgfatd = 0;
            double kgsnfd = 0;
            List<productionplaning> productionplaning = new List<productionplaning>();
            if (ltrs != "")
            {
                productionplaning details = new productionplaning();
                string astand = "Actual";
                ltrssa = Convert.ToDouble(ltrs);
                fatsa = Convert.ToDouble(fat);
                snfsa = Convert.ToDouble(snf);
                kgfata = (ltrssa * fatsa) / 100;
                kgsnfa = (ltrssa * snfsa) / 100;

                details.productname = astand;
                details.fat = Math.Round(fatsa, 2).ToString();
                details.snf = Math.Round(snfsa, 2).ToString();
                details.kgfat = Math.Round(kgfata, 2).ToString();
                details.kgsnf = Math.Round(kgsnfa, 2).ToString();
                productionplaning.Add(details);
            }
            foreach (DataRow drr in dtbatch.Rows)
            {
                string batchid = drr["batchid"].ToString();
                if (batch == batchid)
                {
                    productionplaning details = new productionplaning();
                    string stand = "Standard";
                    string fatb = drr["fat"].ToString();
                    string snfb = drr["snf"].ToString();

                    ltrsss = Convert.ToDouble(ltrs);
                    fatss = Convert.ToDouble(fatb);
                    snfss = Convert.ToDouble(snfb);
                    kgfats = (ltrsss * fatss) / 100;
                    kgsnfs = (ltrsss * snfss) / 100;

                    details.productname = stand;
                    details.fat = Math.Round(fatss, 2).ToString();
                    details.snf = Math.Round(snfss, 2).ToString();
                    details.kgfat = Math.Round(kgfats).ToString();
                    details.kgsnf = Math.Round(kgsnfs).ToString();
                    productionplaning.Add(details);
                }
            }
            string diff = "";
            productionplaning detailss = new productionplaning();
            diff = "Difference";
            fatd = fatss - fatsa;
            snfd = snfss - snfsa;
            kgfatd = kgfats - kgfata;
            kgsnfd = kgsnfs - kgsnfa;
            detailss.productname = diff;
            detailss.fat = fatd.ToString();
            detailss.snf = snfd.ToString();
            detailss.kgfat = kgfatd.ToString();
            detailss.kgsnf = kgsnfd.ToString();
            productionplaning.Add(detailss);

            productionplaning creamdetailss = new productionplaning();
            diff = "Cream (60%)";
            double creamkgfat = (kgfatd / 60) * 100;
            if (creamkgfat < 0)
            {
                creamkgfat = 0;
            }
            double creamkgsnf = (kgsnfd / 97) * 100;
            if (creamkgsnf < 0)
            {
                creamkgsnf = 0;
            }
            creamdetailss.productname = diff;
            creamdetailss.kgfat = creamkgfat.ToString();
            creamdetailss.kgsnf = creamkgsnf.ToString();
            productionplaning.Add(creamdetailss);

            string response = GetJson(productionplaning);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    public class salesproducts
    {
        public string sno { get; set; }
        public string SubCatName { get; set; }
        public string productid { get; set; }
        public string qtyltrs { get; set; }
        public string qtykgs { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
    }
    private void get_sales_despatch_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            vdmnr = new VehicleDBMgr();
            MySqlCommand mycmd = new MySqlCommand();
            string BranchID = context.Session["Branch_ID"].ToString();
            string date = context.Request["date"];
            DateTime dtdate = Convert.ToDateTime(date);
            //cmd = new SqlCommand("SELECT  sno, productid, fat, snf, qty_kgs, total, doe, section FROM     plant_production_details WHERE   (section = 'sales') AND (doe BETWEEN @sd1 AND @sd2) AND (branchid = @sbranchid)");
            //cmd.Parameters.Add("@sbranchid", BranchID);
            //cmd.Parameters.Add("@sd1", GetLowDate(dtdate));
            //cmd.Parameters.Add("@sd2", GetHighDate(dtdate));
            //DataTable dtsalesprod = vdm.SelectQuery(cmd).Tables[0];
            //if (dtsalesprod.Rows.Count > 0)
            //{
            //    List<salesproducts> salesproductsslst = new List<salesproducts>();
            //    foreach (DataRow dr in dtsalesprod.Rows)
            //    {
            //        salesproducts getroutes = new salesproducts();
            //        string productid = dr["productid"].ToString();
            //        mycmd = new MySqlCommand("SELECT   sno, category_sno, SubCatName, Flag, userdata_sno, fat FROM   products_subcategory WHERE  (sno = @pid)");
            //        mycmd.Parameters.Add("@pid", productid);
            //        DataTable pdt = vdmnr.SelectQuery(mycmd).Tables[0];
            //        getroutes.SubCatName = pdt.Rows[0]["SubCatName"].ToString();
            //        getroutes.productid = productid.ToString();
            //        getroutes.qtyltrs = dr["total"].ToString();
            //        getroutes.qtykgs = dr["qty_kgs"].ToString();
            //        getroutes.fat = dr["fat"].ToString();
            //        getroutes.snf = dr["snf"].ToString();
            //        getroutes.sno = dr["sno"].ToString();
            //        salesproductsslst.Add(getroutes);
            //    }
            //    string response = GetJson(salesproductsslst);
            //    context.Response.Write(response);
            //}
            cmd = new SqlCommand("SELECT   sno, branchname, branchcode,whcode FROM branch_info WHERE  (sno = @branchid)");
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
            string branchcode = "";
            string whcode = "";
            foreach (DataRow dr in dtbranch.Rows)
            {
                branchcode = dr["branchcode"].ToString();
                whcode = dr["whcode"].ToString();
            }
            mycmd = new MySqlCommand("select sno,whcode from branchdata where whcode=@whcode");
            mycmd.Parameters.Add("@whcode", whcode);
            DataTable dtwhcode = vdmnr.SelectQuery(mycmd).Tables[0];
            string salesbranchid = dtwhcode.Rows[0]["sno"].ToString();
            mycmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, products_subcategory.SubCatName, products_category.Categoryname, products_category.sno AS categorysno, products_subcategory.sno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.Branch_Id = @branch) and (products_category.sno ='9') GROUP BY categorysno, products_subcategory.sno ORDER BY categorysno");
            mycmd.Parameters.Add("@branch", salesbranchid);
            mycmd.Parameters.Add("@d1", GetLowDate(dtdate));
            mycmd.Parameters.Add("@d2", GetHighDate(dtdate));
            DataTable dtsales = vdmnr.SelectQuery(mycmd).Tables[0];
            List<salesproducts> salesproductsslst = new List<salesproducts>();
            if (dtsales.Rows.Count > 0)
            {
                foreach (DataRow dr in dtsales.Rows)
                {
                    string productname = dr["SubCatName"].ToString();
                    if (productname != "LOOSE KHM")
                    {
                        double qty = 0;
                        double FAT = 0;
                        double SNF = 0;
                        double clr = 0;
                        double.TryParse(dr["Qty"].ToString(), out qty);
                        if (productname == "STD" || productname == "AP-SM" || productname == "SM")
                        {
                            FAT = 4.5;
                            SNF = 9.055;
                            clr = 32;
                        }
                        if (productname == "FCM" || productname == "GOLD")
                        {
                            FAT = 5.8;
                            SNF = 9.203;
                            clr = 31;
                        }
                        if (productname == "DTM")
                        {
                            FAT = 1.5;
                            SNF = 9.04;
                            clr = 33.5;
                        }
                        if (productname == "TM" || productname == "COW MILK" || productname == "TAAZA")
                        {
                            FAT = 3.0;
                            SNF = 9.24;
                            clr = 33.5;
                        }
                        if (productname == "NH")
                        {
                            FAT = 4;
                            SNF = 8.47;
                            clr = 29;
                        }
                        if (productname == "WholeMilk")
                        {
                            FAT = 3.8;
                            SNF = 7.91;
                            clr = 29;
                        }
                        if (productname == "GoldPlus")
                        {
                            FAT = 6.0;
                            SNF = 8.5;
                            clr = 29;
                        }
                        if (productname == "MahaGold" || productname == "SuperGold")
                        {
                            FAT = 6.2;
                            SNF = 9.0;
                            clr = 30;
                        }
                        double modclr = (clr / 1000) + 1;
                        double qtyltrkgs = qty * modclr;

                        salesproducts getroutes = new salesproducts();
                        string productid = dr["sno"].ToString();
                        mycmd = new MySqlCommand("SELECT   sno, category_sno, SubCatName, Flag, userdata_sno, fat FROM   products_subcategory WHERE  (sno = @pid)");
                        mycmd.Parameters.Add("@pid", productid);
                        DataTable pdt = vdmnr.SelectQuery(mycmd).Tables[0];
                        getroutes.SubCatName = pdt.Rows[0]["SubCatName"].ToString();
                        getroutes.productid = dr["sno"].ToString();
                        getroutes.qtyltrs = qty.ToString();
                        getroutes.qtykgs = qtyltrkgs.ToString();

                        cmd = new SqlCommand("SELECT  sno, productid, fat, snf, qty_kgs, total, doe, section FROM     plant_production_details WHERE   (section = 'sales') AND (doe BETWEEN @sd1 AND @sd2) AND (branchid = @sbranchid) AND (productid = @productid)");
                        cmd.Parameters.Add("@sbranchid", BranchID);
                        cmd.Parameters.Add("@sd1", GetLowDate(dtdate));
                        cmd.Parameters.Add("@sd2", GetHighDate(dtdate));
                        cmd.Parameters.Add("@productid", productid);
                        DataTable dtsalesprod = vdm.SelectQuery(cmd).Tables[0];
                        if (dtsalesprod.Rows.Count > 0)
                        {
                            foreach (DataRow drr in dtsalesprod.Rows)
                            {
                                getroutes.fat = drr["fat"].ToString();
                                getroutes.snf = drr["snf"].ToString();
                                getroutes.sno = drr["sno"].ToString();
                            }
                        }
                        else
                        {
                            getroutes.fat = FAT.ToString();
                            getroutes.snf = SNF.ToString();
                            getroutes.sno = productid;
                        }
                        salesproductsslst.Add(getroutes);
                    }
                }
                string response = GetJson(salesproductsslst);
                context.Response.Write(response);
            }
            else
            {
                string msg = "";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void save_sales_fatsnf_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            MilkDetails obj = js.Deserialize<MilkDetails>(title1);
            string date = obj.date;
            DateTime ddate = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            string UserId = context.Session["Employ_Sno"].ToString();
            string btnval = obj.btnvalue;
            if (btnval == "Modify")
            {
                cmd = new SqlCommand("SELECT  sno, productid, fat, snf, qty_kgs, total, doe, section FROM     plant_production_details WHERE   (section = 'sales') AND (doe BETWEEN @sd1 AND @sd2) AND (branchid = @sbranchid)");
                cmd.Parameters.Add("@sbranchid", branchid);
                cmd.Parameters.Add("@sd1", GetLowDate(ddate));
                cmd.Parameters.Add("@sd2", GetHighDate(ddate));
                DataTable dtsalesprod = vdm.SelectQuery(cmd).Tables[0];
                if (dtsalesprod.Rows.Count > 0)
                {
                    foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                    {

                        cmd = new SqlCommand("UPDATE plant_production_details SET  fat=@fat, snf=@snf, qty_kgs=@qty_kgs, total=@total  WHERE productid=@productid AND sno=@sno And branchid=@branchid ");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@fat", o.fat);
                        cmd.Parameters.Add("@snf", o.snf);
                        cmd.Parameters.Add("@qty_kgs", o.Qtykg);
                        cmd.Parameters.Add("@total", o.Qtyltr); //qty ltrs save total column
                        cmd.Parameters.Add("@sno", o.sno);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.Update(cmd);
                    }
                }
                else
                {
                    foreach (MilkfatDetails o in obj.MilkfatDetailsMilkarray)
                    {
                        cmd = new SqlCommand("insert into   plant_production_details (productid, fat, snf, qty_kgs, total, doe, section, createdby, createdon, branchid) values (@productid, @fat, @snf, @qty_kgs, @total, @doe, @section, @createdby, @createdon, @branchid)");
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@fat", o.fat);
                        cmd.Parameters.Add("@snf", o.snf);
                        cmd.Parameters.Add("@qty_kgs", o.Qtykg);
                        cmd.Parameters.Add("@total", o.Qtyltr); //qty ltrs save total column
                        cmd.Parameters.Add("@doe", ddate);
                        cmd.Parameters.Add("@section", "sales");
                        cmd.Parameters.Add("@createdby", UserId);
                        cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                    }
                }
                string response = GetJson("FAT and SNF Details Saved Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_otherbiproducts_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string date = context.Request["date"];
            DateTime ddate = Convert.ToDateTime(date);
            string openingbalance = context.Request["openingbalance"];
            string rawmetarial = context.Request["rawmetarial"];
            string production = context.Request["production"];
            string despatch = context.Request["despatch"];
            string stocktransfer = context.Request["stocktransfer"];
            string closingbalance = context.Request["closingbalance"];
            string remarks = context.Request["remarks"];
            string btnval = context.Request["btnval"];
            string sno = context.Request["sno"];
            string productname = context.Request["productname"];
            string handlingloss = context.Request["handlingloss"];
            string sugar = context.Request["suger"];
            string ghee = context.Request["ghee"];
            string smp = context.Request["smp"];
            string other = context.Request["other"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into Other_products_Details ( doe, productid, issue, remarks, openingbalance, sugar, ghee, smp, other, productionqty, handlingloss, despatchqty, closingbalance, entryby, branchid) values ( @doe, @productid, @issue, @remarks, @openingbalance, @sugar, @ghee, @smp, @other, @productionqty, @handlingloss, @despatchqty, @closingbalance, @entryby, @branchid)");
                // doe, productid, issue, remarks, openingbalance, sugar, ghee, smp, other, productionqty, handlingloss, despatchqty, closingbalance, entryby, branchid
                cmd.Parameters.Add("@doe", ddate);
                cmd.Parameters.Add("@productid", productname);
                cmd.Parameters.Add("@openingbalance", openingbalance);
                cmd.Parameters.Add("@sugar", sugar);
                cmd.Parameters.Add("@ghee", ghee);
                cmd.Parameters.Add("@smp", smp);
                cmd.Parameters.Add("@other", other);
                cmd.Parameters.Add("@handlingloss", handlingloss);
                cmd.Parameters.Add("@productionqty", production);
                cmd.Parameters.Add("@despatchqty", despatch);
                cmd.Parameters.Add("@issue", stocktransfer);
                cmd.Parameters.Add("@closingbalance", closingbalance);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@entryby", UserID);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.insert(cmd);

                cmd = new SqlCommand("UPDATE productmonitar SET quantity=@quaninty where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@quaninty", closingbalance);
                cmd.Parameters.Add("@productid", productname);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.Update(cmd);

                string msg = "Transaction Sucessfully Saved.";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE Other_products_Details SET doe=@doe, productid=@productid, issue=@issue, remarks=@remarks, openingbalance=@openingbalance, sugar=@sugar, ghee=@ghee, smp=@smp, other=@other, productionqty=@productionqty, handlingloss=@handlingloss, despatchqty=@despatchqty, closingbalance=@closingbalance where sno=@sno and branchid=@Branchid");
                cmd.Parameters.Add("@doe", ddate);
                cmd.Parameters.Add("@productid", productname);
                cmd.Parameters.Add("@openingbalance", openingbalance);
                cmd.Parameters.Add("@sugar", sugar);
                cmd.Parameters.Add("@ghee", ghee);
                cmd.Parameters.Add("@smp", smp);
                cmd.Parameters.Add("@other", other);
                cmd.Parameters.Add("@handlingloss", handlingloss);
                cmd.Parameters.Add("@productionqty", production);
                cmd.Parameters.Add("@despatchqty", despatch);
                cmd.Parameters.Add("@issue", stocktransfer);
                cmd.Parameters.Add("@closingbalance", closingbalance);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@entryby", UserID);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);

                cmd = new SqlCommand("UPDATE productmonitar SET quantity=@quaninty where productid=@productid and branchid=@branchid");
                cmd.Parameters.Add("@quaninty", closingbalance);
                cmd.Parameters.Add("@productid", productname);
                cmd.Parameters.Add("@branchid", BranchID);
                vdm.Update(cmd);

                string msg = "Transaction details modified successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class otherbiproducts_det
    {
        public string doe { get; set; }
        public string sno { get; set; }
        public string productid { get; set; }
        public string productname { get; set; }
        public string ob { get; set; }
        public string recivedqty { get; set; }

        public string lossqty { get; set; }
        public string productionqty { get; set; }
        public string issue { get; set; }
        public string cb { get; set; }
        public string datetime { get; set; }
        public string sales { get; set; }
    }
    private void get_otherbiproducts_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT   opd.sno, opd.doe, opd.productid, opd.issue, opd.remarks, opd.openingbalance, opd.sugar, opd.ghee, opd.smp, opd.other, opd.productionqty, opd.handlingloss, opd.despatchqty, opd.closingbalance, opd.entryby,  opd.branchid, pm.productname FROM  Other_products_Details AS opd INNER JOIN productmaster AS pm ON opd.productid = pm.sno WHERE  (opd.branchid = @branchid) AND (opd.doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<otherbiproducts_det> otherbiproductslist = new List<otherbiproducts_det>();
            foreach (DataRow dr in routes.Rows)
            {
                otherbiproducts_det obj = new otherbiproducts_det();
                obj.doe = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");
                obj.sno = dr["sno"].ToString();
                obj.productid = dr["productid"].ToString();
                obj.productname = dr["productname"].ToString();
                obj.ob = dr["openingbalance"].ToString();
                double sugar = Convert.ToDouble(dr["sugar"].ToString());
                double ghee = Convert.ToDouble(dr["ghee"].ToString());
                double smp = Convert.ToDouble(dr["smp"].ToString());
                double other = Convert.ToDouble(dr["other"].ToString());
                obj.recivedqty = (sugar + ghee + smp + other).ToString();
                obj.lossqty = dr["handlingloss"].ToString();
                obj.productionqty = dr["productionqty"].ToString();
                obj.sales = dr["despatchqty"].ToString();
                obj.issue = dr["issue"].ToString();
                obj.cb = dr["closingbalance"].ToString();
                obj.datetime = dr["doe"].ToString();
                otherbiproductslist.Add(obj);
            }
            string response = GetJson(otherbiproductslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void fill_opening_balance(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string productname = context.Request["productname"];
            cmd = new SqlCommand("SELECT   productid, quantity, branchid, batchid FROM  productmonitar WHERE (productid = @productid) AND (branchid = @branchid)");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@productid", productname);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            string quantity = routes.Rows[0]["quantity"].ToString();
            string response = GetJson(quantity);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_other_biproducts_report_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            string productname = context.Request["productname"];
            string fromdate = context.Request["fromdate"];
            DateTime dfromdate = Convert.ToDateTime(fromdate);
            string todate = context.Request["todate"];
            DateTime dtodate = Convert.ToDateTime(todate);
            cmd = new SqlCommand("SELECT   opd.sno, opd.doe, opd.productid, opd.issue, opd.remarks, opd.openingbalance, opd.sugar, opd.ghee, opd.smp, opd.other, opd.productionqty, opd.handlingloss, opd.despatchqty, opd.closingbalance, opd.entryby,  opd.branchid, pm.productname FROM  Other_products_Details AS opd INNER JOIN productmaster AS pm ON opd.productid = pm.sno WHERE  (opd.branchid = @branchid) AND (opd.doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@d1", GetLowDate(dfromdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtodate));
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@productid", productname);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<otherbiproducts_det> otherbiproductslist = new List<otherbiproducts_det>();
            foreach (DataRow dr in routes.Rows)
            {
                otherbiproducts_det obj = new otherbiproducts_det();
                obj.doe = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");
                obj.sno = dr["sno"].ToString();
                obj.productid = dr["productid"].ToString();
                obj.productname = dr["productname"].ToString();
                obj.ob = dr["openingbalance"].ToString();
                double sugar = Convert.ToDouble(dr["sugar"].ToString());
                double ghee = Convert.ToDouble(dr["ghee"].ToString());
                double smp = Convert.ToDouble(dr["smp"].ToString());
                double other = Convert.ToDouble(dr["other"].ToString());
                obj.recivedqty = (sugar + ghee + smp + other).ToString();
                obj.lossqty = dr["handlingloss"].ToString();
                obj.productionqty = dr["productionqty"].ToString();
                obj.sales = dr["despatchqty"].ToString();
                obj.issue = dr["issue"].ToString();
                obj.cb = dr["closingbalance"].ToString();
                obj.datetime = dr["doe"].ToString();
                otherbiproductslist.Add(obj);
            }
            string response = GetJson(otherbiproductslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_other_biproducts_stock_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string branchid = context.Session["Branch_ID"].ToString();
            string todate = context.Request["todate"];
            DateTime dtodate = Convert.ToDateTime(todate);
            cmd = new SqlCommand("SELECT   opd.sno, opd.doe, opd.productid, opd.issue, opd.remarks, opd.openingbalance, opd.sugar, opd.ghee, opd.smp, opd.other, opd.productionqty, opd.handlingloss, opd.despatchqty, opd.closingbalance, opd.entryby,  opd.branchid, pm.productname FROM  Other_products_Details AS opd INNER JOIN productmaster AS pm ON opd.productid = pm.sno WHERE  (opd.branchid = @branchid) AND (opd.doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@d1", GetLowDate(dtodate));
            cmd.Parameters.Add("@d2", GetHighDate(dtodate));
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<otherbiproducts_det> otherbiproductslist = new List<otherbiproducts_det>();
            foreach (DataRow dr in routes.Rows)
            {
                otherbiproducts_det obj = new otherbiproducts_det();
                obj.productname = dr["productname"].ToString();
                obj.ob = dr["openingbalance"].ToString();
                double sugar = Convert.ToDouble(dr["sugar"].ToString());
                double ghee = Convert.ToDouble(dr["ghee"].ToString());
                double smp = Convert.ToDouble(dr["smp"].ToString());
                double other = Convert.ToDouble(dr["other"].ToString());
                obj.recivedqty = (sugar + ghee + smp + other).ToString();
                obj.lossqty = dr["handlingloss"].ToString();
                obj.productionqty = dr["productionqty"].ToString();
                double saless = Convert.ToDouble(dr["despatchqty"].ToString());
                double issue = Convert.ToDouble(dr["issue"].ToString());
                obj.sales = (saless + issue).ToString();
                obj.cb = dr["closingbalance"].ToString();
                otherbiproductslist.Add(obj);
            }
            string response = GetJson(otherbiproductslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class intrasilotrans
    {
        public string sno { get; set; }
        public string fromsiloid { get; set; }
        public string tosiloid { get; set; }
        public string qty_ltrs { get; set; }
        public string qty_kgs { get; set; }
        public string costperltr { get; set; }
        public string fat { get; set; }
        public string snf { get; set; }
        public string clr { get; set; }
        public string cb { get; set; }
        public string doe { get; set; }
        public string smp { get; set; }
        public string fromsilo { get; set; }
        public string tosilo { get; set; }
        public string datetime { get; set; }
        public string Capacity { get; set; }
    }
    private void get_intrasilo_transaction_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT   ins.sno, ins.fromsiloid, ins.tosiloid, ins.qty_ltrs, ins.qty_kgs, ins.costperltr, ins.fat, ins.snf, ins.clr, ins.doe, ins.smp, fsilo.SiloName AS fromsilo, CONVERT(varchar, ins.doe, 126) AS datetime,  tsilo.SiloName AS tosilo FROM   intra_silo_transactions AS ins INNER JOIN silomaster AS fsilo ON ins.fromsiloid = fsilo.SiloId LEFT OUTER JOIN silomaster AS tsilo ON ins.tosiloid = tsilo.SiloId WHERE  (ins.branchid = @branchid) AND (ins.doe BETWEEN @d1 AND @d2) ORDER BY ins.doe");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-10));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<intrasilotrans> intrasilotranslist = new List<intrasilotrans>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                intrasilotrans obj = new intrasilotrans();
                obj.sno = dr["sno"].ToString();
                obj.fromsiloid = dr["fromsiloid"].ToString();
                obj.tosiloid = dr["tosiloid"].ToString();
                obj.qty_ltrs = dr["qty_ltrs"].ToString();
                obj.qty_kgs = dr["qty_kgs"].ToString();

                obj.costperltr = dr["costperltr"].ToString();
                obj.fat = dr["fat"].ToString();
                obj.snf = dr["snf"].ToString();
                obj.clr = dr["clr"].ToString();
                DateTime dt = Convert.ToDateTime(dr["doe"].ToString());
                obj.doe = dt.ToString("MM/dd/yyyy");

                obj.smp = dr["smp"].ToString();
                obj.fromsilo = dr["fromsilo"].ToString();
                obj.tosilo = dr["tosilo"].ToString();
                obj.datetime = dr["datetime"].ToString();

                intrasilotranslist.Add(obj);
            }
            string response = GetJson(intrasilotranslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_Silo_capacity(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string siloid = context.Request["siloid"];
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT   sm.SiloId, sm.BranchId, sm.Quantity, smst.SiloName FROM  silomonitar AS sm INNER JOIN silomaster AS smst ON sm.SiloId = smst.SiloId WHERE   (sm.BranchId = @branchid) AND (sm.SiloId = @siloid)");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@siloid", siloid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<intrasilotrans> intrasilotranslist = new List<intrasilotrans>();
            foreach (DataRow dr in routes.Rows)
            {
                intrasilotrans obj = new intrasilotrans();
                obj.fromsiloid = dr["SiloId"].ToString();
                obj.Capacity = dr["Quantity"].ToString();
                intrasilotranslist.Add(obj);
            }
            string response = GetJson(intrasilotranslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    //vehicle details
    private void get_Vehicle_fleet_details(HttpContext context)
    {
        try
        {
            FleetDBManager fdm = new FleetDBManager();
            mycmd = new MySqlCommand("SELECT    ID, VID, VehicleRegistrationNo, Capacity, Status FROM  vmsc WHERE (MID = 3)");
            DataTable routes = fdm.SelectQuery(mycmd).Tables[0];
            List<Vehiclecls> Vehilcelst = new List<Vehiclecls>();
            foreach (DataRow dr in routes.Rows)
            {
                Vehiclecls getroutes = new Vehiclecls();
                getroutes.sno = dr["VID"].ToString();
                getroutes.vehicleno = dr["VehicleRegistrationNo"].ToString();
                getroutes.capacity = dr["Capacity"].ToString();
                Vehilcelst.Add(getroutes);
            }
            string response = GetJson(Vehilcelst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class biproduct_products
    {
        public string productid { get; set; }
        public string productname { get; set; }
        public string quantity { get; set; }
        public string costperltrs { get; set; }
    }
    private void get_biprodct_products_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string producttype = "loose";
            cmd = new SqlCommand("SELECT  pdm.sno, pdm.productname, pdm.biproductsshortname, pom.quantity, pom.branchid FROM  productmaster AS pdm INNER JOIN productmonitar AS pom ON pdm.sno = pom.productid WHERE  (pdm.biproductsshortname = @producttype) AND (pom.branchid = @BranchID)");
            cmd.Parameters.Add("@producttype", producttype);
            cmd.Parameters.Add("@BranchID", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<biproduct_products> biproduct_productslist = new List<biproduct_products>();
            foreach (DataRow dr in routes.Rows)
            {
                biproduct_products obj = new biproduct_products();
                obj.productid = dr["sno"].ToString();
                obj.productname = dr["productname"].ToString();
                obj.quantity = dr["quantity"].ToString();
                biproduct_productslist.Add(obj);
            }
            string response = GetJson(biproduct_productslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_intrasilo_perltrrate_details(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string fromsiloid = context.Request["siloid"].ToString();
            string date = context.Request["date"].ToString();
            DateTime ddate = Convert.ToDateTime(date);
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT  sno, dcno, siloid, qty_kgs, qty_ltrs, fat, snf, clr, date, enterby, branchid, ccid FROM  silo_inward_transaction WHERE  (siloid = @siloid) AND (branchid = @branchid) AND (date BETWEEN @d1 AND @d2) ORDER BY sno DESC");
            cmd.Parameters.Add("@siloid", fromsiloid);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ddate).AddDays(-2));
            cmd.Parameters.Add("@d2", GetHighDate(ddate));
            DataTable dtitrasilo = vdm.SelectQuery(cmd).Tables[0];
            if (dtitrasilo.Rows.Count > 0)
            {
                double totlqtryltrs = 0;
                double totalamount = 0;
                foreach (DataRow drr in dtitrasilo.Rows)
                {

                    string dcno = drr["dcno"].ToString();
                    if (dcno != "")
                    {
                        //cmd = new SqlCommand("SELECT  TOP (1) milktransactions.dcno, milktransactions.sectionid, milktransactions.transportvalue, milktransactions.inwardno AS InwardNo, milktransactions.partydcno, milktransactions.vehicleno, milktransactions.doe, milktransactions.transtype, milktransactions.qty_ltr, milktransactions.qty_kgs, milktransactions.percentageon, milktransactions.snf, milktransactions.fat, milktransactions.clr, milktransaction_logs.milktype, milktransaction_logs.rate_on, milktransaction_logs.cost, milktransaction_logs.calc_on, milktransaction_logs.overheadon, milktransaction_logs.overheadcost, milktransaction_logs.p_fatpluscost, milktransaction_logs.m_std_snf, milktransaction_logs.m_std_fat, milktransaction_logs.p_std_snf, milktransaction_logs.snfplus_on, milktransaction_logs.m_snfpluscost, milktransaction_logs.p_snfpluscost, milktransaction_logs.m_fatpluscost, milktransaction_logs.transport_on, milktransaction_logs.transportcost, milktransaction_logs.transport, vendors.vendorname, vendors.kms, milktransaction_logs.p_std_fat, milktransaction_logs.fatplus_on FROM  milktransactions INNER JOIN milktransaction_logs ON milktransactions.sno = milktransaction_logs.milktransaction_sno INNER JOIN vendors ON milktransactions.sectionid = vendors.sno WHERE  (milktransactions.branchid = @branchid) AND (milktransactions.doe BETWEEN @d1 AND @d2) AND (milktransactions.dcno = @dcno) AND (milktransactions.transtype = 'in') ORDER BY milktransactions.sno DESC");
                        cmd = new SqlCommand("SELECT  TOP (1) mt.dcno, mt.transtype, mt.qty_ltr, mt.qty_kgs, mt.percentageon, mt.snf, mt.fat, mt.clr, mt.hs, mt.alcohol, mt.doe, mt.milktype, mt.cob1, mt.phosps1, mt.mbrt, mt.acidity, mtl.rate_on, mtl.calc_on, mtl.cost, mtl.overheadon, mtl.overheadcost, mtl.m_std_snf, mtl.snfplus_on, mtl.p_std_snf, mtl.p_snfpluscost, mtl.transport_on, mtl.transport, mtl.transportcost, mtl.m_snfpluscost, mtl.fatplus_on, mtl.m_fatpluscost, mtl.p_fatpluscost, mtl.m_std_fat, mtl.p_std_fat FROM  milktransactions AS mt INNER JOIN milktransaction_logs AS mtl ON mt.sno = mtl.milktransaction_sno WHERE   (mt.dcno = @dcno) AND (mt.branchid = @branchid) ORDER BY mt.sno DESC");
                        cmd.Parameters.Add("@dcno", dcno);
                        cmd.Parameters.Add("@branchid", BranchID);
                        cmd.Parameters.Add("@d1", GetLowDate(ddate).AddDays(-4));
                        cmd.Parameters.Add("@d2", GetHighDate(ddate));
                        DataTable dtDispatch = vdm.SelectQuery(cmd).Tables[0];
                        if (dtDispatch.Rows.Count > 0)
                        {
                            string milktype = dtDispatch.Rows[0]["milktype"].ToString();
                            #region
                            if (milktype == "Buffalo")
                            {
                                double totmilkval = 0;
                                double totltrs = 0;
                                double kgfattotal = 0;
                                double kgsnftotal = 0;
                                double kgstotal = 0;
                                double Ltrstotal = 0;
                                double TStotal = 0;
                                double mvaluetotal = 0;
                                double ohtotal = 0;
                                double snf9total = 0;
                                double milkvaluetotal = 0;
                                int i = 1;
                                foreach (DataRow dr in dtDispatch.Rows)
                                {
                                    DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                    //newrow["DATE"] = date;
                                    //newrow["KGS"] = dr["qty_kgs"].ToString();
                                    double qty_ltr = 0;
                                    double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                    //newrow["LTRS"] = dr["qty_ltr"].ToString();
                                    double FAT = 0;
                                    double.TryParse(dr["fat"].ToString(), out FAT);
                                    FAT = Math.Round(FAT, 2);
                                    //newrow["FAT"] = FAT;
                                    double SNF = 0;
                                    double.TryParse(dr["snf"].ToString(), out SNF);
                                    //newrow["SNF"] = SNF;
                                    //newrow["CLR"] = dr["clr"].ToString();
                                    string Rateon = dr["rate_on"].ToString();
                                    double weight = 0;
                                    double KGFAT = 0;
                                    double KGSNF = 0;
                                    double ltrs = 0;
                                    double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                    Ltrstotal += ltrs;
                                    totlqtryltrs += ltrs;
                                    double Kgs = 0;
                                    double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                    kgstotal += Kgs;
                                    double tstotal = 0;
                                    tstotal = FAT + SNF;
                                    if (Rateon == "TS")
                                    {
                                        double TS = 0;
                                        TS = FAT + SNF;
                                        weight = (TS * Kgs) / 100;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                    else if (Rateon == "KGFAT")
                                    {
                                        weight = (FAT * Kgs) / 100;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                    else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                    {
                                        string CalOn = dr["calc_on"].ToString();
                                        if (CalOn == "Ltrs")
                                        {
                                            weight = ltrs;
                                            KGFAT = (FAT * ltrs) / 100;
                                            KGSNF = (SNF * ltrs) / 100;
                                        }
                                        else
                                        {
                                            weight = Kgs;
                                            KGFAT = (FAT * Kgs) / 100;
                                            KGSNF = (SNF * Kgs) / 100;
                                        }
                                    }
                                    double cost = 0;
                                    double.TryParse(dr["cost"].ToString(), out cost);
                                    //newrow["KG FAT RATE"] = cost;
                                    KGFAT = Math.Round(KGFAT, 2);
                                    //newrow["KG FAT"] = KGFAT;
                                    kgfattotal += KGFAT;
                                    KGSNF = Math.Round(KGSNF, 2);
                                    //newrow["KG SNF"] = KGSNF;
                                    kgsnftotal += KGSNF;
                                    double MValue = 0;
                                    MValue = KGFAT * cost;
                                    //MValue = MValue / 100;
                                    MValue = Math.Round(MValue, 2);
                                    //newrow["M VALUE"] = MValue;
                                    mvaluetotal += MValue;
                                    string OverheadOn = dr["overheadon"].ToString();
                                    double OHcost = 0;
                                    double overheadcost = 0;
                                    double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                    if (OverheadOn == "Ltrs")
                                    {
                                        OHcost = overheadcost * ltrs;
                                    }
                                    else
                                    {
                                        OHcost = overheadcost * Kgs;
                                    }
                                    double MSnf = 0;
                                    double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                    double m_snfpluscost = 0;
                                    double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                    double DiffSNFCost = 0;
                                    if (SNF < MSnf)
                                    {
                                        string SNFOn = dr["snfplus_on"].ToString();
                                        double diffSNF = 0;
                                        diffSNF = SNF - MSnf;
                                        diffSNF = Math.Round(diffSNF, 2);
                                        if (SNFOn == "Ltrs")
                                        {
                                            DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                        }
                                    }
                                    double p_snfpluscost = 0;
                                    double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                    double PSnf = 0;
                                    double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                    if (SNF > PSnf)
                                    {
                                        string SNFOn = dr["snfplus_on"].ToString();
                                        double diffSNF = 0;
                                        diffSNF = SNF - MSnf;
                                        if (SNFOn == "Ltrs")
                                        {
                                            DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                        }
                                    }
                                    double OHandMvalue = 0;
                                    OHandMvalue = MValue + OHcost + DiffSNFCost;
                                    //newrow["OH"] = OHcost;
                                    ohtotal += OHcost;
                                    DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                    //newrow["SNF9"] = DiffSNFCost;
                                    snf9total += DiffSNFCost;
                                    OHandMvalue = Math.Round(OHandMvalue, 2);
                                    //newrow["MILK VALUE"] = OHandMvalue;
                                    milkvaluetotal += OHandMvalue;
                                    double ltrcost = OHandMvalue / ltrs;
                                    ltrcost = Math.Round(ltrcost, 2);
                                    //newrow["Per ltr Cost"] = ltrcost;
                                    totalamount += OHandMvalue;
                                }
                            }
                            #endregion
                            #region
                            else
                            {
                                int i = 1;
                                double kgfattotal = 0;
                                double kgsnftotal = 0;
                                double kgstotal = 0;
                                double Ltrstotal = 0;
                                double TStotal = 0;
                                double mvaluetotal = 0;
                                double ohtotal = 0;
                                double snf9total = 0;
                                double milkvaluetotal = 0;
                                foreach (DataRow dr in dtDispatch.Rows)
                                {
                                    //DataRow newrow = Report.NewRow();
                                    //newrow["Sno"] = i++.ToString();
                                    DateTime dtdoe = Convert.ToDateTime(dr["doe"].ToString());
                                    //string date = dtdoe.ToString("dd/MM/yyyy");
                                    //newrow["DATE"] = date;
                                    double qty_kgs = 0;
                                    double.TryParse(dr["qty_kgs"].ToString(), out qty_kgs);
                                    //newrow["KGS"] = dr["qty_kgs"].ToString();/
                                    double qty_ltr = 0;
                                    double.TryParse(dr["qty_ltr"].ToString(), out qty_ltr);
                                    //newrow["LTRS"] = dr["qty_ltr"].ToString();
                                    double FAT = 0;
                                    double.TryParse(dr["fat"].ToString(), out FAT);
                                    FAT = Math.Round(FAT, 2);
                                    //newrow["FAT"] = FAT;
                                    double SNF = 0;
                                    double.TryParse(dr["snf"].ToString(), out SNF);
                                    //newrow["SNF"] = SNF;
                                    //newrow["CLR"] = dr["clr"].ToString();
                                    string Rateon = dr["rate_on"].ToString();
                                    string CalOn = dr["calc_on"].ToString();
                                    double weight = 0;
                                    double KGFAT = 0;
                                    double KGSNF = 0;
                                    double ltrs = 0;
                                    double.TryParse(dr["qty_ltr"].ToString(), out ltrs);
                                    Ltrstotal += ltrs;
                                    totlqtryltrs += ltrs;
                                    double Kgs = 0;
                                    double.TryParse(dr["qty_kgs"].ToString(), out Kgs);
                                    kgstotal += Kgs;
                                    double tstotal = 0;
                                    tstotal = FAT + SNF;
                                    //newrow["TS TOTAL"] = tstotal;
                                    if (Rateon == "TS")
                                    {
                                        double TS = 0;
                                        TS = FAT + SNF;
                                        weight = (TS * Kgs) / 100;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                    else if (Rateon == "KGFAT")
                                    {
                                        weight = (FAT * Kgs) / 100;
                                        KGFAT = (FAT * Kgs) / 100;
                                        KGSNF = (SNF * Kgs) / 100;
                                    }
                                    else if (Rateon == "PerLtr" || Rateon == "PerKg")
                                    {

                                        if (CalOn == "Ltrs")
                                        {
                                            weight = Kgs;
                                            KGFAT = (FAT * Kgs) / 100;
                                            KGSNF = (SNF * Kgs) / 100;
                                        }
                                        else
                                        {
                                            weight = Kgs;
                                            KGFAT = (FAT * Kgs) / 100;
                                            KGSNF = (SNF * Kgs) / 100;
                                        }
                                    }
                                    double cost = 0;
                                    double.TryParse(dr["cost"].ToString(), out cost);
                                    //newrow["RATE"] = cost;
                                    KGFAT = Math.Round(KGFAT, 2);
                                    //newrow["KG FAT"] = KGFAT;
                                    kgfattotal += KGFAT;
                                    KGSNF = Math.Round(KGSNF, 2);
                                    //newrow["KG SNF"] = KGSNF;
                                    kgsnftotal += KGSNF;
                                    double MValue = 0;
                                    if (Rateon == "PerLtr" || Rateon == "PerKg")
                                    {
                                        if (CalOn == "Ltrs")
                                        {
                                            MValue = cost * qty_ltr;
                                        }
                                        else
                                        {
                                            MValue = cost * qty_kgs;
                                        }
                                    }
                                    else
                                    {
                                        if (CalOn == "Ltrs")
                                        {
                                            MValue = tstotal * cost * qty_ltr;
                                        }
                                        else
                                        {
                                            MValue = tstotal * cost * qty_kgs;
                                        }
                                        MValue = MValue / 100;
                                    }
                                    MValue = Math.Round(MValue, 2);
                                    //newrow["M VALUE"] = MValue;
                                    mvaluetotal += MValue;
                                    string OverheadOn = dr["overheadon"].ToString();
                                    double OHcost = 0;
                                    double overheadcost = 0;
                                    double.TryParse(dr["overheadcost"].ToString(), out overheadcost);
                                    if (OverheadOn == "Ltrs")
                                    {
                                        OHcost = overheadcost * ltrs;
                                    }
                                    else
                                    {
                                        OHcost = overheadcost * Kgs;
                                    }
                                    double MSnf = 0;
                                    double.TryParse(dr["m_std_snf"].ToString(), out MSnf);
                                    double m_snfpluscost = 0;
                                    double.TryParse(dr["m_snfpluscost"].ToString(), out m_snfpluscost);
                                    double DiffSNFCost = 0;
                                    if (SNF < MSnf)
                                    {
                                        string SNFOn = dr["snfplus_on"].ToString();
                                        double diffSNF = 0;
                                        diffSNF = SNF - MSnf;
                                        diffSNF = Math.Round(diffSNF, 2);
                                        if (SNFOn == "Ltrs")
                                        {
                                            DiffSNFCost = diffSNF * ltrs * m_snfpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffSNFCost = diffSNF * Kgs * m_snfpluscost * 10;
                                        }
                                    }
                                    double p_snfpluscost = 0;
                                    double.TryParse(dr["p_snfpluscost"].ToString(), out p_snfpluscost);
                                    double PSnf = 0;
                                    double.TryParse(dr["p_std_snf"].ToString(), out PSnf);
                                    if (SNF > PSnf)
                                    {
                                        string SNFOn = dr["snfplus_on"].ToString();
                                        double diffSNF = 0;
                                        diffSNF = SNF - MSnf;
                                        if (SNFOn == "Ltrs")
                                        {
                                            DiffSNFCost = diffSNF * ltrs * p_snfpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffSNFCost = diffSNF * Kgs * p_snfpluscost * 10;
                                        }
                                    }

                                    double MFat = 0;
                                    double.TryParse(dr["m_std_fat"].ToString(), out MFat);
                                    double m_fatpluscost = 0;
                                    double.TryParse(dr["m_fatpluscost"].ToString(), out m_fatpluscost);
                                    double DiffFATCost = 0;
                                    if (FAT < MFat)
                                    {
                                        string FATOn = dr["fatplus_on"].ToString();
                                        double diffFAT = 0;
                                        diffFAT = FAT - MFat;
                                        diffFAT = Math.Round(diffFAT, 2);
                                        if (FATOn == "Ltrs")
                                        {
                                            DiffFATCost = diffFAT * ltrs * m_fatpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffFATCost = diffFAT * Kgs * m_fatpluscost * 10;
                                        }
                                    }
                                    double p_fatpluscost = 0;
                                    double.TryParse(dr["p_fatpluscost"].ToString(), out p_fatpluscost);
                                    double PFat = 0;
                                    double.TryParse(dr["p_std_fat"].ToString(), out PFat);
                                    if (FAT > PFat)
                                    {
                                        string FATOn = dr["fatplus_on"].ToString();
                                        double diffFAT = 0;
                                        diffFAT = FAT - PFat;
                                        if (FATOn == "Ltrs")
                                        {
                                            DiffFATCost = diffFAT * ltrs * p_fatpluscost * 10;
                                        }
                                        else
                                        {
                                            DiffFATCost = diffFAT * Kgs * p_fatpluscost * 10;
                                        }
                                    }
                                    DiffFATCost = Math.Round(DiffFATCost, 2);
                                    //newrow["FAT+/-"] = DiffFATCost;
                                    double OHandMvalue = 0;
                                    OHandMvalue = MValue + OHcost + DiffSNFCost + DiffFATCost;
                                    //newrow["OH"] = OHcost;
                                    ohtotal += OHcost;
                                    DiffSNFCost = Math.Round(DiffSNFCost, 2);
                                    //newrow["SNF9"] = DiffSNFCost;
                                    snf9total += DiffSNFCost;
                                    OHandMvalue = Math.Round(OHandMvalue, 2);
                                    //newrow["MILK VALUE"] = OHandMvalue;
                                    milkvaluetotal += OHandMvalue;
                                    //newrow["Transaction No"] = dr["dcno"].ToString();
                                    //newrow["DC NO"] = dr["partydcno"].ToString();
                                    //newrow["CC Name"] = dr["vendorname"].ToString();
                                    //newrow["TANKER NO"] = dr["vehicleno"].ToString();
                                    double ltrcost = OHandMvalue / ltrs;
                                    ltrcost = Math.Round(ltrcost, 2);
                                    totalamount += OHandMvalue;
                                    //newrow["Per ltr Cost"] = ltrcost;
                                }
                            }
                            #endregion
                        }
                    }
                }
                //List<biproduct_products> biproduct_productslist = new List<biproduct_products>();
                //biproduct_products obj = new biproduct_products();
                //obj.costperltrs = (totalamount / totlqtryltrs).ToString();
                //biproduct_productslist.Add(obj);
                string msg = (totalamount / totlqtryltrs).ToString();
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("SELECT  TOP (1) batchentryid, qty_kgs, qty_ltrs, fat, snf, doe, fromsiloid, fromccid, tosiloid, perltrrate FROM  batchentrydetails WHERE (fromsiloid = @fromsiloid) AND (branchid = @branchid) ORDER BY batchentryid DESC");
                cmd.Parameters.Add("@fromsiloid", fromsiloid);
                cmd.Parameters.Add("@branchid", BranchID);
                DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];
                if (dtbatch.Rows.Count > 0)
                {
                    string msg = dtbatch.Rows[0]["perltrrate"].ToString();
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    private void get_Branch_details_wyra(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            cmd = new SqlCommand("SELECT  sno, branchname, address, whcode, branchtype, tinno, cstno, mitno, branchcode FROM  branch_info WHERE  (sno IN (26, 115))");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Branches> Departmentslst = new List<Branches>();
            foreach (DataRow dr in routes.Rows)
            {
                Branches getroutes = new Branches();
                getroutes.Sno = dr["sno"].ToString();
                getroutes.branchName = dr["branchname"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_gheecreambinding_details_wyra(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  sno, creamtype, ob, obfat, recivedqty, recivedfat, totalcreamqty, avgfat, branchid, createdon AS doe, CONVERT(varchar, createdon, 126) AS datetime, receivedtype, receivedfrom, recivesnf, snf FROM  plant_production_details WHERE  (branchid = @branchid) AND (deptid = 3) AND (creamtype = 'Buffalo') AND (createdon BETWEEN @d1 AND @d2) OR (branchid = @branchid) AND (deptid = 3) AND (creamtype = 'Cow') AND (createdon BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gheeproduction> gheecreamdetails = new List<gheeproduction>();
            string closingbalance = string.Empty;
            foreach (DataRow dr in routes.Rows)
            {
                string close = string.Empty;
                gheeproduction gheedetails = new gheeproduction();
                gheedetails.sno = dr["sno"].ToString();
                gheedetails.creamtype = dr["creamtype"].ToString();
                gheedetails.recivequnatity = dr["recivedqty"].ToString();
                gheedetails.recivefat = dr["recivedfat"].ToString();
                gheedetails.ob = dr["ob"].ToString();
                gheedetails.obfat = dr["obfat"].ToString();
                gheedetails.totalcreamqty = dr["totalcreamqty"].ToString();
                gheedetails.doe = dr["doe"].ToString();
                gheedetails.datetime = dr["datetime"].ToString();
                gheedetails.avgfat = dr["avgfat"].ToString();
                gheedetails.receivedfrom = dr["receivedfrom"].ToString();
                gheedetails.receivedtype = dr["receivedtype"].ToString();
                gheedetails.recivesnf = dr["recivesnf"].ToString();
                gheedetails.snf = dr["snf"].ToString();
                double obs = 0, obsnfs = 0, recivedqtys = 0, recivesnfs = 0;
                string ob = dr["ob"].ToString();
                if (ob == "")
                {
                    obs = 0;
                }
                else
                {
                    obs = Convert.ToDouble(ob);
                }
                string obsnf = dr["snf"].ToString();
                if (obsnf == "")
                {
                    obsnfs = 0;
                }
                else
                {
                    obsnfs = Convert.ToDouble(obsnf);
                }
                string recivedqty = dr["recivedqty"].ToString();
                if (recivedqty == "")
                {
                    recivedqtys = 0;
                }
                else
                {
                    recivedqtys = Convert.ToDouble(recivedqty);
                }
                string recivesnf = dr["recivesnf"].ToString();
                if (recivesnf == "")
                {
                    recivesnfs = 0;
                }
                else
                {
                    recivesnfs = Convert.ToDouble(recivesnf);
                }
                double receivedkgsnf = (recivesnfs * recivedqtys) / 100;
                double obkgsnf = (obsnfs * obs) / 100;
                double totlqty = recivedqtys + obs;
                double totkgsnf = receivedkgsnf + obkgsnf;
                double avgsnf = (totkgsnf * 100) / totlqty;
                gheedetails.avgsnf = Math.Round(avgsnf, 2).ToString();
                gheecreamdetails.Add(gheedetails);
            }
            string response = GetJson(gheecreamdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_cream_opening_details(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string BranchID = context.Session["Branch_ID"].ToString();
            string productid = "1217";
            cmd = new SqlCommand("SELECT  pm.sno, pm.productname, pdm.branchid, pdm.quantity FROM   productmaster AS pm INNER JOIN  productmonitar AS pdm ON pm.sno = pdm.productid WHERE   (pm.sno = @productid) AND (pdm.branchid = @branchid)");
            cmd.Parameters.Add("@productid", productid);
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Branches> Departmentslst = new List<Branches>();
            foreach (DataRow dr in routes.Rows)
            {
                Branches getroutes = new Branches();
                getroutes.sno = dr["sno"].ToString();
                getroutes.productname = dr["productname"].ToString();
                getroutes.quantity = dr["quantity"].ToString();
                Departmentslst.Add(getroutes);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class creamclose_details_list
    {
        public string date { get; set; }
        public List<creamclose> cream_closing_details { set; get; }
    }

    public class creamclose
    {
        public string fat { get; set; }
        public string snf { get; set; }
        public string qty_kgs { get; set; }
        public string productsno { get; set; }
    }
    private void save_cream_closing_details(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string deptid = context.Session["DeptID"].ToString();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            creamclose_details_list obj = js.Deserialize<creamclose_details_list>(title1);
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string date = obj.date;
            DateTime dttdate = Convert.ToDateTime(date);
            cmd = new SqlCommand("select * from closing_details where (closeddate between @d1 and @d2) and (branchid=@branchid) AND (type='cream')");
            cmd.Parameters.Add("@d1", GetLowDate(dttdate));
            cmd.Parameters.Add("@d2", GetHighDate(dttdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtclose = vdm.SelectQuery(cmd).Tables[0];
            if (dtclose.Rows.Count == 0)
            {
                foreach (creamclose o in obj.cream_closing_details)
                {
                    cmd = new SqlCommand("INSERT INTO closing_details  (qty_ltrs, fat, snf, productid, deptid, closedby, closeddate, branchid, type, doe)   VALUES  (@qty_ltrs,@fat,@snf,@productid,@deptid,@closedby,@closeddate,@branchid,@type,@doe)");
                    cmd.Parameters.Add("@qty_ltrs", o.qty_kgs);
                    cmd.Parameters.Add("@fat", o.fat);
                    cmd.Parameters.Add("@snf", o.snf);
                    cmd.Parameters.Add("@productid", o.productsno);
                    cmd.Parameters.Add("@deptid", deptid);
                    cmd.Parameters.Add("@closedby", UserID);
                    cmd.Parameters.Add("@closeddate", dttdate);
                    cmd.Parameters.Add("@branchid", BranchID);
                    cmd.Parameters.Add("@type", "cream");
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    vdm.insert(cmd);
                }
                string msg = "Cream details successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string msg = "Cream details already Closed";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void save_ghee_sales_click_wyra(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string sno = context.Request["sno"];
            string branchid = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            WebClient client = new WebClient();
            gheeproduction obj = js.Deserialize<gheeproduction>(title1);
            string btnvalue = obj.btnvalue;
            string date = obj.date;
            DateTime dtdate = Convert.ToDateTime(date);
            double quantitydetails;
            double fat = 0;
            double clr = 0;
            double snfvalue = 0;
            string deptid = "3";
            if (btnvalue == "Save")
            {
                foreach (gheesaleslist o in obj.ghee_sales_details)
                {
                    string ob = o.ob;
                    string obpak = o.obpak;
                    string frmkcc = o.frmkcc;
                    string mrkreturn = o.mrkreturn;
                    string othreturn = o.othreturn;
                    string salespck = o.salespck;
                    string cutting = o.cutting;
                    string cbpak = o.cbpak;
                    string cb = o.cb;
                    string packetsizes = o.packetsize;
                    double packetsize = 0;
                    if (packetsizes == "" || packetsizes == null || packetsizes == "undefined" || packetsizes == "null")
                    {
                        packetsize = 0;
                    }
                    else
                    {
                        packetsize = Convert.ToDouble(packetsizes);
                    }
                    double obpaks = 0;
                    if (obpak == "" || obpak == null || obpak == "undefined" || obpak == "null")
                    {
                        obpaks = 0;
                    }
                    else
                    {
                        obpaks = Convert.ToDouble(obpak);
                    }
                    double frmkccs = 0;
                    if (frmkcc == "" || frmkcc == null || frmkcc == "undefined" || frmkcc == "null")
                    {
                        frmkccs = 0;
                    }
                    else
                    {
                        frmkccs = Convert.ToDouble(frmkcc);
                    }
                    double mrkreturns = 0;
                    if (mrkreturn == "" || mrkreturn == null || mrkreturn == "undefined" || mrkreturn == "null")
                    {
                        mrkreturns = 0;
                    }
                    else
                    {
                        mrkreturns = Convert.ToDouble(mrkreturn);
                    }
                    double othreturns = 0;
                    if (othreturn == "" || othreturn == null || othreturn == "undefined" || othreturn == "null")
                    {
                        othreturns = 0;
                    }
                    else
                    {
                        othreturns = Convert.ToDouble(othreturn);
                    }
                    double salespcks = 0;
                    if (salespck == "" || salespck == null || salespck == "undefined" || salespck == "null")
                    {
                        salespcks = 0;
                    }
                    else
                    {
                        salespcks = Convert.ToDouble(salespck);
                    }
                    double cuttings = 0;
                    if (cutting == "" || cutting == null || cutting == "undefined" || cutting == "null")
                    {
                        cuttings = 0;
                    }
                    else
                    {
                        cuttings = Convert.ToDouble(cutting);
                    }
                    double add = obpaks + frmkccs + mrkreturns + othreturns;
                    double sub = salespcks + cuttings;
                    double cbd = add - sub;
                    double closebal = Math.Round((cbd * packetsize), 4);
                    cmd = new SqlCommand("insert into gheesales(productid, salesquantity, branchid, userid, remarks, doe, fromkcc, marcketreturn, oterreturn, cutting) values (@productid, @sales,  @branchid, @userid, @remarks, @doe, @fromkcc, @marcketreturn, @oterreturn, @cutting)");
                    // fromkcc, marcketreturn, oterreturn, cutting
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@sales", (salespcks * packetsize));
                    cmd.Parameters.Add("@doe", dtdate);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@userid", UserID);
                    cmd.Parameters.Add("@remarks", obj.remarks);
                    cmd.Parameters.Add("@fromkcc", (frmkccs * packetsize));
                    cmd.Parameters.Add("@marcketreturn", (mrkreturns * packetsize));
                    cmd.Parameters.Add("@oterreturn", (othreturns * packetsize));
                    cmd.Parameters.Add("@cutting", (cuttings * packetsize));
                    vdm.insert(cmd);
                    cmd = new SqlCommand("update productmonitar set quantity=@quantity where productid=@productid and branchid=@branchid");
                    cmd.Parameters.Add("@quantity", closebal);
                    cmd.Parameters.Add("@productid", o.productid);
                    cmd.Parameters.Add("@branchid", branchid);
                    if (vdm.Update(cmd) == 0)
                    {
                        cmd = new SqlCommand("insert  into productmonitar (productid,quantity,branchid) values (@productid, @quantity, @branchid) ");
                        cmd.Parameters.Add("@quantity", closebal);
                        cmd.Parameters.Add("@productid", o.productid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                    }
                }
                string msg = "ghee sales details saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_personal_detailstest(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            int BranchID = Convert.ToInt32(context.Session["Branch_ID"].ToString());
            using (Dairy_ERPEntities pers = new Dairy_ERPEntities())
            {
                var result = (from c in pers.personalinfoes
                              where c.branchid == BranchID
                              select c);
                string response = GetJson(result);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void save_personal_details_clicktest(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            int BranchID = Convert.ToInt32(context.Session["Branch_ID"].ToString());
            string name = context.Request["name"];
            string phoneno = context.Request["phoneno"];
            string email = context.Request["email"];
            string msgtype = context.Request["msgtype"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                using (Dairy_ERPEntities pers = new Dairy_ERPEntities())
                {
                    personalinfo pes = new personalinfo
                    {
                        name = name,
                        mobno = phoneno,
                        email = email,
                        msgtype = msgtype,
                        branchid = BranchID
                    };
                    pers.AddTopersonalinfoes(pes);
                    pers.SaveChanges();
                }
                string msg = "Personal info saved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                int id = Convert.ToInt32(context.Request["id"]);
                using (Dairy_ERPEntities pers = new Dairy_ERPEntities())
                {
                    personalinfo pes = (from c in pers.personalinfoes
                                         where c.sno == id
                                         select c).FirstOrDefault();
                    pes.name = name;
                    pes.mobno = phoneno;
                    pes.email = email;
                    pes.msgtype = msgtype;
                    pes.branchid = BranchID;
                    pers.SaveChanges();
                }
                string msg = "Personal info updated successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_cowmilkdetailschart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2)  AND (m.milktype = 'Cow')");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;
            foreach (DataRow dr in dtroutes.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
            }
            cowdetailschart getroutes = new cowdetailschart();
            getroutes.qtykg = totalqtykg.ToString();
            getroutes.qtyltr = totalqtyltr.ToString();
            getroutes.fat = totalfat.ToString();
            getroutes.snf = totalsnf.ToString();
            getroutes.kgfat = totalkgfat.ToString();
            getroutes.kgsnf = totalkgsnf.ToString();
            cowdetailschart.Add(getroutes);
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_buffalomilkdetailschart(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand(" SELECT m.sno, m.transid, m.dcno, m.transtype, m.partydcno, m.sectionid, m.qty_ltr, m.qty_kgs, m.percentageon, m.snf, m.fat, m.clr, m.hs, m.alcohol, m.remarks, m.chemist, m.qco, m.inwardno, m.vehicleno, m.temp, m.doe, m.branchid, m.operatedby, m.cellno, m.milktype, m.cob1, m.phosps1, m.mbrt, m.acidity, m.ot, m.neutralizers, ml.milktransaction_sno, ml.rate_on, ml.calc_on, ml.cost, ml.overheadon, ml.overheadcost, ml.m_std_snf, ml.p_std_snf, ml.snfplus_on, ml.p_snfpluscost, ml.transport_on, ml.transportcost, ml.transport, ml.entry_by, ml.m_snfpluscost, vendors.vendorname FROM milktransactions AS m INNER JOIN milktransaction_logs AS ml ON m.sno = ml.milktransaction_sno INNER JOIN vendors ON m.sectionid = vendors.sno WHERE (m.branchid = @branchid) and (m.transtype = 'In') and (m.entrydate between @d1 and @d2) AND (m.milktype = 'Buffalo')");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@BranchID", branchid);
            DataTable dtbuff = vdm.SelectQuery(cmd).Tables[0];
            List<cowdetailschart> cowdetailschart = new List<cowdetailschart>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;

            foreach (DataRow dr in dtbuff.Rows)
            {
                double qty_kgs = Convert.ToDouble(dr["qty_kgs"].ToString());
                totalqtykg += qty_kgs;
                double qty_ltr = Convert.ToDouble(dr["qty_ltr"].ToString());
                totalqtyltr += qty_ltr;
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                double KGFAT = 0;
                double KGSNF = 0;
                string Rateon = dr["rate_on"].ToString();
                if (Rateon == "TS")
                {
                    double TS = 0;
                    TS = FAT + SNF;
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "KGFAT")
                {
                    KGFAT = (FAT * qty_kgs) / 100;
                    KGSNF = (SNF * qty_kgs) / 100;
                }
                else if (Rateon == "PerLtr" || Rateon == "PerKg")
                {
                    string CalOn = dr["calc_on"].ToString();
                    if (CalOn == "Ltrs")
                    {
                        KGFAT = (FAT * qty_ltr) / 100;
                        KGSNF = (SNF * qty_ltr) / 100;
                    }
                    else
                    {
                        KGFAT = (FAT * qty_kgs) / 100;
                        KGSNF = (SNF * qty_kgs) / 100;
                    }
                }
                KGFAT = Math.Round(KGFAT, 2);
                totalkgfat += KGFAT;
                KGSNF = Math.Round(KGSNF, 2);
                totalkgsnf += KGSNF;
                totalfat = (totalkgfat / totalqtykg) * 100;
                totalfat = Math.Round(totalfat, 2);
                totalsnf = (totalkgsnf / totalqtykg) * 100;
                totalsnf = Math.Round(totalsnf, 2);
            }
            cowdetailschart getroutes = new cowdetailschart();
            getroutes.qtykg = totalqtykg.ToString();
            getroutes.qtyltr = totalqtyltr.ToString();
            getroutes.fat = totalfat.ToString();
            getroutes.snf = totalsnf.ToString();
            getroutes.kgfat = totalkgfat.ToString();
            getroutes.kgsnf = totalkgsnf.ToString();
            cowdetailschart.Add(getroutes);
            string response = GetJson(cowdetailschart);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class planningbatch
    {
        public string qtyltr { get; set; }
        public string qtykg { get; set; }
        public string snf { get; set; }
        public string fat { get; set; }
        public string kgsnf { get; set; }
        public string kgfat { get; set; }
        public string clr { get; set; }
        public string batch { get; set; }
        public string silo { get; set; }
        public string status { get; set; }
        public string siloid { get; set; }
        public string Sno { get; set; }
    }

    private void batchwisefatsnfdetails(HttpContext context)
    {
        try
        {
            vdm = new SalesDBManager();
            string branchid = context.Session["Branch_ID"].ToString();
            string batchid = context.Request["batch"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT batchid, batch, batchcode, branchid, departmentid, createdby, fat, snf, clr  FROM  batchmaster where batchid=@batchid");
            cmd.Parameters.Add("@batchid", batchid);
            DataTable dtbatch = vdm.SelectQuery(cmd).Tables[0];
            List<planningbatch> planningbatchdtls = new List<planningbatch>();
            double totalqtykg = 0;
            double totalqtyltr = 0;
            double totalfat = 0;
            double totalsnf = 0;
            double totalkgfat = 0;
            double totalkgsnf = 0;

            foreach (DataRow dr in dtbatch.Rows)
            {
              
                double FAT = 0;
                double.TryParse(dr["fat"].ToString(), out FAT);
                FAT = Math.Round(FAT, 2);
                double SNF = 0;
                double.TryParse(dr["snf"].ToString(), out SNF);
                SNF = Math.Round(SNF, 2);
                double CLR = 0;
                double.TryParse(dr["clr"].ToString(), out CLR);
                CLR = Math.Round(CLR, 2);
                planningbatch getroutes = new planningbatch();
                getroutes.fat = FAT.ToString();
                getroutes.snf = SNF.ToString();
                getroutes.clr = CLR.ToString();
                planningbatchdtls.Add(getroutes);
              
            }
            string response = GetJson(planningbatchdtls);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_silopositions(HttpContext context)
    {
        try
        {
            List<planningbatch> silobatchdtls = new List<planningbatch>();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT  silomaster.SiloName, silowiseclosingdetails.sno, silowiseclosingdetails.siloid, silowiseclosingdetails.enteredby, silowiseclosingdetails.qty_kgs, silowiseclosingdetails.fat, silowiseclosingdetails.snf, silowiseclosingdetails.clr,  silowiseclosingdetails.closingdate, batchmaster.batch FROM     silowiseclosingdetails INNER JOIN silomaster ON silowiseclosingdetails.siloid = silomaster.SiloId INNER JOIN batchmaster ON silowiseclosingdetails.batchid = batchmaster.batchid WHERE  (silowiseclosingdetails.closingdate BETWEEN @d1 AND @d2) AND (silowiseclosingdetails.branchid = @branchid)");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.Add("@branchid", BranchID);
            DataTable dtsilos = vdm.SelectQuery(cmd).Tables[0];
            if (dtsilos.Rows.Count > 0)
            {
                foreach (DataRow dr in dtsilos.Rows)
                {
                    string SiloName = dr["SiloName"].ToString();
                    string siloid = dr["siloid"].ToString();
                    string batchname = dr["batch"].ToString();
                    string qty = dr["qty_kgs"].ToString();
                    string status = "";
                    if (batchname == "Condensed milk" || batchname == "Skimmed Milk" || batchname == "Buffalo Milk" || batchname == "COW MILK")
                    {
                        status = "Ready For Processing";
                    }
                    else
                    {
                        status = "Processing Completed";
                    }


                    double FAT = 0;
                    double.TryParse(dr["fat"].ToString(), out FAT);
                    FAT = Math.Round(FAT, 2);
                    double SNF = 0;
                    double.TryParse(dr["snf"].ToString(), out SNF);
                    SNF = Math.Round(SNF, 2);
                    double CLR = 0;
                    double.TryParse(dr["clr"].ToString(), out CLR);
                    CLR = Math.Round(CLR, 2);
                    planningbatch getroutes = new planningbatch();
                    getroutes.siloid = siloid;
                    getroutes.silo = SiloName;
                    getroutes.status = status;
                    getroutes.batch = batchname;
                    getroutes.qtykg = qty;
                    getroutes.fat = FAT.ToString();
                    getroutes.snf = SNF.ToString();
                    getroutes.clr = CLR.ToString();
                    silobatchdtls.Add(getroutes);
                    
                }
                string response = GetJson(silobatchdtls);
                context.Response.Write(response);
            }
        }
        catch{

        }
    }

    private void get_flowmeter_details(HttpContext context)
    {
        try
        {
            List<planningbatch> silobatchdtls = new List<planningbatch>();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, reading, branchid, createdby, doe, createdon FROM flowmeterreadingdetails");
            DataTable dtsilos = vdm.SelectQuery(cmd).Tables[0];
            if (dtsilos.Rows.Count > 0)
            {
                foreach (DataRow dr in dtsilos.Rows)
                {
                    string qty = dr["reading"].ToString();
                    string doe = dr["doe"].ToString();
                    planningbatch getroutes = new planningbatch();
                    getroutes.Sno = dr["sno"].ToString();
                    getroutes.qtykg = qty;
                    getroutes.batch = doe.ToString();
                    silobatchdtls.Add(getroutes);

                }
                string response = GetJson(silobatchdtls);
                context.Response.Write(response);
            }
        }
        catch
        {

        }
    }

    private void flow_details_save(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string reading = context.Request["empnum"].ToString();
            string ob = context.Request["ob"].ToString();

            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string date = context.Request["date"].ToString();
            DateTime mydate = ServerDateCurrentdate;
            if (date != "")
            {
                mydate = Convert.ToDateTime(date);
            }
            cmd = new SqlCommand("INSERT INTO flowmeterreadingdetails  (reading, branchid, createdby, doe, createdon, ob)   VALUES  (@reading,@branchid,@closedby,@date,@doe, @ob)");
            cmd.Parameters.Add("@reading", reading);
            cmd.Parameters.Add("@date", mydate);
            cmd.Parameters.Add("@closedby", UserID);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@ob", ob);
            vdm.insert(cmd);


            //cmd = new SqlCommand("Select  MAX(sno) as productid from flowmeterreadingdetails");
            //DataTable dt_Trans = vdm.SelectQuery(cmd).Tables[0];
            //string sno = dt_Trans.Rows[0]["productid"].ToString();

            //if (context.Request.Files.Count > 0)
            //{
                
            //    HttpFileCollection files = context.Request.Files;
            //    for (int i = 0; i < files.Count; i++)
            //    {
            //        HttpPostedFile file = files[i];
            //        string[] extension = file.FileName.Split('.');
            //        string upload_filename = "flowmeter_" + sno + ".jpeg";// +extension[extension.Length - 1];
            //        if (UploadToFTP(file, upload_filename))
            //        {
            //            cmd = new SqlCommand("update flowmeterreadingdetails set path=@photos where sno=@sno");
            //            cmd.Parameters.Add("@sno", sno);
            //            cmd.Parameters.Add("@photos", upload_filename);
            //            vdm.Update(cmd);
            //        }
            //    }
            //    context.Response.ContentType = "text/plain";
            //    context.Response.Write("File Uploaded Successfully!");
            //}


           // cmd = new SqlCommand("");

            string msg = "Flow meter details successfully Saved";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void save_edit_sampledetails(HttpContext context)
    {
        try
        {
            string BranchID = context.Session["Branch_ID"].ToString();
            string UserID = context.Session["Employ_Sno"].ToString();
            string type = context.Request["type"].ToString();
            string celltype = context.Request["celltype"].ToString();
            string dcno = context.Request["dcno"].ToString();
            string vehicleno = context.Request["vehicleno"].ToString();
            string sampleno = context.Request["sampleno"].ToString();
            string btnval = context.Request["btnval"].ToString();
            string sno = context.Request["sno"].ToString();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("INSERT INTO samplenodetails  (type, celltype, dcno, vehicleno, sampleno, createdby, doe, branchid)   VALUES  (@type, @celltype, @dcno, @vehicleno, @sampleno, @Createdby, @doe,  @branchid)");
            cmd.Parameters.Add("@type", type);
            cmd.Parameters.Add("@celltype", celltype);
            cmd.Parameters.Add("@dcno", dcno);
            cmd.Parameters.Add("@vehicleno", vehicleno);
            cmd.Parameters.Add("@sampleno", sampleno);
            cmd.Parameters.Add("@Createdby", UserID);
            cmd.Parameters.Add("@branchid", BranchID);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            vdm.insert(cmd);
            string msg = "ok";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }

    private void get_sampleno_details(HttpContext context)
    {
        try
        {
            List<planningbatch> silobatchdtls = new List<planningbatch>();
            DateTime ServerDateCurrentdate = SalesDBManager.GetTime(vdm.conn);
            string BranchID = context.Session["Branch_ID"].ToString();
            cmd = new SqlCommand("SELECT sno, type, celltype, dcno, vehicleno, sampleno, createdby, doe, branchid FROM samplenodetails WHERE (doe BETWEEN @d1 and @d2)");
            cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-7));
            cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtsampleno = vdm.SelectQuery(cmd).Tables[0];
            if (dtsampleno.Rows.Count > 0)
            {
                foreach (DataRow dr in dtsampleno.Rows)
                {
                    string type = dr["type"].ToString();
                    string sampleno = dr["sampleno"].ToString();
                    string doe = dr["doe"].ToString();
                    string sno = dr["sno"].ToString();
                   
                    planningbatch getroutes = new planningbatch();
                    getroutes.silo = type;
                    getroutes.status = sampleno;
                    getroutes.batch = doe;
                    getroutes.Sno = sno;
                    silobatchdtls.Add(getroutes);

                }
                string response = GetJson(silobatchdtls);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
}